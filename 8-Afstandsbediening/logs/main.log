2017-12-29 20:42:35,212 +0100 [main] DEBUG (FromReferenceNode.java:60) - Resolved : p -> person1_.id
2017-12-29 20:42:35,213 +0100 [main] DEBUG (DotNode.java:666) - getDataType() : address -> org.hibernate.type.ManyToOneType(model.entities.Address)
2017-12-29 20:42:35,214 +0100 [main] DEBUG (DotNode.java:625) - dereferenceShortcut() : property id in model.entities.Person does not require a join.
2017-12-29 20:42:35,215 +0100 [main] DEBUG (DotNode.java:650) - Unresolved property path is now 'address.id'
2017-12-29 20:42:35,216 +0100 [main] DEBUG (FromReferenceNode.java:60) - Resolved : p.address -> person1_.addressId
2017-12-29 20:42:35,217 +0100 [main] DEBUG (DotNode.java:666) - getDataType() : address.id -> org.hibernate.type.IntegerType@50a7bc6e
2017-12-29 20:42:35,218 +0100 [main] DEBUG (FromReferenceNode.java:60) - Resolved : p.address.id -> person1_.addressId
2017-12-29 20:42:35,219 +0100 [main] DEBUG (HqlSqlBaseWalker.java:128) - select : finishing up [level=2, statement=select]
2017-12-29 20:42:35,220 +0100 [main] DEBUG (HqlSqlWalker.java:747) - processQuery() :  ( SELECT ( {select clause} ( person1_.addressId ( person1_.addressId person1_.id address ) id ) ) ( FromClause{level=2} Person person1_ ) )
2017-12-29 20:42:35,233 +0100 [main] DEBUG (JoinProcessor.java:192) - Using FROM fragment [Person person1_]
2017-12-29 20:42:35,233 +0100 [main] DEBUG (HqlSqlBaseWalker.java:132) - select >> end [level=2, statement=select]
2017-12-29 20:42:35,236 +0100 [main] DEBUG (HqlSqlBaseWalker.java:128) - select : finishing up [level=1, statement=select]
2017-12-29 20:42:35,236 +0100 [main] DEBUG (HqlSqlWalker.java:747) - processQuery() :  ( SELECT ( {select clause} address0_.id ) ( FromClause{level=1} address address0_ ) ( WHERE ( not in ( address0_.id address0_.id id ) ( inList ( SELECT ( {select clause} ( person1_.addressId ( person1_.addressId person1_.id address ) id ) ) ( FromClause{level=2} Person person1_ ) ) ) ) ) )
2017-12-29 20:42:35,238 +0100 [main] DEBUG (JoinProcessor.java:192) - Using FROM fragment [address address0_]
2017-12-29 20:42:35,239 +0100 [main] DEBUG (HqlSqlBaseWalker.java:132) - select >> end [level=1, statement=select]
2017-12-29 20:42:35,239 +0100 [main] DEBUG (QueryTranslatorImpl.java:269) - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (address,Person)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'address0_.id as id1_0_' {alias=a, className=model.entities.Address, tableAlias=address0_}
    |  \-[SQL_TOKEN] SqlFragment: 'address0_.city as city2_0_, address0_.country as country3_0_, address0_.mailBox as mailBox4_0_, address0_.nr as nr5_0_, address0_.postalCode as postalCo6_0_, address0_.street as street7_0_'
    +-[FROM] FromClause: 'FROM' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[a], fromElementByTableAlias=[address0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'address address0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=a,role=null,tableName=address,tableAlias=address0_,origin=null,columns={,className=model.entities.Address}}
    \-[WHERE] SqlNode: 'WHERE'
       \-[NOT_IN] InLogicOperatorNode: 'not in'
          +-[DOT] DotNode: 'address0_.id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=id,path=a.id,tableAlias=address0_,className=model.entities.Address,classAlias=a}
          |  +-[ALIAS_REF] IdentNode: 'address0_.id' {alias=a, className=model.entities.Address, tableAlias=address0_}
          |  \-[IDENT] IdentNode: 'id' {originalText=id}
          \-[IN_LIST] SqlNode: 'inList'
             \-[SELECT] QueryNode: 'SELECT'  querySpaces (address,Person)
                +-[SELECT_CLAUSE] SelectClause: '{select clause}'
                |  \-[DOT] DotNode: 'person1_.addressId' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=address.id,path=p.address.id,tableAlias=person1_,className=model.entities.Person,classAlias=p}
                |     +-[DOT] DotNode: 'person1_.addressId' {propertyName=id,dereferenceType=UNKNOWN,getPropertyPath=address.id,path=p.address,tableAlias=person1_,className=model.entities.Person,classAlias=p}
                |     |  +-[ALIAS_REF] IdentNode: 'person1_.id' {alias=p, className=model.entities.Person, tableAlias=person1_}
                |     |  \-[IDENT] IdentNode: 'address' {originalText=address}
                |     \-[IDENT] IdentNode: 'id' {originalText=id}
                \-[FROM] FromClause: 'FROM' FromClause{level=2, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[p], fromElementByTableAlias=[person1_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
                   \-[FROM_FRAGMENT] FromElement: 'Person person1_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=p,role=null,tableName=Person,tableAlias=person1_,origin=null,columns={,className=model.entities.Person}}

2017-12-29 20:42:35,239 +0100 [main] DEBUG (ErrorCounter.java:95) - throwQueryException() : no errors
2017-12-29 20:42:35,246 +0100 [main] DEBUG (QueryTranslatorImpl.java:251) - HQL: SELECT a FROM model.entities.Address a WHERE a.id NOT IN (SELECT p.address.id FROM model.entities.Person p)
2017-12-29 20:42:35,246 +0100 [main] DEBUG (QueryTranslatorImpl.java:252) - SQL: select address0_.id as id1_0_, address0_.city as city2_0_, address0_.country as country3_0_, address0_.mailBox as mailBox4_0_, address0_.nr as nr5_0_, address0_.postalCode as postalCo6_0_, address0_.street as street7_0_ from address address0_ where address0_.id not in  (select person1_.addressId from Person person1_)
2017-12-29 20:42:35,246 +0100 [main] DEBUG (ErrorCounter.java:95) - throwQueryException() : no errors
2017-12-29 20:42:35,250 +0100 [main] DEBUG (NamedQueryRepository.java:167) - Checking 0 named SQL queries
2017-12-29 20:42:35,251 +0100 [main] DEBUG (SessionFactoryRegistry.java:52) - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@6722db6e
2017-12-29 20:42:35,252 +0100 [main] DEBUG (SessionFactoryRegistry.java:74) - Registering SessionFactory: 4087c04c-973e-4942-970e-3dc007cce64d (<unnamed>)
2017-12-29 20:42:35,252 +0100 [main] DEBUG (SessionFactoryRegistry.java:81) - Not binding SessionFactory to JNDI, no JNDI name configured
2017-12-29 20:42:35,305 +0100 [main] DEBUG (StatisticsInitiator.java:82) - Statistics initialized [enabled=false]
2017-12-29 20:42:35,311 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:42:35,321 +0100 [main] DEBUG (QueryTranslatorImpl.java:282) - parse() - HQL: FROM model.entities.Remote
2017-12-29 20:42:35,322 +0100 [main] DEBUG (ErrorCounter.java:95) - throwQueryException() : no errors
2017-12-29 20:42:35,322 +0100 [main] DEBUG (QueryTranslatorImpl.java:305) - --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'FROM'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[IDENT] Node: 'model'
                |  \-[IDENT] Node: 'entities'
                \-[IDENT] Node: 'Remote'

2017-12-29 20:42:35,322 +0100 [main] DEBUG (HqlSqlBaseWalker.java:124) - select << begin [level=1, statement=select]
2017-12-29 20:42:35,322 +0100 [main] DEBUG (FromElement.java:147) - FromClause{level=1} : model.entities.Remote (<no alias>) -> remote0_
2017-12-29 20:42:35,322 +0100 [main] DEBUG (HqlSqlBaseWalker.java:128) - select : finishing up [level=1, statement=select]
2017-12-29 20:42:35,323 +0100 [main] DEBUG (HqlSqlWalker.java:747) - processQuery() :  ( SELECT ( FromClause{level=1} Remote remote0_ ) )
2017-12-29 20:42:35,323 +0100 [main] DEBUG (HqlSqlWalker.java:1023) - Derived SELECT clause created.
2017-12-29 20:42:35,324 +0100 [main] DEBUG (JoinProcessor.java:192) - Using FROM fragment [Remote remote0_]
2017-12-29 20:42:35,324 +0100 [main] DEBUG (HqlSqlBaseWalker.java:132) - select >> end [level=1, statement=select]
2017-12-29 20:42:35,324 +0100 [main] DEBUG (QueryTranslatorImpl.java:269) - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Remote)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'remote0_.id as id1_2_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Remote,tableAlias=remote0_,origin=null,columns={,className=model.entities.Remote}}}
    |  \-[SQL_TOKEN] SqlFragment: 'remote0_.frequency as frequenc2_2_, remote0_.isActive as isActive3_2_, remote0_.serialNumber as serialNu4_2_'
    \-[FROM] FromClause: 'FROM' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[remote0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'Remote remote0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Remote,tableAlias=remote0_,origin=null,columns={,className=model.entities.Remote}}

2017-12-29 20:42:35,324 +0100 [main] DEBUG (ErrorCounter.java:95) - throwQueryException() : no errors
2017-12-29 20:42:35,324 +0100 [main] DEBUG (QueryTranslatorImpl.java:251) - HQL: FROM model.entities.Remote
2017-12-29 20:42:35,324 +0100 [main] DEBUG (QueryTranslatorImpl.java:252) - SQL: select remote0_.id as id1_2_, remote0_.frequency as frequenc2_2_, remote0_.isActive as isActive3_2_, remote0_.serialNumber as serialNu4_2_ from Remote remote0_
2017-12-29 20:42:35,324 +0100 [main] DEBUG (ErrorCounter.java:95) - throwQueryException() : no errors
2017-12-29 20:42:35,330 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_, remote0_.frequency as frequenc2_2_, remote0_.isActive as isActive3_2_, remote0_.serialNumber as serialNu4_2_ from Remote remote0_
2017-12-29 20:42:35,367 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 0
2017-12-29 20:42:35,372 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#161]
2017-12-29 20:42:35,381 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 1
2017-12-29 20:42:35,381 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#162]
2017-12-29 20:42:35,382 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 2
2017-12-29 20:42:35,382 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#163]
2017-12-29 20:42:35,382 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 3
2017-12-29 20:42:35,382 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#164]
2017-12-29 20:42:35,382 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 4
2017-12-29 20:42:35,383 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#165]
2017-12-29 20:42:35,383 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 5
2017-12-29 20:42:35,383 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#166]
2017-12-29 20:42:35,383 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 6
2017-12-29 20:42:35,383 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#167]
2017-12-29 20:42:35,384 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 7
2017-12-29 20:42:35,384 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#168]
2017-12-29 20:42:35,384 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 8
2017-12-29 20:42:35,384 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#169]
2017-12-29 20:42:35,384 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 9
2017-12-29 20:42:35,385 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#170]
2017-12-29 20:42:35,385 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 10
2017-12-29 20:42:35,385 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#171]
2017-12-29 20:42:35,385 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 11
2017-12-29 20:42:35,385 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#172]
2017-12-29 20:42:35,386 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 12
2017-12-29 20:42:35,386 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#173]
2017-12-29 20:42:35,386 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 13
2017-12-29 20:42:35,386 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#174]
2017-12-29 20:42:35,387 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 14
2017-12-29 20:42:35,387 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#175]
2017-12-29 20:42:35,388 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 15
2017-12-29 20:42:35,388 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#176]
2017-12-29 20:42:35,388 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 16
2017-12-29 20:42:35,389 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#177]
2017-12-29 20:42:35,389 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 17
2017-12-29 20:42:35,389 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#178]
2017-12-29 20:42:35,390 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 18
2017-12-29 20:42:35,391 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#179]
2017-12-29 20:42:35,391 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 19
2017-12-29 20:42:35,391 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#180]
2017-12-29 20:42:35,391 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 20
2017-12-29 20:42:35,392 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#181]
2017-12-29 20:42:35,392 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 21
2017-12-29 20:42:35,392 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#182]
2017-12-29 20:42:35,392 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 22
2017-12-29 20:42:35,392 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#183]
2017-12-29 20:42:35,393 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 23
2017-12-29 20:42:35,393 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#184]
2017-12-29 20:42:35,394 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 24
2017-12-29 20:42:35,394 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#185]
2017-12-29 20:42:35,394 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 25
2017-12-29 20:42:35,394 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#186]
2017-12-29 20:42:35,395 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 26
2017-12-29 20:42:35,395 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#187]
2017-12-29 20:42:35,395 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 27
2017-12-29 20:42:35,395 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#188]
2017-12-29 20:42:35,396 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 28
2017-12-29 20:42:35,396 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#189]
2017-12-29 20:42:35,396 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 29
2017-12-29 20:42:35,396 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#190]
2017-12-29 20:42:35,397 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 30
2017-12-29 20:42:35,397 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#191]
2017-12-29 20:42:35,397 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 31
2017-12-29 20:42:35,397 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#192]
2017-12-29 20:42:35,397 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 32
2017-12-29 20:42:35,398 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#193]
2017-12-29 20:42:35,398 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 33
2017-12-29 20:42:35,398 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#194]
2017-12-29 20:42:35,398 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 34
2017-12-29 20:42:35,399 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#195]
2017-12-29 20:42:35,399 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 35
2017-12-29 20:42:35,399 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#196]
2017-12-29 20:42:35,399 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 36
2017-12-29 20:42:35,399 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#197]
2017-12-29 20:42:35,399 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 37
2017-12-29 20:42:35,399 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#198]
2017-12-29 20:42:35,400 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 38
2017-12-29 20:42:35,400 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#199]
2017-12-29 20:42:35,400 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 39
2017-12-29 20:42:35,400 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#200]
2017-12-29 20:42:35,401 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#161]
2017-12-29 20:42:35,403 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#161]
2017-12-29 20:42:35,403 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#162]
2017-12-29 20:42:35,403 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#162]
2017-12-29 20:42:35,403 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#163]
2017-12-29 20:42:35,403 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#163]
2017-12-29 20:42:35,403 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#164]
2017-12-29 20:42:35,403 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#164]
2017-12-29 20:42:35,403 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#165]
2017-12-29 20:42:35,404 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#165]
2017-12-29 20:42:35,404 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#166]
2017-12-29 20:42:35,404 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#166]
2017-12-29 20:42:35,404 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#167]
2017-12-29 20:42:35,404 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#167]
2017-12-29 20:42:35,404 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#168]
2017-12-29 20:42:35,404 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#168]
2017-12-29 20:42:35,404 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#169]
2017-12-29 20:42:35,404 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#169]
2017-12-29 20:42:35,404 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#170]
2017-12-29 20:42:35,405 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#170]
2017-12-29 20:42:35,405 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#171]
2017-12-29 20:42:35,405 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#171]
2017-12-29 20:42:35,405 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#172]
2017-12-29 20:42:35,405 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#172]
2017-12-29 20:42:35,405 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#173]
2017-12-29 20:42:35,405 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#173]
2017-12-29 20:42:35,405 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#174]
2017-12-29 20:42:35,405 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#174]
2017-12-29 20:42:35,405 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#175]
2017-12-29 20:42:35,405 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#175]
2017-12-29 20:42:35,405 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#176]
2017-12-29 20:42:35,406 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#176]
2017-12-29 20:42:35,406 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#177]
2017-12-29 20:42:35,406 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#177]
2017-12-29 20:42:35,406 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#178]
2017-12-29 20:42:35,406 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#178]
2017-12-29 20:42:35,406 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#179]
2017-12-29 20:42:35,406 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#179]
2017-12-29 20:42:35,406 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#180]
2017-12-29 20:42:35,406 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#180]
2017-12-29 20:42:35,406 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#181]
2017-12-29 20:42:35,407 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#181]
2017-12-29 20:42:35,407 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#182]
2017-12-29 20:42:35,407 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#182]
2017-12-29 20:42:35,407 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#183]
2017-12-29 20:42:35,407 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#183]
2017-12-29 20:42:35,407 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#184]
2017-12-29 20:42:35,407 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#184]
2017-12-29 20:42:35,407 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#185]
2017-12-29 20:42:35,407 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#185]
2017-12-29 20:42:35,408 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#186]
2017-12-29 20:42:35,408 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#186]
2017-12-29 20:42:35,408 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#187]
2017-12-29 20:42:35,408 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#187]
2017-12-29 20:42:35,408 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#188]
2017-12-29 20:42:35,408 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#188]
2017-12-29 20:42:35,408 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#189]
2017-12-29 20:42:35,408 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#189]
2017-12-29 20:42:35,408 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#190]
2017-12-29 20:42:35,408 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#190]
2017-12-29 20:42:35,409 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#191]
2017-12-29 20:42:35,409 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#191]
2017-12-29 20:42:35,409 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#192]
2017-12-29 20:42:35,409 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#192]
2017-12-29 20:42:35,409 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#193]
2017-12-29 20:42:35,409 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#193]
2017-12-29 20:42:35,409 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#194]
2017-12-29 20:42:35,409 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#194]
2017-12-29 20:42:35,409 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#195]
2017-12-29 20:42:35,409 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#195]
2017-12-29 20:42:35,409 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#196]
2017-12-29 20:42:35,409 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#196]
2017-12-29 20:42:35,409 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#197]
2017-12-29 20:42:35,410 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#197]
2017-12-29 20:42:35,410 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#198]
2017-12-29 20:42:35,410 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#198]
2017-12-29 20:42:35,410 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#199]
2017-12-29 20:42:35,410 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#199]
2017-12-29 20:42:35,410 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#200]
2017-12-29 20:42:35,410 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#200]
2017-12-29 20:42:35,413 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:42:35,414 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:42:35,416 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:42:35,418 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 40 objects
2017-12-29 20:42:35,418 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:42:35,419 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:42:35,419 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=8e24c1ad-f3f7-4c19-bb39-a732d6d6cbdd, id=171, isActive=true, frequency=987303}
2017-12-29 20:42:35,420 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=805f8d75-4bd2-4530-9469-adf2653d1055, id=172, isActive=true, frequency=497286}
2017-12-29 20:42:35,420 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=10e404da-01da-44c4-8166-6e198b705b7f, id=169, isActive=true, frequency=249769}
2017-12-29 20:42:35,420 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=470b2006-eb8d-4bff-b289-7c029653c7f4, id=170, isActive=true, frequency=543102}
2017-12-29 20:42:35,420 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=986fc0f6-d098-42a9-a09f-7102d19c4694, id=175, isActive=true, frequency=98969}
2017-12-29 20:42:35,420 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=04ed9ed6-8deb-40e3-bafa-eed0b08eb44a, id=176, isActive=true, frequency=186332}
2017-12-29 20:42:35,420 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=3641a72e-17fa-4e0c-9599-c6f558b2dd93, id=173, isActive=true, frequency=723817}
2017-12-29 20:42:35,420 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=a93c419c-04c1-43f2-bd5e-e442661a37a0, id=174, isActive=true, frequency=773035}
2017-12-29 20:42:35,420 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=4fccded6-4bf6-45a6-9f28-f086dca16d23, id=163, isActive=true, frequency=567985}
2017-12-29 20:42:35,420 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=c9c14ab1-4c32-4d5f-b51a-a73abcd5cb1c, id=164, isActive=true, frequency=35824}
2017-12-29 20:42:35,420 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=6eeb143a-9da8-4ed3-88f0-fc76d69ea9b2, id=161, isActive=true, frequency=52789}
2017-12-29 20:42:35,420 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=f3ef2e6c-add4-4e7d-99e1-a98bee607aed, id=162, isActive=true, frequency=32364}
2017-12-29 20:42:35,420 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=c49a9568-e97b-4e71-a2c4-4a0fb4638e56, id=167, isActive=true, frequency=861845}
2017-12-29 20:42:35,420 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=cbb763a2-dcb4-46ed-ad25-8d7561791c66, id=168, isActive=true, frequency=18233}
2017-12-29 20:42:35,420 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=fd5ab786-f886-4d39-aa29-1050b3b3b73a, id=165, isActive=true, frequency=927674}
2017-12-29 20:42:35,421 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=59e850c2-a228-4acc-be01-b0a62a5397d4, id=166, isActive=true, frequency=457618}
2017-12-29 20:42:35,421 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=043c1b1e-50ec-4f7a-a94f-569bcb68796a, id=187, isActive=true, frequency=981350}
2017-12-29 20:42:35,421 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=1ae2ee8e-4387-4601-b2fb-174395b26bd7, id=188, isActive=true, frequency=824887}
2017-12-29 20:42:35,421 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=ca65a776-43fd-46d5-9006-36cfdaf5edb9, id=185, isActive=true, frequency=752365}
2017-12-29 20:42:35,421 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=30c4b0b9-b081-4b70-b85b-08fc912fce18, id=186, isActive=true, frequency=68283}
2017-12-29 20:42:35,421 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=6969ba4f-e3d1-4509-a127-a3b6f8939db5, id=191, isActive=false, frequency=72349}
2017-12-29 20:42:35,421 +0100 [main] DEBUG (EntityPrinter.java:106) - More......
2017-12-29 20:42:35,423 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:42:35,424 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:42:35,427 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_, address0_.city as city2_0_, address0_.country as country3_0_, address0_.mailBox as mailBox4_0_, address0_.nr as nr5_0_, address0_.postalCode as postalCo6_0_, address0_.street as street7_0_ from address address0_ where address0_.id not in  (select person1_.addressId from Person person1_)
2017-12-29 20:42:35,444 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 0
2017-12-29 20:42:35,444 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Address#313]
2017-12-29 20:42:35,445 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 1
2017-12-29 20:42:35,445 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Address#314]
2017-12-29 20:42:35,446 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 2
2017-12-29 20:42:35,446 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Address#315]
2017-12-29 20:42:35,446 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 3
2017-12-29 20:42:35,446 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Address#316]
2017-12-29 20:42:35,447 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 4
2017-12-29 20:42:35,447 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Address#317]
2017-12-29 20:42:35,447 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 5
2017-12-29 20:42:35,447 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Address#318]
2017-12-29 20:42:35,448 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 6
2017-12-29 20:42:35,448 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Address#319]
2017-12-29 20:42:35,449 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 7
2017-12-29 20:42:35,449 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Address#320]
2017-12-29 20:42:35,450 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 8
2017-12-29 20:42:35,450 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Address#321]
2017-12-29 20:42:35,450 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 9
2017-12-29 20:42:35,451 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Address#322]
2017-12-29 20:42:35,451 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#313]
2017-12-29 20:42:35,451 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#313]
2017-12-29 20:42:35,452 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#314]
2017-12-29 20:42:35,452 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#314]
2017-12-29 20:42:35,452 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#315]
2017-12-29 20:42:35,452 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#315]
2017-12-29 20:42:35,453 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#316]
2017-12-29 20:42:35,453 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#316]
2017-12-29 20:42:35,453 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#317]
2017-12-29 20:42:35,453 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#317]
2017-12-29 20:42:35,453 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#318]
2017-12-29 20:42:35,454 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#318]
2017-12-29 20:42:35,454 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#319]
2017-12-29 20:42:35,454 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#319]
2017-12-29 20:42:35,454 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#320]
2017-12-29 20:42:35,454 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#320]
2017-12-29 20:42:35,455 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#321]
2017-12-29 20:42:35,455 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#321]
2017-12-29 20:42:35,455 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#322]
2017-12-29 20:42:35,455 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#322]
2017-12-29 20:42:35,456 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:42:38,834 +0100 [AWT-EventQueue-0] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:42:38,835 +0100 [AWT-EventQueue-0] DEBUG (QueryTranslatorImpl.java:282) - parse() - HQL: FROM model.entities.Person
2017-12-29 20:42:38,836 +0100 [AWT-EventQueue-0] DEBUG (ErrorCounter.java:95) - throwQueryException() : no errors
2017-12-29 20:42:38,836 +0100 [AWT-EventQueue-0] DEBUG (QueryTranslatorImpl.java:305) - --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'FROM'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[IDENT] Node: 'model'
                |  \-[IDENT] Node: 'entities'
                \-[IDENT] Node: 'Person'

2017-12-29 20:42:38,837 +0100 [AWT-EventQueue-0] DEBUG (HqlSqlBaseWalker.java:124) - select << begin [level=1, statement=select]
2017-12-29 20:42:38,837 +0100 [AWT-EventQueue-0] DEBUG (FromElement.java:147) - FromClause{level=1} : model.entities.Person (<no alias>) -> person0_
2017-12-29 20:42:38,837 +0100 [AWT-EventQueue-0] DEBUG (HqlSqlBaseWalker.java:128) - select : finishing up [level=1, statement=select]
2017-12-29 20:42:38,838 +0100 [AWT-EventQueue-0] DEBUG (HqlSqlWalker.java:747) - processQuery() :  ( SELECT ( FromClause{level=1} Person person0_ ) )
2017-12-29 20:42:38,838 +0100 [AWT-EventQueue-0] DEBUG (HqlSqlWalker.java:1023) - Derived SELECT clause created.
2017-12-29 20:42:38,838 +0100 [AWT-EventQueue-0] DEBUG (JoinProcessor.java:192) - Using FROM fragment [Person person0_]
2017-12-29 20:42:38,838 +0100 [AWT-EventQueue-0] DEBUG (HqlSqlBaseWalker.java:132) - select >> end [level=1, statement=select]
2017-12-29 20:42:38,839 +0100 [AWT-EventQueue-0] DEBUG (QueryTranslatorImpl.java:269) - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Person)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'person0_.id as id1_1_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Person,tableAlias=person0_,origin=null,columns={,className=model.entities.Person}}}
    |  \-[SQL_TOKEN] SqlFragment: 'person0_.addressId as addressI5_1_, person0_.endOfContract as endOfCon2_1_, person0_.firstname as firstnam3_1_, person0_.lastname as lastname4_1_, person0_.remoteId as remoteId6_1_'
    \-[FROM] FromClause: 'FROM' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[person0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'Person person0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Person,tableAlias=person0_,origin=null,columns={,className=model.entities.Person}}

2017-12-29 20:42:38,839 +0100 [AWT-EventQueue-0] DEBUG (ErrorCounter.java:95) - throwQueryException() : no errors
2017-12-29 20:42:38,839 +0100 [AWT-EventQueue-0] DEBUG (QueryTranslatorImpl.java:251) - HQL: FROM model.entities.Person
2017-12-29 20:42:38,839 +0100 [AWT-EventQueue-0] DEBUG (QueryTranslatorImpl.java:252) - SQL: select person0_.id as id1_1_, person0_.addressId as addressI5_1_, person0_.endOfContract as endOfCon2_1_, person0_.firstname as firstnam3_1_, person0_.lastname as lastname4_1_, person0_.remoteId as remoteId6_1_ from Person person0_
2017-12-29 20:42:38,839 +0100 [AWT-EventQueue-0] DEBUG (ErrorCounter.java:95) - throwQueryException() : no errors
2017-12-29 20:42:38,840 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select person0_.id as id1_1_, person0_.addressId as addressI5_1_, person0_.endOfContract as endOfCon2_1_, person0_.firstname as firstnam3_1_, person0_.lastname as lastname4_1_, person0_.remoteId as remoteId6_1_ from Person person0_
2017-12-29 20:42:38,841 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 0
2017-12-29 20:42:38,841 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#124]
2017-12-29 20:42:38,843 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 1
2017-12-29 20:42:38,843 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#125]
2017-12-29 20:42:38,843 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 2
2017-12-29 20:42:38,843 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#126]
2017-12-29 20:42:38,843 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 3
2017-12-29 20:42:38,843 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#127]
2017-12-29 20:42:38,844 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 4
2017-12-29 20:42:38,844 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#128]
2017-12-29 20:42:38,844 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 5
2017-12-29 20:42:38,844 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#129]
2017-12-29 20:42:38,844 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 6
2017-12-29 20:42:38,844 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#130]
2017-12-29 20:42:38,845 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 7
2017-12-29 20:42:38,845 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#131]
2017-12-29 20:42:38,845 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 8
2017-12-29 20:42:38,845 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#132]
2017-12-29 20:42:38,845 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 9
2017-12-29 20:42:38,845 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#133]
2017-12-29 20:42:38,846 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 10
2017-12-29 20:42:38,846 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#134]
2017-12-29 20:42:38,846 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 11
2017-12-29 20:42:38,846 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#135]
2017-12-29 20:42:38,846 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 12
2017-12-29 20:42:38,846 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#136]
2017-12-29 20:42:38,847 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 13
2017-12-29 20:42:38,847 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#137]
2017-12-29 20:42:38,847 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 14
2017-12-29 20:42:38,847 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#138]
2017-12-29 20:42:38,847 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 15
2017-12-29 20:42:38,848 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#139]
2017-12-29 20:42:38,848 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 16
2017-12-29 20:42:38,848 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#140]
2017-12-29 20:42:38,848 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 17
2017-12-29 20:42:38,848 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#141]
2017-12-29 20:42:38,848 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 18
2017-12-29 20:42:38,849 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#142]
2017-12-29 20:42:38,849 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 19
2017-12-29 20:42:38,849 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#143]
2017-12-29 20:42:38,849 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 20
2017-12-29 20:42:38,849 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#144]
2017-12-29 20:42:38,849 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 21
2017-12-29 20:42:38,849 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#145]
2017-12-29 20:42:38,850 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 22
2017-12-29 20:42:38,850 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#146]
2017-12-29 20:42:38,850 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 23
2017-12-29 20:42:38,850 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#147]
2017-12-29 20:42:38,850 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 24
2017-12-29 20:42:38,850 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#148]
2017-12-29 20:42:38,851 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 25
2017-12-29 20:42:38,851 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#149]
2017-12-29 20:42:38,851 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 26
2017-12-29 20:42:38,851 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#150]
2017-12-29 20:42:38,851 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 27
2017-12-29 20:42:38,851 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#151]
2017-12-29 20:42:38,852 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 28
2017-12-29 20:42:38,852 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#152]
2017-12-29 20:42:38,852 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 29
2017-12-29 20:42:38,852 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#153]
2017-12-29 20:42:38,852 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#124]
2017-12-29 20:42:38,854 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 20:42:38,856 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,857 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,857 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#283]
2017-12-29 20:42:38,858 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#283]
2017-12-29 20:42:38,858 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,858 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#283
2017-12-29 20:42:38,858 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 20:42:38,859 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,859 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,859 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#161]
2017-12-29 20:42:38,860 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#161]
2017-12-29 20:42:38,860 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,860 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#161
2017-12-29 20:42:38,860 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#124]
2017-12-29 20:42:38,860 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#125]
2017-12-29 20:42:38,860 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 20:42:38,861 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,861 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,861 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#284]
2017-12-29 20:42:38,862 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#284]
2017-12-29 20:42:38,862 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,862 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#284
2017-12-29 20:42:38,862 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 20:42:38,862 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,863 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,863 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#162]
2017-12-29 20:42:38,863 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#162]
2017-12-29 20:42:38,863 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,863 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#162
2017-12-29 20:42:38,863 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#125]
2017-12-29 20:42:38,863 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#126]
2017-12-29 20:42:38,863 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 20:42:38,864 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,864 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,864 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#285]
2017-12-29 20:42:38,864 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#285]
2017-12-29 20:42:38,865 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,865 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#285
2017-12-29 20:42:38,865 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 20:42:38,865 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,865 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,866 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#163]
2017-12-29 20:42:38,866 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#163]
2017-12-29 20:42:38,866 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,866 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#163
2017-12-29 20:42:38,866 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#126]
2017-12-29 20:42:38,866 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#127]
2017-12-29 20:42:38,866 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 20:42:38,867 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,867 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,867 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#286]
2017-12-29 20:42:38,867 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#286]
2017-12-29 20:42:38,868 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,868 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#286
2017-12-29 20:42:38,868 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 20:42:38,868 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,869 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,869 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#164]
2017-12-29 20:42:38,869 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#164]
2017-12-29 20:42:38,869 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,869 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#164
2017-12-29 20:42:38,869 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#127]
2017-12-29 20:42:38,869 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#128]
2017-12-29 20:42:38,869 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 20:42:38,870 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,871 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,871 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#287]
2017-12-29 20:42:38,871 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#287]
2017-12-29 20:42:38,871 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,871 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#287
2017-12-29 20:42:38,872 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 20:42:38,872 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,872 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,873 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#165]
2017-12-29 20:42:38,873 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#165]
2017-12-29 20:42:38,873 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,873 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#165
2017-12-29 20:42:38,873 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#128]
2017-12-29 20:42:38,873 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#129]
2017-12-29 20:42:38,873 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 20:42:38,874 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,875 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,875 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#288]
2017-12-29 20:42:38,875 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#288]
2017-12-29 20:42:38,875 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,875 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#288
2017-12-29 20:42:38,876 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 20:42:38,876 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,876 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,877 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#166]
2017-12-29 20:42:38,877 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#166]
2017-12-29 20:42:38,877 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,877 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#166
2017-12-29 20:42:38,877 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#129]
2017-12-29 20:42:38,877 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#130]
2017-12-29 20:42:38,877 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 20:42:38,878 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,878 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,879 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#289]
2017-12-29 20:42:38,879 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#289]
2017-12-29 20:42:38,879 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,879 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#289
2017-12-29 20:42:38,879 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 20:42:38,880 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,880 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,880 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#167]
2017-12-29 20:42:38,881 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#167]
2017-12-29 20:42:38,881 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,881 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#167
2017-12-29 20:42:38,881 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#130]
2017-12-29 20:42:38,881 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#131]
2017-12-29 20:42:38,881 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 20:42:38,882 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,882 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,882 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#290]
2017-12-29 20:42:38,882 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#290]
2017-12-29 20:42:38,882 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,883 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#290
2017-12-29 20:42:38,883 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 20:42:38,883 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,883 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,884 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#168]
2017-12-29 20:42:38,884 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#168]
2017-12-29 20:42:38,884 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,884 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#168
2017-12-29 20:42:38,884 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#131]
2017-12-29 20:42:38,884 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#132]
2017-12-29 20:42:38,885 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 20:42:38,885 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,885 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,886 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#291]
2017-12-29 20:42:38,886 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#291]
2017-12-29 20:42:38,886 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,886 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#291
2017-12-29 20:42:38,886 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 20:42:38,887 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,887 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,887 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#169]
2017-12-29 20:42:38,887 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#169]
2017-12-29 20:42:38,888 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,888 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#169
2017-12-29 20:42:38,888 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#132]
2017-12-29 20:42:38,888 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#133]
2017-12-29 20:42:38,888 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 20:42:38,889 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,889 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,889 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#292]
2017-12-29 20:42:38,889 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#292]
2017-12-29 20:42:38,890 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,890 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#292
2017-12-29 20:42:38,890 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 20:42:38,890 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,891 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,891 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#170]
2017-12-29 20:42:38,891 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#170]
2017-12-29 20:42:38,891 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,891 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#170
2017-12-29 20:42:38,891 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#133]
2017-12-29 20:42:38,892 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#134]
2017-12-29 20:42:38,892 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 20:42:38,892 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,892 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,893 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#293]
2017-12-29 20:42:38,893 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#293]
2017-12-29 20:42:38,893 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,893 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#293
2017-12-29 20:42:38,893 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 20:42:38,894 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,894 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,894 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#171]
2017-12-29 20:42:38,894 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#171]
2017-12-29 20:42:38,894 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,895 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#171
2017-12-29 20:42:38,895 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#134]
2017-12-29 20:42:38,895 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#135]
2017-12-29 20:42:38,895 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 20:42:38,896 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,896 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,896 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#294]
2017-12-29 20:42:38,896 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#294]
2017-12-29 20:42:38,896 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,897 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#294
2017-12-29 20:42:38,897 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 20:42:38,897 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,898 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,898 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#172]
2017-12-29 20:42:38,898 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#172]
2017-12-29 20:42:38,898 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,898 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#172
2017-12-29 20:42:38,898 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#135]
2017-12-29 20:42:38,899 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#136]
2017-12-29 20:42:38,899 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 20:42:38,899 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,899 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,900 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#295]
2017-12-29 20:42:38,900 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#295]
2017-12-29 20:42:38,900 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,900 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#295
2017-12-29 20:42:38,900 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 20:42:38,901 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,901 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,901 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#173]
2017-12-29 20:42:38,901 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#173]
2017-12-29 20:42:38,901 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,901 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#173
2017-12-29 20:42:38,901 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#136]
2017-12-29 20:42:38,902 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#137]
2017-12-29 20:42:38,902 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 20:42:38,902 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,902 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,903 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#296]
2017-12-29 20:42:38,903 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#296]
2017-12-29 20:42:38,903 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,903 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#296
2017-12-29 20:42:38,903 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 20:42:38,904 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,904 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,904 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#174]
2017-12-29 20:42:38,905 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#174]
2017-12-29 20:42:38,905 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,905 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#174
2017-12-29 20:42:38,905 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#137]
2017-12-29 20:42:38,905 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#138]
2017-12-29 20:42:38,905 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 20:42:38,906 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,906 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,907 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#297]
2017-12-29 20:42:38,907 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#297]
2017-12-29 20:42:38,907 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,907 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#297
2017-12-29 20:42:38,907 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 20:42:38,908 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,908 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,909 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#175]
2017-12-29 20:42:38,909 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#175]
2017-12-29 20:42:38,909 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,909 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#175
2017-12-29 20:42:38,909 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#138]
2017-12-29 20:42:38,910 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#139]
2017-12-29 20:42:38,910 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 20:42:38,910 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,911 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,911 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#298]
2017-12-29 20:42:38,911 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#298]
2017-12-29 20:42:38,911 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,911 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#298
2017-12-29 20:42:38,911 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 20:42:38,912 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,912 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,913 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#176]
2017-12-29 20:42:38,913 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#176]
2017-12-29 20:42:38,913 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,913 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#176
2017-12-29 20:42:38,913 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#139]
2017-12-29 20:42:38,913 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#140]
2017-12-29 20:42:38,913 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 20:42:38,914 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,914 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,914 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#299]
2017-12-29 20:42:38,915 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#299]
2017-12-29 20:42:38,915 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,915 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#299
2017-12-29 20:42:38,915 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 20:42:38,916 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,916 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,916 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#177]
2017-12-29 20:42:38,916 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#177]
2017-12-29 20:42:38,916 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,917 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#177
2017-12-29 20:42:38,917 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#140]
2017-12-29 20:42:38,917 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#141]
2017-12-29 20:42:38,917 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 20:42:38,918 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,918 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,918 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#300]
2017-12-29 20:42:38,918 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#300]
2017-12-29 20:42:38,918 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,919 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#300
2017-12-29 20:42:38,919 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 20:42:38,919 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,920 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,920 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#178]
2017-12-29 20:42:38,920 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#178]
2017-12-29 20:42:38,920 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,920 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#178
2017-12-29 20:42:38,920 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#141]
2017-12-29 20:42:38,920 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#142]
2017-12-29 20:42:38,921 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 20:42:38,921 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,921 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,922 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#301]
2017-12-29 20:42:38,922 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#301]
2017-12-29 20:42:38,922 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,922 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#301
2017-12-29 20:42:38,923 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 20:42:38,923 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,923 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,924 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#179]
2017-12-29 20:42:38,924 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#179]
2017-12-29 20:42:38,924 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,924 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#179
2017-12-29 20:42:38,924 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#142]
2017-12-29 20:42:38,925 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#143]
2017-12-29 20:42:38,925 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 20:42:38,926 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,926 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,926 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#302]
2017-12-29 20:42:38,927 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#302]
2017-12-29 20:42:38,927 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,927 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#302
2017-12-29 20:42:38,927 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 20:42:38,928 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,928 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,929 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#180]
2017-12-29 20:42:38,929 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#180]
2017-12-29 20:42:38,929 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,929 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#180
2017-12-29 20:42:38,930 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#143]
2017-12-29 20:42:38,930 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#144]
2017-12-29 20:42:38,930 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 20:42:38,931 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,931 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,931 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#303]
2017-12-29 20:42:38,931 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#303]
2017-12-29 20:42:38,931 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,931 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#303
2017-12-29 20:42:38,932 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 20:42:38,932 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,932 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,933 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#181]
2017-12-29 20:42:38,933 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#181]
2017-12-29 20:42:38,933 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,933 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#181
2017-12-29 20:42:38,933 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#144]
2017-12-29 20:42:38,933 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#145]
2017-12-29 20:42:38,934 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 20:42:38,934 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,934 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,935 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#304]
2017-12-29 20:42:38,935 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#304]
2017-12-29 20:42:38,935 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,935 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#304
2017-12-29 20:42:38,936 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 20:42:38,937 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,937 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,938 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#182]
2017-12-29 20:42:38,938 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#182]
2017-12-29 20:42:38,938 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,939 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#182
2017-12-29 20:42:38,939 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#145]
2017-12-29 20:42:38,939 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#146]
2017-12-29 20:42:38,939 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 20:42:38,940 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,941 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,941 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#305]
2017-12-29 20:42:38,941 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#305]
2017-12-29 20:42:38,942 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,942 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#305
2017-12-29 20:42:38,942 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 20:42:38,943 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,943 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,943 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#183]
2017-12-29 20:42:38,944 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#183]
2017-12-29 20:42:38,944 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,944 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#183
2017-12-29 20:42:38,944 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#146]
2017-12-29 20:42:38,944 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#147]
2017-12-29 20:42:38,945 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 20:42:38,945 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,946 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,946 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#306]
2017-12-29 20:42:38,946 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#306]
2017-12-29 20:42:38,947 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,947 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#306
2017-12-29 20:42:38,947 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 20:42:38,948 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,949 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,949 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#184]
2017-12-29 20:42:38,949 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#184]
2017-12-29 20:42:38,950 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,950 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#184
2017-12-29 20:42:38,950 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#147]
2017-12-29 20:42:38,950 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#148]
2017-12-29 20:42:38,950 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 20:42:38,951 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,952 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,952 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#307]
2017-12-29 20:42:38,952 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#307]
2017-12-29 20:42:38,952 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,953 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#307
2017-12-29 20:42:38,953 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 20:42:38,954 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,954 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,954 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#185]
2017-12-29 20:42:38,954 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#185]
2017-12-29 20:42:38,955 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,955 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#185
2017-12-29 20:42:38,955 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#148]
2017-12-29 20:42:38,955 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#149]
2017-12-29 20:42:38,955 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 20:42:38,956 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,956 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,957 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#308]
2017-12-29 20:42:38,957 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#308]
2017-12-29 20:42:38,957 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,957 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#308
2017-12-29 20:42:38,957 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 20:42:38,958 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,958 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,958 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#186]
2017-12-29 20:42:38,958 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#186]
2017-12-29 20:42:38,958 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,959 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#186
2017-12-29 20:42:38,959 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#149]
2017-12-29 20:42:38,959 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#150]
2017-12-29 20:42:38,959 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 20:42:38,960 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,960 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,960 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#309]
2017-12-29 20:42:38,960 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#309]
2017-12-29 20:42:38,960 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,960 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#309
2017-12-29 20:42:38,960 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 20:42:38,961 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,961 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,961 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#187]
2017-12-29 20:42:38,962 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#187]
2017-12-29 20:42:38,962 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,962 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#187
2017-12-29 20:42:38,962 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#150]
2017-12-29 20:42:38,962 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#151]
2017-12-29 20:42:38,962 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 20:42:38,963 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,963 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,963 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#310]
2017-12-29 20:42:38,963 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#310]
2017-12-29 20:42:38,963 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,963 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#310
2017-12-29 20:42:38,964 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 20:42:38,964 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,964 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,965 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#188]
2017-12-29 20:42:38,965 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#188]
2017-12-29 20:42:38,965 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,965 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#188
2017-12-29 20:42:38,965 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#151]
2017-12-29 20:42:38,965 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#152]
2017-12-29 20:42:38,965 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 20:42:38,966 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,966 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,966 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#311]
2017-12-29 20:42:38,967 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#311]
2017-12-29 20:42:38,967 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,967 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#311
2017-12-29 20:42:38,967 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 20:42:38,968 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,968 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,968 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#189]
2017-12-29 20:42:38,968 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#189]
2017-12-29 20:42:38,968 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,968 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#189
2017-12-29 20:42:38,969 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#152]
2017-12-29 20:42:38,969 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#153]
2017-12-29 20:42:38,969 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 20:42:38,969 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,969 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,970 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#312]
2017-12-29 20:42:38,970 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#312]
2017-12-29 20:42:38,970 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,970 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#312
2017-12-29 20:42:38,970 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 20:42:38,971 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 20:42:38,971 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 20:42:38,972 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#190]
2017-12-29 20:42:38,972 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#190]
2017-12-29 20:42:38,972 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:42:38,972 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#190
2017-12-29 20:42:38,972 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#153]
2017-12-29 20:42:38,973 +0100 [AWT-EventQueue-0] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:42:38,973 +0100 [AWT-EventQueue-0] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:42:38,976 +0100 [AWT-EventQueue-0] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:42:38,979 +0100 [AWT-EventQueue-0] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 90 objects
2017-12-29 20:42:38,979 +0100 [AWT-EventQueue-0] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:42:38,979 +0100 [AWT-EventQueue-0] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:42:38,979 +0100 [AWT-EventQueue-0] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=23, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=305}
2017-12-29 20:42:38,979 +0100 [AWT-EventQueue-0] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=24, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=306}
2017-12-29 20:42:38,979 +0100 [AWT-EventQueue-0] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=21, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=303}
2017-12-29 20:42:38,980 +0100 [AWT-EventQueue-0] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=22, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=304}
2017-12-29 20:42:38,980 +0100 [AWT-EventQueue-0] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=19, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=301}
2017-12-29 20:42:38,980 +0100 [AWT-EventQueue-0] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=20, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=302}
2017-12-29 20:42:38,980 +0100 [AWT-EventQueue-0] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=17, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=299}
2017-12-29 20:42:38,980 +0100 [AWT-EventQueue-0] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=18, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=300}
2017-12-29 20:42:38,980 +0100 [AWT-EventQueue-0] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=29, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=311}
2017-12-29 20:42:38,980 +0100 [AWT-EventQueue-0] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=30, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=312}
2017-12-29 20:42:38,980 +0100 [AWT-EventQueue-0] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=27, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=309}
2017-12-29 20:42:38,980 +0100 [AWT-EventQueue-0] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=28, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=310}
2017-12-29 20:42:38,981 +0100 [AWT-EventQueue-0] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=25, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=307}
2017-12-29 20:42:38,981 +0100 [AWT-EventQueue-0] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=26, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=308}
2017-12-29 20:42:38,981 +0100 [AWT-EventQueue-0] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=7, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=289}
2017-12-29 20:42:38,981 +0100 [AWT-EventQueue-0] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=8, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=290}
2017-12-29 20:42:38,981 +0100 [AWT-EventQueue-0] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=5, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=287}
2017-12-29 20:42:38,981 +0100 [AWT-EventQueue-0] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=6, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=288}
2017-12-29 20:42:38,981 +0100 [AWT-EventQueue-0] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=3, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=285}
2017-12-29 20:42:38,981 +0100 [AWT-EventQueue-0] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=4, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=286}
2017-12-29 20:42:38,981 +0100 [AWT-EventQueue-0] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=1, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=283}
2017-12-29 20:42:38,981 +0100 [AWT-EventQueue-0] DEBUG (EntityPrinter.java:106) - More......
2017-12-29 20:42:38,982 +0100 [AWT-EventQueue-0] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:42:38,982 +0100 [AWT-EventQueue-0] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:54:04,442 +0100 [main] DEBUG (HibernatePersistenceProvider.java:38) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2017-12-29 20:54:04,521 +0100 [main] DEBUG (HibernatePersistenceProvider.java:98) - Located and parsed 1 persistence units; checking each
2017-12-29 20:54:04,523 +0100 [main] DEBUG (HibernatePersistenceProvider.java:106) - Checking persistence-unit [name=Afstandsbediening, explicit-provider=null] against incoming persistence unit name [Person]
2017-12-29 20:54:04,523 +0100 [main] DEBUG (HibernatePersistenceProvider.java:115) - Excluding from consideration due to name mis-match
2017-12-29 20:54:04,523 +0100 [main] DEBUG (HibernatePersistenceProvider.java:133) - Found no matching persistence units
2017-12-29 20:55:57,594 +0100 [main] DEBUG (HibernatePersistenceProvider.java:38) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2017-12-29 20:55:57,674 +0100 [main] DEBUG (HibernatePersistenceProvider.java:98) - Located and parsed 1 persistence units; checking each
2017-12-29 20:55:57,676 +0100 [main] DEBUG (HibernatePersistenceProvider.java:106) - Checking persistence-unit [name=Afstandsbediening, explicit-provider=null] against incoming persistence unit name [Afstandsbediening]
2017-12-29 20:55:57,676 +0100 [main] DEBUG (ProviderChecker.java:96) - No PersistenceProvider explicitly requested, assuming Hibernate
2017-12-29 20:55:57,681 +0100 [main] DEBUG (LogHelper.java:102) - PersistenceUnitInfo [
	name: Afstandsbediening
	persistence provider classname: null
	classloader: null
	excludeUnlistedClasses: false
	JTA datasource: null
	Non JTA datasource: null
	Transaction type: RESOURCE_LOCAL
	PU root URL: file:/C:/Users/BenJolien/git/2018-Januari/8-Afstandsbediening/target/classes/
	Shared Cache Mode: null
	Validation Mode: null
	Jar files URLs []
	Managed classes names [
		model.entities.Remote
		model.entities.Person
		model.entities.Address]
	Mapping files names []
	Properties [
		javax.persistence.jdbc.driver: com.mysql.jdbc.Driver
		javax.persistence.jdbc.password: userDB
		javax.persistence.jdbc.url: jdbc:mysql://localhost:3306/DbRemote
		javax.persistence.jdbc.user: userDB]
2017-12-29 20:55:57,687 +0100 [main] DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
2017-12-29 20:55:57,689 +0100 [main] DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
2017-12-29 20:55:57,693 +0100 [main] DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2017-12-29 20:55:57,693 +0100 [main] DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.jpa.event.spi.JpaIntegrator].
2017-12-29 20:55:57,783 +0100 [main] INFO  (Version.java:45) - HHH000412: Hibernate Core {5.2.12.Final}
2017-12-29 20:55:57,784 +0100 [main] INFO  (Environment.java:213) - HHH000206: hibernate.properties not found
2017-12-29 20:55:57,791 +0100 [main] DEBUG (ServiceBinding.java:68) - Overriding existing service binding [org.hibernate.secure.spi.JaccService]
2017-12-29 20:55:57,808 +0100 [main] DEBUG (RegionFactoryInitiator.java:75) - Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
2017-12-29 20:55:57,813 +0100 [main] INFO  (JavaReflectionManager.java:66) - HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
2017-12-29 20:55:57,863 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration boolean -> org.hibernate.type.BooleanType@101df177
2017-12-29 20:55:57,863 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration boolean -> org.hibernate.type.BooleanType@101df177
2017-12-29 20:55:57,865 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@101df177
2017-12-29 20:55:57,865 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@6e2c9341
2017-12-29 20:55:57,866 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration true_false -> org.hibernate.type.TrueFalseType@517cd4b
2017-12-29 20:55:57,867 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration yes_no -> org.hibernate.type.YesNoType@679b62af
2017-12-29 20:55:57,867 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration byte -> org.hibernate.type.ByteType@12028586
2017-12-29 20:55:57,867 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration byte -> org.hibernate.type.ByteType@12028586
2017-12-29 20:55:57,868 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@12028586
2017-12-29 20:55:57,868 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration character -> org.hibernate.type.CharacterType@11c20519
2017-12-29 20:55:57,869 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration char -> org.hibernate.type.CharacterType@11c20519
2017-12-29 20:55:57,869 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@11c20519
2017-12-29 20:55:57,870 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration short -> org.hibernate.type.ShortType@4148db48
2017-12-29 20:55:57,870 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration short -> org.hibernate.type.ShortType@4148db48
2017-12-29 20:55:57,870 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Short -> org.hibernate.type.ShortType@4148db48
2017-12-29 20:55:57,871 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration integer -> org.hibernate.type.IntegerType@5e25a92e
2017-12-29 20:55:57,871 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration int -> org.hibernate.type.IntegerType@5e25a92e
2017-12-29 20:55:57,871 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@5e25a92e
2017-12-29 20:55:57,872 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration long -> org.hibernate.type.LongType@3e77a1ed
2017-12-29 20:55:57,872 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration long -> org.hibernate.type.LongType@3e77a1ed
2017-12-29 20:55:57,872 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Long -> org.hibernate.type.LongType@3e77a1ed
2017-12-29 20:55:57,874 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration float -> org.hibernate.type.FloatType@37574691
2017-12-29 20:55:57,874 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration float -> org.hibernate.type.FloatType@37574691
2017-12-29 20:55:57,874 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Float -> org.hibernate.type.FloatType@37574691
2017-12-29 20:55:57,875 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration double -> org.hibernate.type.DoubleType@6c3f5566
2017-12-29 20:55:57,876 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration double -> org.hibernate.type.DoubleType@6c3f5566
2017-12-29 20:55:57,876 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@6c3f5566
2017-12-29 20:55:57,878 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@6166e06f
2017-12-29 20:55:57,878 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@6166e06f
2017-12-29 20:55:57,880 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration big_integer -> org.hibernate.type.BigIntegerType@641147d0
2017-12-29 20:55:57,880 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@641147d0
2017-12-29 20:55:57,881 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration string -> org.hibernate.type.StringType@6385cb26
2017-12-29 20:55:57,881 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.String -> org.hibernate.type.StringType@6385cb26
2017-12-29 20:55:57,882 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration nstring -> org.hibernate.type.StringNVarcharType@1e9e725a
2017-12-29 20:55:57,883 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@646be2c3
2017-12-29 20:55:57,885 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration url -> org.hibernate.type.UrlType@62bd765
2017-12-29 20:55:57,885 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.net.URL -> org.hibernate.type.UrlType@62bd765
2017-12-29 20:55:57,886 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration Duration -> org.hibernate.type.DurationType@58fdd99
2017-12-29 20:55:57,887 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.Duration -> org.hibernate.type.DurationType@58fdd99
2017-12-29 20:55:57,900 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration Instant -> org.hibernate.type.InstantType@226a82c4
2017-12-29 20:55:57,900 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.Instant -> org.hibernate.type.InstantType@226a82c4
2017-12-29 20:55:57,901 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@64d2d351
2017-12-29 20:55:57,901 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@64d2d351
2017-12-29 20:55:57,902 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration LocalDate -> org.hibernate.type.LocalDateType@51931956
2017-12-29 20:55:57,902 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@51931956
2017-12-29 20:55:57,903 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@6279cee3
2017-12-29 20:55:57,904 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@6279cee3
2017-12-29 20:55:57,905 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@c540f5a
2017-12-29 20:55:57,905 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@c540f5a
2017-12-29 20:55:57,906 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@77e9807f
2017-12-29 20:55:57,906 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@77e9807f
2017-12-29 20:55:57,910 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@36f0f1be
2017-12-29 20:55:57,910 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@36f0f1be
2017-12-29 20:55:57,911 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration date -> org.hibernate.type.DateType@525f1e4e
2017-12-29 20:55:57,911 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.sql.Date -> org.hibernate.type.DateType@525f1e4e
2017-12-29 20:55:57,912 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration time -> org.hibernate.type.TimeType@5d47c63f
2017-12-29 20:55:57,912 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.sql.Time -> org.hibernate.type.TimeType@5d47c63f
2017-12-29 20:55:57,912 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration timestamp -> org.hibernate.type.TimestampType@568bf312
2017-12-29 20:55:57,912 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@568bf312
2017-12-29 20:55:57,913 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.Date -> org.hibernate.type.TimestampType@568bf312
2017-12-29 20:55:57,914 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@45f45fa1
2017-12-29 20:55:57,914 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration calendar -> org.hibernate.type.CalendarType@8e0379d
2017-12-29 20:55:57,914 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@8e0379d
2017-12-29 20:55:57,914 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@8e0379d
2017-12-29 20:55:57,915 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@2145433b
2017-12-29 20:55:57,916 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration locale -> org.hibernate.type.LocaleType@3ec300f1
2017-12-29 20:55:57,916 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@3ec300f1
2017-12-29 20:55:57,917 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration currency -> org.hibernate.type.CurrencyType@75c072cb
2017-12-29 20:55:57,917 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@75c072cb
2017-12-29 20:55:57,918 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration timezone -> org.hibernate.type.TimeZoneType@214b199c
2017-12-29 20:55:57,918 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@214b199c
2017-12-29 20:55:57,920 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration class -> org.hibernate.type.ClassType@12d3a4e9
2017-12-29 20:55:57,920 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Class -> org.hibernate.type.ClassType@12d3a4e9
2017-12-29 20:55:57,921 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@5762806e
2017-12-29 20:55:57,921 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@5762806e
2017-12-29 20:55:57,921 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@5ef60048
2017-12-29 20:55:57,922 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration binary -> org.hibernate.type.BinaryType@50a7bc6e
2017-12-29 20:55:57,922 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration byte[] -> org.hibernate.type.BinaryType@50a7bc6e
2017-12-29 20:55:57,923 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration [B -> org.hibernate.type.BinaryType@50a7bc6e
2017-12-29 20:55:57,923 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@e50a6f6
2017-12-29 20:55:57,923 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@e50a6f6
2017-12-29 20:55:57,924 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@e50a6f6
2017-12-29 20:55:57,924 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration row_version -> org.hibernate.type.RowVersionType@48524010
2017-12-29 20:55:57,925 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration image -> org.hibernate.type.ImageType@6b419da
2017-12-29 20:55:57,925 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration characters -> org.hibernate.type.CharArrayType@55a561cf
2017-12-29 20:55:57,926 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration char[] -> org.hibernate.type.CharArrayType@55a561cf
2017-12-29 20:55:57,926 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration [C -> org.hibernate.type.CharArrayType@55a561cf
2017-12-29 20:55:57,927 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@21507a04
2017-12-29 20:55:57,927 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@21507a04
2017-12-29 20:55:57,927 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@21507a04
2017-12-29 20:55:57,927 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration text -> org.hibernate.type.TextType@436a4e4b
2017-12-29 20:55:57,928 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration ntext -> org.hibernate.type.NTextType@5c1a8622
2017-12-29 20:55:57,931 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration blob -> org.hibernate.type.BlobType@69930714
2017-12-29 20:55:57,931 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@69930714
2017-12-29 20:55:57,931 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@8909f18
2017-12-29 20:55:57,933 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration clob -> org.hibernate.type.ClobType@79ad8b2f
2017-12-29 20:55:57,933 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@79ad8b2f
2017-12-29 20:55:57,934 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration nclob -> org.hibernate.type.NClobType@7692d9cc
2017-12-29 20:55:57,935 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@7692d9cc
2017-12-29 20:55:57,935 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@43ee72e6
2017-12-29 20:55:57,935 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@2805c96b
2017-12-29 20:55:57,936 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration serializable -> org.hibernate.type.SerializableType@37918c79
2017-12-29 20:55:57,938 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration object -> org.hibernate.type.ObjectType@4c1d9d4b
2017-12-29 20:55:57,938 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@4c1d9d4b
2017-12-29 20:55:57,938 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@45018215
2017-12-29 20:55:57,939 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@65d6b83b
2017-12-29 20:55:57,939 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@d706f19
2017-12-29 20:55:57,939 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@30b7c004
2017-12-29 20:55:57,939 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@79efed2d
2017-12-29 20:55:57,939 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@2928854b
2017-12-29 20:55:57,939 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@27ae2fd0
2017-12-29 20:55:57,939 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@29176cc1
2017-12-29 20:55:57,945 +0100 [main] WARN  (DriverManagerConnectionProviderImpl.java:70) - HHH10001002: Using Hibernate built-in connection pool (not for production use!)
2017-12-29 20:55:57,953 +0100 [main] INFO  (DriverManagerConnectionProviderImpl.java:126) - HHH10001005: using driver [com.mysql.jdbc.Driver] at URL [jdbc:mysql://localhost:3306/DbRemote]
2017-12-29 20:55:57,954 +0100 [main] INFO  (DriverManagerConnectionProviderImpl.java:132) - HHH10001001: Connection properties: {user=userDB, password=userDB}
2017-12-29 20:55:57,954 +0100 [main] INFO  (DriverManagerConnectionProviderImpl.java:140) - HHH10001003: Autocommit mode: false
2017-12-29 20:55:57,956 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Initializing Connection pool with 1 Connections
2017-12-29 20:55:57,956 +0100 [main] INFO  (PooledConnections.java:41) - HHH000115: Hibernate connection pool size: 20 (min=1)
2017-12-29 20:55:58,166 +0100 [main] DEBUG (JdbcEnvironmentInitiator.java:72) - Database ->
       name : MySQL
    version : 5.7.20-log
      major : 5
      minor : 7
2017-12-29 20:55:58,167 +0100 [main] DEBUG (JdbcEnvironmentInitiator.java:83) - Driver ->
       name : MySQL Connector Java
    version : mysql-connector-java-5.1.45 ( Revision: 9131eefa398531c7dc98776e8a3fe839e544c5b2 )
      major : 5
      minor : 1
2017-12-29 20:55:58,167 +0100 [main] DEBUG (DelegatingBasicLogger.java:389) - JDBC version : 4.0
2017-12-29 20:55:58,173 +0100 [main] INFO  (Dialect.java:157) - HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2017-12-29 20:55:58,198 +0100 [main] DEBUG (IdentifierHelperBuilder.java:117) - JDBC driver metadata reported database stores quoted identifiers in more than one case
2017-12-29 20:55:58,200 +0100 [main] DEBUG (IdentifierHelperBuilder.java:191) - IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
2017-12-29 20:55:58,308 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2017-12-29 20:55:58,308 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2017-12-29 20:55:58,309 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2017-12-29 20:55:58,309 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2017-12-29 20:55:58,310 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2017-12-29 20:55:58,310 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2017-12-29 20:55:58,311 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2017-12-29 20:55:58,312 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2017-12-29 20:55:58,313 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
2017-12-29 20:55:58,313 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2017-12-29 20:55:58,314 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2017-12-29 20:55:58,314 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
2017-12-29 20:55:58,314 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2017-12-29 20:55:58,315 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2017-12-29 20:55:58,337 +0100 [main] DEBUG (Namespace.java:47) - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2017-12-29 20:55:58,363 +0100 [main] DEBUG (AnnotationBinder.java:511) - Binding entity from annotated class: model.entities.Address
2017-12-29 20:55:58,375 +0100 [main] DEBUG (QueryBinder.java:80) - Binding named query: findUnusedAddress => SELECT a FROM Address a WHERE a.id NOT IN (SELECT p.address.id FROM Person p)
2017-12-29 20:55:58,380 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2017-12-29 20:55:58,383 +0100 [main] DEBUG (EntityBinder.java:419) - Import with entity name Address
2017-12-29 20:55:58,384 +0100 [main] DEBUG (EntityBinder.java:695) - Bind entity model.entities.Address on table address
2017-12-29 20:55:58,397 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=id, insertable=true, updatable=true, unique=false}
2017-12-29 20:55:58,400 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property id with lazy=false
2017-12-29 20:55:58,402 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:id]
2017-12-29 20:55:58,403 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for id
2017-12-29 20:55:58,404 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property id
2017-12-29 20:55:58,410 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=city, insertable=true, updatable=true, unique=false}
2017-12-29 20:55:58,411 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property city with lazy=false
2017-12-29 20:55:58,412 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:city]
2017-12-29 20:55:58,412 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for city
2017-12-29 20:55:58,413 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property city
2017-12-29 20:55:58,413 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=country, insertable=true, updatable=true, unique=false}
2017-12-29 20:55:58,413 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property country with lazy=false
2017-12-29 20:55:58,414 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:country]
2017-12-29 20:55:58,414 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for country
2017-12-29 20:55:58,414 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property country
2017-12-29 20:55:58,414 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=mailBox, insertable=true, updatable=true, unique=false}
2017-12-29 20:55:58,414 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property mailBox with lazy=false
2017-12-29 20:55:58,415 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:mailBox]
2017-12-29 20:55:58,415 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for mailBox
2017-12-29 20:55:58,415 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property mailBox
2017-12-29 20:55:58,415 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=nr, insertable=true, updatable=true, unique=false}
2017-12-29 20:55:58,415 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property nr with lazy=false
2017-12-29 20:55:58,416 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:nr]
2017-12-29 20:55:58,416 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for nr
2017-12-29 20:55:58,416 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property nr
2017-12-29 20:55:58,416 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=postalCode, insertable=true, updatable=true, unique=false}
2017-12-29 20:55:58,416 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property postalCode with lazy=false
2017-12-29 20:55:58,417 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:postalCode]
2017-12-29 20:55:58,417 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for postalCode
2017-12-29 20:55:58,417 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property postalCode
2017-12-29 20:55:58,418 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=street, insertable=true, updatable=true, unique=false}
2017-12-29 20:55:58,418 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property street with lazy=false
2017-12-29 20:55:58,419 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:street]
2017-12-29 20:55:58,419 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for street
2017-12-29 20:55:58,419 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property street
2017-12-29 20:55:58,420 +0100 [main] DEBUG (AnnotationBinder.java:511) - Binding entity from annotated class: model.entities.Remote
2017-12-29 20:55:58,420 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2017-12-29 20:55:58,420 +0100 [main] DEBUG (EntityBinder.java:419) - Import with entity name Remote
2017-12-29 20:55:58,421 +0100 [main] DEBUG (EntityBinder.java:695) - Bind entity model.entities.Remote on table Remote
2017-12-29 20:55:58,421 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Remote), mappingColumn=id, insertable=true, updatable=true, unique=false}
2017-12-29 20:55:58,422 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property id with lazy=false
2017-12-29 20:55:58,422 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Remote:id]
2017-12-29 20:55:58,422 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for id
2017-12-29 20:55:58,422 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property id
2017-12-29 20:55:58,422 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Remote), mappingColumn=frequency, insertable=true, updatable=true, unique=false}
2017-12-29 20:55:58,422 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property frequency with lazy=false
2017-12-29 20:55:58,422 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Remote:frequency]
2017-12-29 20:55:58,423 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for frequency
2017-12-29 20:55:58,423 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property frequency
2017-12-29 20:55:58,423 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Remote), mappingColumn=isActive, insertable=true, updatable=true, unique=false}
2017-12-29 20:55:58,423 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property isActive with lazy=false
2017-12-29 20:55:58,423 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Remote:isActive]
2017-12-29 20:55:58,423 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for isActive
2017-12-29 20:55:58,423 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property isActive
2017-12-29 20:55:58,423 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Remote), mappingColumn=serialNumber, insertable=true, updatable=true, unique=false}
2017-12-29 20:55:58,423 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property serialNumber with lazy=false
2017-12-29 20:55:58,423 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Remote:serialNumber]
2017-12-29 20:55:58,423 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for serialNumber
2017-12-29 20:55:58,424 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property serialNumber
2017-12-29 20:55:58,424 +0100 [main] DEBUG (AnnotationBinder.java:511) - Binding entity from annotated class: model.entities.Person
2017-12-29 20:55:58,424 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2017-12-29 20:55:58,424 +0100 [main] DEBUG (EntityBinder.java:419) - Import with entity name Person
2017-12-29 20:55:58,424 +0100 [main] DEBUG (EntityBinder.java:695) - Bind entity model.entities.Person on table Person
2017-12-29 20:55:58,429 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Person), mappingColumn=id, insertable=true, updatable=true, unique=false}
2017-12-29 20:55:58,429 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property id with lazy=false
2017-12-29 20:55:58,430 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Person:id]
2017-12-29 20:55:58,430 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for id
2017-12-29 20:55:58,430 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property id
2017-12-29 20:55:58,431 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='addressId', referencedColumn='', mappedBy=''}
2017-12-29 20:55:58,431 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Person), mappingColumn=address, insertable=true, updatable=true, unique=false}
2017-12-29 20:55:58,433 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property address
2017-12-29 20:55:58,433 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Person), mappingColumn=endOfContract, insertable=true, updatable=true, unique=false}
2017-12-29 20:55:58,433 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property endOfContract with lazy=false
2017-12-29 20:55:58,433 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Person:endOfContract]
2017-12-29 20:55:58,433 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for endOfContract
2017-12-29 20:55:58,434 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property endOfContract
2017-12-29 20:55:58,434 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Person), mappingColumn=firstname, insertable=true, updatable=true, unique=false}
2017-12-29 20:55:58,434 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property firstname with lazy=false
2017-12-29 20:55:58,434 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Person:firstname]
2017-12-29 20:55:58,434 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for firstname
2017-12-29 20:55:58,434 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property firstname
2017-12-29 20:55:58,434 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Person), mappingColumn=lastname, insertable=true, updatable=true, unique=false}
2017-12-29 20:55:58,435 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property lastname with lazy=false
2017-12-29 20:55:58,435 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Person:lastname]
2017-12-29 20:55:58,435 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for lastname
2017-12-29 20:55:58,435 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property lastname
2017-12-29 20:55:58,435 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='remoteId', referencedColumn='', mappedBy=''}
2017-12-29 20:55:58,435 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Person), mappingColumn=remote, insertable=true, updatable=true, unique=false}
2017-12-29 20:55:58,435 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property remote
2017-12-29 20:55:58,436 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for id
2017-12-29 20:55:58,437 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for city
2017-12-29 20:55:58,437 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for country
2017-12-29 20:55:58,437 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for mailBox
2017-12-29 20:55:58,437 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for nr
2017-12-29 20:55:58,437 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for postalCode
2017-12-29 20:55:58,437 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for street
2017-12-29 20:55:58,437 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for id
2017-12-29 20:55:58,437 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for frequency
2017-12-29 20:55:58,437 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for isActive
2017-12-29 20:55:58,437 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for serialNumber
2017-12-29 20:55:58,438 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for id
2017-12-29 20:55:58,438 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for endOfContract
2017-12-29 20:55:58,438 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for firstname
2017-12-29 20:55:58,438 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for lastname
2017-12-29 20:55:58,441 +0100 [main] DEBUG (PrimaryKey.java:35) - Forcing column [id] to be non-null as it is part of the primary key for table [address]
2017-12-29 20:55:58,441 +0100 [main] DEBUG (PrimaryKey.java:35) - Forcing column [id] to be non-null as it is part of the primary key for table [remote]
2017-12-29 20:55:58,441 +0100 [main] DEBUG (PrimaryKey.java:35) - Forcing column [id] to be non-null as it is part of the primary key for table [person]
2017-12-29 20:55:58,442 +0100 [main] DEBUG (InFlightMetadataCollectorImpl.java:1798) - Resolving reference to class: model.entities.Address
2017-12-29 20:55:58,444 +0100 [main] DEBUG (InFlightMetadataCollectorImpl.java:1798) - Resolving reference to class: model.entities.Remote
2017-12-29 20:55:58,445 +0100 [main] DEBUG (InFlightMetadataCollectorImpl.java:1798) - Resolving reference to class: model.entities.Address
2017-12-29 20:55:58,445 +0100 [main] DEBUG (InFlightMetadataCollectorImpl.java:1798) - Resolving reference to class: model.entities.Remote
2017-12-29 20:55:58,467 +0100 [main] DEBUG (SessionFactoryImpl.java:200) - Building session factory
2017-12-29 20:55:58,467 +0100 [main] DEBUG (Settings.java:69) - SessionFactory name : null
2017-12-29 20:55:58,468 +0100 [main] DEBUG (Settings.java:70) - Automatic flush during beforeCompletion(): enabled
2017-12-29 20:55:58,468 +0100 [main] DEBUG (Settings.java:71) - Automatic session close at end of transaction: disabled
2017-12-29 20:55:58,468 +0100 [main] DEBUG (Settings.java:73) - Statistics: disabled
2017-12-29 20:55:58,468 +0100 [main] DEBUG (Settings.java:75) - Deleted entity synthetic identifier rollback: disabled
2017-12-29 20:55:58,468 +0100 [main] DEBUG (Settings.java:76) - Default entity-mode: pojo
2017-12-29 20:55:58,468 +0100 [main] DEBUG (Settings.java:77) - Check Nullability in Core (should be disabled when Bean Validation is on): enabled
2017-12-29 20:55:58,468 +0100 [main] DEBUG (Settings.java:78) - Allow initialization of lazy state outside session : disabled
2017-12-29 20:55:58,468 +0100 [main] DEBUG (Settings.java:80) - Using BatchFetchStyle : LEGACY
2017-12-29 20:55:58,468 +0100 [main] DEBUG (Settings.java:81) - Default batch fetch size: -1
2017-12-29 20:55:58,468 +0100 [main] DEBUG (Settings.java:82) - Maximum outer join fetch depth: 2
2017-12-29 20:55:58,469 +0100 [main] DEBUG (Settings.java:83) - Default null ordering: NONE
2017-12-29 20:55:58,469 +0100 [main] DEBUG (Settings.java:84) - Order SQL updates by primary key: disabled
2017-12-29 20:55:58,469 +0100 [main] DEBUG (Settings.java:85) - Order SQL inserts for batching: disabled
2017-12-29 20:55:58,469 +0100 [main] DEBUG (Settings.java:87) - multi-tenancy strategy : NONE
2017-12-29 20:55:58,469 +0100 [main] DEBUG (Settings.java:89) - JTA Track by Thread: enabled
2017-12-29 20:55:58,469 +0100 [main] DEBUG (Settings.java:91) - Query language substitutions: {}
2017-12-29 20:55:58,469 +0100 [main] DEBUG (Settings.java:92) - JPA query language strict compliance: disabled
2017-12-29 20:55:58,469 +0100 [main] DEBUG (Settings.java:93) - Named query checking : enabled
2017-12-29 20:55:58,469 +0100 [main] DEBUG (Settings.java:95) - Second-level cache: enabled
2017-12-29 20:55:58,469 +0100 [main] DEBUG (Settings.java:96) - Second-level query cache: disabled
2017-12-29 20:55:58,469 +0100 [main] DEBUG (Settings.java:97) - Second-level query cache factory: org.hibernate.cache.internal.StandardQueryCacheFactory@24c22fe
2017-12-29 20:55:58,469 +0100 [main] DEBUG (Settings.java:98) - Second-level cache region prefix: null
2017-12-29 20:55:58,470 +0100 [main] DEBUG (Settings.java:99) - Optimize second-level cache for minimal puts: disabled
2017-12-29 20:55:58,470 +0100 [main] DEBUG (Settings.java:100) - Structured second-level cache entries: disabled
2017-12-29 20:55:58,470 +0100 [main] DEBUG (Settings.java:101) - Second-level cache direct-reference entries: disabled
2017-12-29 20:55:58,470 +0100 [main] DEBUG (Settings.java:102) - Automatic eviction of collection cache: disabled
2017-12-29 20:55:58,470 +0100 [main] DEBUG (Settings.java:104) - JDBC batch size: 15
2017-12-29 20:55:58,470 +0100 [main] DEBUG (Settings.java:105) - JDBC batch updates for versioned data: enabled
2017-12-29 20:55:58,470 +0100 [main] DEBUG (Settings.java:106) - Scrollable result sets: enabled
2017-12-29 20:55:58,470 +0100 [main] DEBUG (Settings.java:107) - Wrap result sets: disabled
2017-12-29 20:55:58,470 +0100 [main] DEBUG (Settings.java:108) - JDBC3 getGeneratedKeys(): enabled
2017-12-29 20:55:58,470 +0100 [main] DEBUG (Settings.java:109) - JDBC result set fetch size: null
2017-12-29 20:55:58,471 +0100 [main] DEBUG (Settings.java:110) - Connection release mode: AFTER_TRANSACTION
2017-12-29 20:55:58,471 +0100 [main] DEBUG (Settings.java:111) - Generate SQL with comments: disabled
2017-12-29 20:55:58,506 +0100 [main] DEBUG (SessionFactoryImpl.java:258) - Session factory constructed with filter configurations : {}
2017-12-29 20:55:58,506 +0100 [main] DEBUG (SessionFactoryImpl.java:259) - Instantiating session factory with properties: {sun.desktop=windows, awt.toolkit=sun.awt.windows.WToolkit, file.encoding.pkg=sun.io, java.specification.version=1.8, sun.cpu.isalist=amd64, sun.jnu.encoding=Cp1252, java.class.path=C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\log4j-1.2.17.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\mysql-connector-java-5.1.45-bin.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\antlr-2.7.7.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\classmate-1.3.0.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\dom4j-1.6.1.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\hibernate-commons-annotations-5.0.1.Final.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\hibernate-core-5.2.12.Final.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\hibernate-jpa-2.1-api-1.0.0.Final.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\jandex-2.0.3.Final.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\javassist-3.20.0-GA.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\jboss-logging-3.3.0.Final.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\jboss-transaction-api_1.2_spec-1.0.1.Final.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\eclipselink.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\javax.persistence-3.0-prelude-embedded-m2-sources.jar;C:\Users\BenJolien\Desktop\eclipse\plugins\org.junit_4.12.0.v201504281640\junit.jar;C:\Users\BenJolien\Desktop\eclipse\plugins\org.hamcrest.core_1.3.0.v201303031735.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\jcalendar-1.4.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\target\classes;C:\Users\BenJolien\.m2\repository\org\apache\maven\plugins\maven-compiler-plugin\3.7.0\maven-compiler-plugin-3.7.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-plugin-api\3.0\maven-plugin-api-3.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-model\3.0\maven-model-3.0.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\sisu\sisu-inject-plexus\1.4.2\sisu-inject-plexus-1.4.2.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\sisu\sisu-inject-bean\1.4.2\sisu-inject-bean-1.4.2.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\sisu\sisu-guice\2.1.7\sisu-guice-2.1.7-noaop.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-artifact\3.0\maven-artifact-3.0.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-utils\2.0.4\plexus-utils-2.0.4.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-core\3.0\maven-core-3.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-settings\3.0\maven-settings-3.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-settings-builder\3.0\maven-settings-builder-3.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-repository-metadata\3.0\maven-repository-metadata-3.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-model-builder\3.0\maven-model-builder-3.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-aether-provider\3.0\maven-aether-provider-3.0.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\aether\aether-impl\1.7\aether-impl-1.7.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\aether\aether-spi\1.7\aether-spi-1.7.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\aether\aether-api\1.7\aether-api-1.7.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\aether\aether-util\1.7\aether-util-1.7.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-interpolation\1.14\plexus-interpolation-1.14.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-classworlds\2.2.3\plexus-classworlds-2.2.3.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-component-annotations\1.5.5\plexus-component-annotations-1.5.5.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\plexus\plexus-sec-dispatcher\1.3\plexus-sec-dispatcher-1.3.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\plexus\plexus-cipher\1.4\plexus-cipher-1.4.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\shared\maven-shared-utils\3.1.0\maven-shared-utils-3.1.0.jar;C:\Users\BenJolien\.m2\repository\commons-io\commons-io\2.5\commons-io-2.5.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\shared\maven-shared-incremental\1.1\maven-shared-incremental-1.1.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-java\0.9.2\plexus-java-0.9.2.jar;C:\Users\BenJolien\.m2\repository\org\ow2\asm\asm\6.0_BETA\asm-6.0_BETA.jar;C:\Users\BenJolien\.m2\repository\com\thoughtworks\qdox\qdox\2.0-M7\qdox-2.0-M7.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-compiler-api\2.8.2\plexus-compiler-api-2.8.2.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-compiler-manager\2.8.2\plexus-compiler-manager-2.8.2.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-compiler-javac\2.8.2\plexus-compiler-javac-2.8.2.jar;C:\Users\BenJolien\.m2\repository\org\hibernate\hibernate-core\4.2.7.SP1\hibernate-core-4.2.7.SP1.jar;C:\Users\BenJolien\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\BenJolien\.m2\repository\org\jboss\logging\jboss-logging\3.1.0.GA\jboss-logging-3.1.0.GA.jar;C:\Users\BenJolien\.m2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;C:\Users\BenJolien\.m2\repository\org\javassist\javassist\3.18.1-GA\javassist-3.18.1-GA.jar;C:\Users\BenJolien\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.1_spec\1.0.1.Final\jboss-transaction-api_1.1_spec-1.0.1.Final.jar;C:\Users\BenJolien\.m2\repository\org\hibernate\common\hibernate-commons-annotations\4.0.2.Final\hibernate-commons-annotations-4.0.2.Final.jar;C:\Users\BenJolien\.m2\repository\mysql\mysql-connector-java\6.0.6\mysql-connector-java-6.0.6.jar;C:\Users\BenJolien\.m2\repository\org\fluttercode\datafactory\datafactory\0.8\datafactory-0.8.jar;C:\Users\BenJolien\.m2\repository\org\hibernate\javax\persistence\hibernate-jpa-2.0-api\1.0.1.Final\hibernate-jpa-2.0-api-1.0.1.Final.jar, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=http://java.oracle.com/, user.timezone=Europe/Berlin, javax.persistence.jdbc.user=****, javax.persistence.jdbc.url=jdbc:mysql://localhost:3306/DbRemote, os.name=Windows 10, java.vm.specification.version=1.8, user.country=BE, sun.java.launcher=SUN_STANDARD, sun.boot.library.path=C:\Program Files\Java\jre1.8.0_144\bin, sun.java.command=test.database.GenerateDummyData, sun.cpu.endian=little, user.home=C:\Users\BenJolien, user.language=nl, java.specification.vendor=Oracle Corporation, java.home=C:\Program Files\Java\jre1.8.0_144, file.separator=\, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, hibernate.transaction.coordinator_class=class org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorBuilderImpl, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, javax.persistence.jdbc.driver=com.mysql.jdbc.Driver, sun.boot.class.path=C:\Program Files\Java\jre1.8.0_144\lib\resources.jar;C:\Program Files\Java\jre1.8.0_144\lib\rt.jar;C:\Program Files\Java\jre1.8.0_144\lib\sunrsasign.jar;C:\Program Files\Java\jre1.8.0_144\lib\jsse.jar;C:\Program Files\Java\jre1.8.0_144\lib\jce.jar;C:\Program Files\Java\jre1.8.0_144\lib\charsets.jar;C:\Program Files\Java\jre1.8.0_144\lib\jfr.jar;C:\Program Files\Java\jre1.8.0_144\classes, user.script=, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=1.8.0_144-b01, user.name=BenJolien, path.separator=;, hibernate.connection.username=userDB, os.version=10.0, java.endorsed.dirs=C:\Program Files\Java\jre1.8.0_144\lib\endorsed, java.runtime.name=Java(TM) SE Runtime Environment, hibernate.connection.url=jdbc:mysql://localhost:3306/DbRemote, hibernate.ejb.persistenceUnitName=Afstandsbediening, file.encoding=UTF-8, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.connection.driver_class=com.mysql.jdbc.Driver, java.vendor.url.bug=http://bugreport.sun.com/bugreport/, java.io.tmpdir=C:\Users\BENJOL~1\AppData\Local\Temp\, java.version=1.8.0_144, user.dir=C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, hibernate.connection.password=****, java.awt.printerjob=sun.awt.windows.WPrinterJob, sun.os.patch.level=, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@3b8f0a79, java.library.path=C:\Program Files\Java\jre1.8.0_144\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:/Program Files/Java/jre1.8.0_151/bin/server;C:/Program Files/Java/jre1.8.0_151/bin;C:/Program Files/Java/jre1.8.0_151/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Program Files\Microsoft MPI\Bin\;C:\Program Files (x86)\Intel\iCLS Client\;C:\Program Files\Intel\iCLS Client\;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files (x86)\Windows Kits\10\Windows Performance Toolkit\;C:\Program Files\dotnet\;C:\Program Files\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files (x86)\GtkSharp\2.12\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\nodejs\;C:\Program Files\Microsoft\Web Platform Installer\;C:\Program Files\Microsoft SQL Server\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\110\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\110\DTS\Binn\;C:\Program Files\Microsoft SQL Server\110\DTS\Binn\;C:\Program Files (x86)\Microsoft SQL Server\Client SDK\ODBC\130\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\130\DTS\Binn\;C:\Program Files (x86)\Microsoft SQL Server\130\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files (x86)\scala\bin;C:\Program Files\ibm\gsk8\lib64;C:\Program Files (x86)\ibm\gsk8\lib;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Brackets\command;C:\Program Files\Git\cmd;C:\Program Files\MySQL\MySQL Utilities 1.6\;C:\Users\BenJolien\AppData\Local\Microsoft\WindowsApps;C:\Users\BenJolien\AppData\Roaming\npm;;C:\Users\BenJolien\Desktop\eclipse;;., java.vm.info=mixed mode, java.vendor=Oracle Corporation, java.vm.version=25.144-b01, hibernate.bytecode.use_reflection_optimizer=false, java.ext.dirs=C:\Program Files\Java\jre1.8.0_144\lib\ext;C:\WINDOWS\Sun\Java\lib\ext, sun.io.unicode.encoding=UnicodeLittle, javax.persistence.jdbc.password=userDB, java.class.version=52.0}
2017-12-29 20:55:58,517 +0100 [main] DEBUG (JaccIntegrator.java:80) - Skipping JACC integration as it was not enabled
2017-12-29 20:55:58,520 +0100 [main] DEBUG (CascadeStyles.java:268) - External cascade style registration [persist : STYLE_PERSIST_SKIPLAZY] overrode base registration [STYLE_PERSIST]
2017-12-29 20:55:58,565 +0100 [main] DEBUG (SessionFactoryImpl.java:298) - Instantiated session factory
2017-12-29 20:55:58,585 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:55) - Not known whether passed class name [model.entities.Address] is safe
2017-12-29 20:55:58,585 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:57) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.entities.Address
2017-12-29 20:55:58,592 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:55) - Not known whether passed class name [model.entities.Address] is safe
2017-12-29 20:55:58,592 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:57) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.entities.Address
2017-12-29 20:55:58,619 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:55) - Not known whether passed class name [model.entities.Remote] is safe
2017-12-29 20:55:58,619 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:57) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.entities.Remote
2017-12-29 20:55:58,619 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:55) - Not known whether passed class name [model.entities.Remote] is safe
2017-12-29 20:55:58,619 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:57) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.entities.Remote
2017-12-29 20:55:58,625 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:55) - Not known whether passed class name [model.entities.Person] is safe
2017-12-29 20:55:58,626 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:57) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.entities.Person
2017-12-29 20:55:58,628 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:55) - Not known whether passed class name [model.entities.Person] is safe
2017-12-29 20:55:58,628 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:57) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.entities.Person
2017-12-29 20:55:58,635 +0100 [main] DEBUG (AbstractEntityPersister.java:3608) - Static SQL for entity: model.entities.Address
2017-12-29 20:55:58,636 +0100 [main] DEBUG (AbstractEntityPersister.java:3613) -  Version select: select id from address where id =?
2017-12-29 20:55:58,636 +0100 [main] DEBUG (AbstractEntityPersister.java:3616) -  Snapshot select: select address_.id, address_.city as city2_0_, address_.country as country3_0_, address_.mailBox as mailBox4_0_, address_.nr as nr5_0_, address_.postalCode as postalCo6_0_, address_.street as street7_0_ from address address_ where address_.id=?
2017-12-29 20:55:58,636 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into address (city, country, mailBox, nr, postalCode, street, id) values (?, ?, ?, ?, ?, ?, ?)
2017-12-29 20:55:58,636 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update address set city=?, country=?, mailBox=?, nr=?, postalCode=?, street=? where id=?
2017-12-29 20:55:58,636 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from address where id=?
2017-12-29 20:55:58,636 +0100 [main] DEBUG (AbstractEntityPersister.java:3624) -  Identity insert: insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 20:55:58,648 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@363042d7]
2017-12-29 20:55:58,649 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 20:55:58,649 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 20:55:58,649 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 20:55:58,649 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 20:55:58,649 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 20:55:58,649 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 20:55:58,649 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:55:58,656 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:55:58,659 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 20:55:58,660 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [NONE]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 20:55:58,660 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3700ec9c]
2017-12-29 20:55:58,660 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 20:55:58,660 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 20:55:58,660 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 20:55:58,660 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 20:55:58,660 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 20:55:58,660 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 20:55:58,661 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:55:58,661 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:55:58,661 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 20:55:58,661 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [READ]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 20:55:58,661 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5911e990]
2017-12-29 20:55:58,661 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 20:55:58,661 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 20:55:58,661 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 20:55:58,661 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 20:55:58,662 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 20:55:58,662 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 20:55:58,662 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:55:58,662 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:55:58,662 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 20:55:58,662 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [UPGRADE]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? for update
2017-12-29 20:55:58,662 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1d470d0]
2017-12-29 20:55:58,662 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 20:55:58,662 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 20:55:58,662 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 20:55:58,662 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 20:55:58,663 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 20:55:58,663 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 20:55:58,663 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:55:58,663 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:55:58,663 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 20:55:58,663 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [UPGRADE_NOWAIT]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? for update
2017-12-29 20:55:58,663 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@54c62d71]
2017-12-29 20:55:58,663 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 20:55:58,663 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 20:55:58,664 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 20:55:58,664 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 20:55:58,664 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 20:55:58,664 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 20:55:58,664 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:55:58,664 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:55:58,664 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 20:55:58,664 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [UPGRADE_SKIPLOCKED]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? for update
2017-12-29 20:55:58,664 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@47f4e407]
2017-12-29 20:55:58,664 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 20:55:58,664 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 20:55:58,665 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 20:55:58,665 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 20:55:58,665 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 20:55:58,665 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 20:55:58,665 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:55:58,665 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:55:58,665 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 20:55:58,666 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [FORCE]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? for update
2017-12-29 20:55:58,666 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@48d5f34e]
2017-12-29 20:55:58,666 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 20:55:58,666 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 20:55:58,666 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 20:55:58,666 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 20:55:58,666 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 20:55:58,666 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 20:55:58,666 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:55:58,667 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:55:58,667 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 20:55:58,667 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [PESSIMISTIC_READ]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? lock in share mode
2017-12-29 20:55:58,667 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6ff65192]
2017-12-29 20:55:58,667 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 20:55:58,668 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 20:55:58,668 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 20:55:58,668 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 20:55:58,668 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 20:55:58,669 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 20:55:58,669 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:55:58,669 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:55:58,669 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 20:55:58,669 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [PESSIMISTIC_WRITE]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? for update
2017-12-29 20:55:58,670 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4af0df05]
2017-12-29 20:55:58,670 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 20:55:58,670 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 20:55:58,670 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 20:55:58,670 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 20:55:58,670 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 20:55:58,670 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 20:55:58,670 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:55:58,671 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:55:58,671 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 20:55:58,671 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [PESSIMISTIC_FORCE_INCREMENT]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? for update
2017-12-29 20:55:58,671 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@acdb094]
2017-12-29 20:55:58,672 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 20:55:58,672 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 20:55:58,672 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 20:55:58,672 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 20:55:58,672 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 20:55:58,672 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 20:55:58,672 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:55:58,672 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:55:58,673 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 20:55:58,673 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [OPTIMISTIC]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 20:55:58,673 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2b0f373b]
2017-12-29 20:55:58,673 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 20:55:58,673 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 20:55:58,673 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 20:55:58,673 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 20:55:58,673 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 20:55:58,674 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 20:55:58,674 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:55:58,674 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:55:58,674 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 20:55:58,674 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [OPTIMISTIC_FORCE_INCREMENT]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 20:55:58,682 +0100 [main] DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity model.entities.Address: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 20:55:58,682 +0100 [main] DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity model.entities.Address: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 20:55:58,683 +0100 [main] DEBUG (AbstractEntityPersister.java:3608) - Static SQL for entity: model.entities.Remote
2017-12-29 20:55:58,683 +0100 [main] DEBUG (AbstractEntityPersister.java:3613) -  Version select: select id from Remote where id =?
2017-12-29 20:55:58,683 +0100 [main] DEBUG (AbstractEntityPersister.java:3616) -  Snapshot select: select remote_.id, remote_.frequency as frequenc2_2_, remote_.isActive as isActive3_2_, remote_.serialNumber as serialNu4_2_ from Remote remote_ where remote_.id=?
2017-12-29 20:55:58,683 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into Remote (frequency, isActive, serialNumber, id) values (?, ?, ?, ?)
2017-12-29 20:55:58,683 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update Remote set frequency=?, isActive=?, serialNumber=? where id=?
2017-12-29 20:55:58,683 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from Remote where id=?
2017-12-29 20:55:58,683 +0100 [main] DEBUG (AbstractEntityPersister.java:3624) -  Identity insert: insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 20:55:58,683 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4c550889]
2017-12-29 20:55:58,683 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 20:55:58,683 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 20:55:58,683 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 20:55:58,683 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:55:58,683 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:55:58,684 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 20:55:58,684 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [NONE]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 20:55:58,684 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@44040454]
2017-12-29 20:55:58,684 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 20:55:58,684 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 20:55:58,684 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 20:55:58,684 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:55:58,684 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:55:58,684 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 20:55:58,684 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [READ]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 20:55:58,685 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@18bc345]
2017-12-29 20:55:58,685 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 20:55:58,685 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 20:55:58,685 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 20:55:58,685 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:55:58,685 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:55:58,685 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 20:55:58,685 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [UPGRADE]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? for update
2017-12-29 20:55:58,685 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@26bab2f1]
2017-12-29 20:55:58,685 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 20:55:58,686 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 20:55:58,686 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 20:55:58,686 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:55:58,686 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:55:58,686 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 20:55:58,686 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [UPGRADE_NOWAIT]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? for update
2017-12-29 20:55:58,686 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@68ead359]
2017-12-29 20:55:58,687 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 20:55:58,687 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 20:55:58,687 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 20:55:58,687 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:55:58,688 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:55:58,688 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 20:55:58,688 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [UPGRADE_SKIPLOCKED]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? for update
2017-12-29 20:55:58,688 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@a43ce46]
2017-12-29 20:55:58,689 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 20:55:58,689 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 20:55:58,689 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 20:55:58,689 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:55:58,689 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:55:58,689 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 20:55:58,689 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [FORCE]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? for update
2017-12-29 20:55:58,690 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@424ebba3]
2017-12-29 20:55:58,690 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 20:55:58,690 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 20:55:58,690 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 20:55:58,690 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:55:58,691 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:55:58,692 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 20:55:58,692 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [PESSIMISTIC_READ]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? lock in share mode
2017-12-29 20:55:58,692 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2320fa6f]
2017-12-29 20:55:58,692 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 20:55:58,692 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 20:55:58,693 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 20:55:58,693 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:55:58,693 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:55:58,693 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 20:55:58,693 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [PESSIMISTIC_WRITE]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? for update
2017-12-29 20:55:58,693 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4d722ac9]
2017-12-29 20:55:58,694 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 20:55:58,694 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 20:55:58,694 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 20:55:58,694 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:55:58,694 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:55:58,694 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 20:55:58,695 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [PESSIMISTIC_FORCE_INCREMENT]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? for update
2017-12-29 20:55:58,695 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@77a7cf58]
2017-12-29 20:55:58,695 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 20:55:58,695 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 20:55:58,695 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 20:55:58,695 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:55:58,695 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:55:58,696 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 20:55:58,696 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [OPTIMISTIC]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 20:55:58,696 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@616fe72b]
2017-12-29 20:55:58,696 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 20:55:58,696 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 20:55:58,696 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 20:55:58,696 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:55:58,697 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:55:58,697 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 20:55:58,697 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [OPTIMISTIC_FORCE_INCREMENT]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 20:55:58,697 +0100 [main] DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity model.entities.Remote: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 20:55:58,698 +0100 [main] DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity model.entities.Remote: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 20:55:58,698 +0100 [main] DEBUG (AbstractEntityPersister.java:3608) - Static SQL for entity: model.entities.Person
2017-12-29 20:55:58,698 +0100 [main] DEBUG (AbstractEntityPersister.java:3613) -  Version select: select id from Person where id =?
2017-12-29 20:55:58,698 +0100 [main] DEBUG (AbstractEntityPersister.java:3616) -  Snapshot select: select person_.id, person_.addressId as addressI5_1_, person_.endOfContract as endOfCon2_1_, person_.firstname as firstnam3_1_, person_.lastname as lastname4_1_, person_.remoteId as remoteId6_1_ from Person person_ where person_.id=?
2017-12-29 20:55:58,698 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into Person (addressId, endOfContract, firstname, lastname, remoteId, id) values (?, ?, ?, ?, ?, ?)
2017-12-29 20:55:58,699 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update Person set addressId=?, endOfContract=?, firstname=?, lastname=?, remoteId=? where id=?
2017-12-29 20:55:58,699 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from Person where id=?
2017-12-29 20:55:58,699 +0100 [main] DEBUG (AbstractEntityPersister.java:3624) -  Identity insert: insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 20:55:58,699 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7e7b159b]
2017-12-29 20:55:58,699 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 20:55:58,702 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5cbe877d]
2017-12-29 20:55:58,703 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.city
2017-12-29 20:55:58,704 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.country
2017-12-29 20:55:58,704 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.mailBox
2017-12-29 20:55:58,704 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.nr
2017-12-29 20:55:58,704 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.postalCode
2017-12-29 20:55:58,704 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.street
2017-12-29 20:55:58,704 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 20:55:58,704 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 20:55:58,704 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 20:55:58,704 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 20:55:58,704 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3cc41abc]
2017-12-29 20:55:58,704 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote.frequency
2017-12-29 20:55:58,704 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote.isActive
2017-12-29 20:55:58,704 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote.serialNumber
2017-12-29 20:55:58,705 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:55:58,705 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:55:58,706 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}
          - JOIN (JoinDefinedByMetadata(address)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=model.entities.Address)
                - SQL table alias mapping - address1_
                - alias suffix - 1_
                - suffixed key columns - {id1_0_1_}
          - JOIN (JoinDefinedByMetadata(remote)) : <gen:0> -> <gen:2>
             - EntityQuerySpaceImpl(uid=<gen:2>, entity=model.entities.Remote)
                - SQL table alias mapping - remote2_
                - alias suffix - 2_
                - suffixed key columns - {id1_2_2_}

2017-12-29 20:55:58,706 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [NONE]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.mailBox as mailBox4_0_1_, address1_.nr as nr5_0_1_, address1_.postalCode as postalCo6_0_1_, address1_.street as street7_0_1_, remote2_.id as id1_2_2_, remote2_.frequency as frequenc2_2_2_, remote2_.isActive as isActive3_2_2_, remote2_.serialNumber as serialNu4_2_2_ from Person person0_ left outer join address address1_ on person0_.addressId=address1_.id left outer join Remote remote2_ on person0_.remoteId=remote2_.id where person0_.id=?
2017-12-29 20:55:58,706 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1c3b9394]
2017-12-29 20:55:58,706 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 20:55:58,706 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7f6f61c8]
2017-12-29 20:55:58,706 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.city
2017-12-29 20:55:58,707 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.country
2017-12-29 20:55:58,707 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.mailBox
2017-12-29 20:55:58,707 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.nr
2017-12-29 20:55:58,707 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.postalCode
2017-12-29 20:55:58,707 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.street
2017-12-29 20:55:58,707 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 20:55:58,707 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 20:55:58,707 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 20:55:58,707 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 20:55:58,708 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@ccb4b1b]
2017-12-29 20:55:58,708 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote.frequency
2017-12-29 20:55:58,708 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote.isActive
2017-12-29 20:55:58,710 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote.serialNumber
2017-12-29 20:55:58,711 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:55:58,711 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:55:58,712 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}
          - JOIN (JoinDefinedByMetadata(address)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=model.entities.Address)
                - SQL table alias mapping - address1_
                - alias suffix - 1_
                - suffixed key columns - {id1_0_1_}
          - JOIN (JoinDefinedByMetadata(remote)) : <gen:0> -> <gen:2>
             - EntityQuerySpaceImpl(uid=<gen:2>, entity=model.entities.Remote)
                - SQL table alias mapping - remote2_
                - alias suffix - 2_
                - suffixed key columns - {id1_2_2_}

2017-12-29 20:55:58,712 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [READ]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.mailBox as mailBox4_0_1_, address1_.nr as nr5_0_1_, address1_.postalCode as postalCo6_0_1_, address1_.street as street7_0_1_, remote2_.id as id1_2_2_, remote2_.frequency as frequenc2_2_2_, remote2_.isActive as isActive3_2_2_, remote2_.serialNumber as serialNu4_2_2_ from Person person0_ left outer join address address1_ on person0_.addressId=address1_.id left outer join Remote remote2_ on person0_.remoteId=remote2_.id where person0_.id=?
2017-12-29 20:55:58,712 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@ec2cc4]
2017-12-29 20:55:58,712 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 20:55:58,712 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7c1e2a2d]
2017-12-29 20:55:58,712 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 20:55:58,713 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 20:55:58,713 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 20:55:58,713 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 20:55:58,713 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@333dd51e]
2017-12-29 20:55:58,713 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:55:58,713 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:55:58,714 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 20:55:58,714 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [UPGRADE]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? for update
2017-12-29 20:55:58,714 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@52d645b1]
2017-12-29 20:55:58,714 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 20:55:58,714 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2cc3ad05]
2017-12-29 20:55:58,714 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 20:55:58,714 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 20:55:58,714 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 20:55:58,714 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 20:55:58,714 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@710b18a6]
2017-12-29 20:55:58,714 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:55:58,715 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:55:58,715 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 20:55:58,715 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [UPGRADE_NOWAIT]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? for update
2017-12-29 20:55:58,715 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@119020fb]
2017-12-29 20:55:58,715 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 20:55:58,716 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@c055c54]
2017-12-29 20:55:58,716 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 20:55:58,716 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 20:55:58,716 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 20:55:58,716 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 20:55:58,716 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@25e2ab5a]
2017-12-29 20:55:58,716 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:55:58,716 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:55:58,717 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 20:55:58,717 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [UPGRADE_SKIPLOCKED]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? for update
2017-12-29 20:55:58,717 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@35e5d0e5]
2017-12-29 20:55:58,717 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 20:55:58,717 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@55562aa9]
2017-12-29 20:55:58,717 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 20:55:58,717 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 20:55:58,717 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 20:55:58,717 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 20:55:58,718 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@655ef322]
2017-12-29 20:55:58,718 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:55:58,718 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:55:58,718 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 20:55:58,719 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [FORCE]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? for update
2017-12-29 20:55:58,719 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7e276594]
2017-12-29 20:55:58,719 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 20:55:58,719 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5066d65f]
2017-12-29 20:55:58,719 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 20:55:58,719 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 20:55:58,720 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 20:55:58,720 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 20:55:58,720 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4233e892]
2017-12-29 20:55:58,720 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:55:58,720 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:55:58,721 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 20:55:58,721 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [PESSIMISTIC_READ]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? lock in share mode
2017-12-29 20:55:58,721 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@77d2e85]
2017-12-29 20:55:58,721 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 20:55:58,721 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@58ffcbd7]
2017-12-29 20:55:58,721 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 20:55:58,721 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 20:55:58,721 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 20:55:58,722 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 20:55:58,722 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@555cf22]
2017-12-29 20:55:58,722 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:55:58,728 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:55:58,728 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 20:55:58,729 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [PESSIMISTIC_WRITE]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? for update
2017-12-29 20:55:58,729 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6bb2d00b]
2017-12-29 20:55:58,729 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 20:55:58,729 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1a9c38eb]
2017-12-29 20:55:58,729 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 20:55:58,730 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 20:55:58,730 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 20:55:58,730 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 20:55:58,730 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@319bc845]
2017-12-29 20:55:58,730 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:55:58,731 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:55:58,731 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 20:55:58,731 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [PESSIMISTIC_FORCE_INCREMENT]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? for update
2017-12-29 20:55:58,731 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4c5474f5]
2017-12-29 20:55:58,731 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 20:55:58,731 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@54e22bdd]
2017-12-29 20:55:58,731 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 20:55:58,731 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 20:55:58,731 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 20:55:58,732 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 20:55:58,732 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3bd418e4]
2017-12-29 20:55:58,732 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:55:58,732 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:55:58,732 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 20:55:58,732 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [OPTIMISTIC]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=?
2017-12-29 20:55:58,732 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@544820b7]
2017-12-29 20:55:58,733 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 20:55:58,733 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2e61d218]
2017-12-29 20:55:58,733 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 20:55:58,733 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 20:55:58,733 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 20:55:58,733 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 20:55:58,733 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3569fc08]
2017-12-29 20:55:58,733 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:55:58,734 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:55:58,734 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 20:55:58,734 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [OPTIMISTIC_FORCE_INCREMENT]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=?
2017-12-29 20:55:58,735 +0100 [main] DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity model.entities.Person: select person0_.id as id1_1_2_, person0_.addressId as addressI5_1_2_, person0_.endOfContract as endOfCon2_1_2_, person0_.firstname as firstnam3_1_2_, person0_.lastname as lastname4_1_2_, person0_.remoteId as remoteId6_1_2_, address1_.id as id1_0_0_, address1_.city as city2_0_0_, address1_.country as country3_0_0_, address1_.mailBox as mailBox4_0_0_, address1_.nr as nr5_0_0_, address1_.postalCode as postalCo6_0_0_, address1_.street as street7_0_0_, remote2_.id as id1_2_1_, remote2_.frequency as frequenc2_2_1_, remote2_.isActive as isActive3_2_1_, remote2_.serialNumber as serialNu4_2_1_ from Person person0_ left outer join address address1_ on person0_.addressId=address1_.id left outer join Remote remote2_ on person0_.remoteId=remote2_.id where person0_.id=?
2017-12-29 20:55:58,735 +0100 [main] DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity model.entities.Person: select person0_.id as id1_1_2_, person0_.addressId as addressI5_1_2_, person0_.endOfContract as endOfCon2_1_2_, person0_.firstname as firstnam3_1_2_, person0_.lastname as lastname4_1_2_, person0_.remoteId as remoteId6_1_2_, address1_.id as id1_0_0_, address1_.city as city2_0_0_, address1_.country as country3_0_0_, address1_.mailBox as mailBox4_0_0_, address1_.nr as nr5_0_0_, address1_.postalCode as postalCo6_0_0_, address1_.street as street7_0_0_, remote2_.id as id1_2_1_, remote2_.frequency as frequenc2_2_1_, remote2_.isActive as isActive3_2_1_, remote2_.serialNumber as serialNu4_2_1_ from Person person0_ left outer join address address1_ on person0_.addressId=address1_.id left outer join Remote remote2_ on person0_.remoteId=remote2_.id where person0_.id=?
2017-12-29 20:55:58,750 +0100 [main] DEBUG (SchemaManagementToolCoordinator.java:56) - No actions specified; doing nothing
2017-12-29 20:55:58,750 +0100 [main] DEBUG (JtaPlatformInitiator.java:42) - No JtaPlatform was specified, checking resolver
2017-12-29 20:55:58,751 +0100 [main] DEBUG (JtaPlatformResolverInitiator.java:33) - No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
2017-12-29 20:55:58,753 +0100 [main] DEBUG (StandardJtaPlatformResolver.java:102) - Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2017-12-29 20:55:58,754 +0100 [main] DEBUG (NamedQueryRepository.java:151) - Checking 1 named HQL queries
2017-12-29 20:55:58,754 +0100 [main] DEBUG (NamedQueryRepository.java:155) - Checking named query: findUnusedAddress
2017-12-29 20:55:58,757 +0100 [main] DEBUG (QueryTranslatorFactoryInitiator.java:45) - QueryTranslatorFactory : org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory@3543df7d
2017-12-29 20:55:58,757 +0100 [main] INFO  (QueryTranslatorFactoryInitiator.java:47) - HHH000397: Using ASTQueryTranslatorFactory
2017-12-29 20:55:58,773 +0100 [main] DEBUG (QueryTranslatorImpl.java:282) - parse() - HQL: SELECT a FROM model.entities.Address a WHERE a.id NOT IN (SELECT p.address.id FROM model.entities.Person p)
2017-12-29 20:55:58,778 +0100 [main] DEBUG (ErrorCounter.java:95) - throwQueryException() : no errors
2017-12-29 20:55:58,780 +0100 [main] DEBUG (QueryTranslatorImpl.java:305) - --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'FROM'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[IDENT] Node: 'model'
    |  |     |  |  \-[IDENT] Node: 'entities'
    |  |     |  \-[IDENT] Node: 'Address'
    |  |     \-[ALIAS] Node: 'a'
    |  \-[SELECT] Node: 'SELECT'
    |     \-[IDENT] Node: 'a'
    \-[WHERE] Node: 'WHERE'
       \-[NOT_IN] Node: 'not in'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'a'
          |  \-[IDENT] Node: 'id'
          \-[IN_LIST] Node: 'inList'
             \-[QUERY] Node: 'query'
                \-[SELECT_FROM] Node: 'SELECT_FROM'
                   +-[FROM] Node: 'FROM'
                   |  \-[RANGE] Node: 'RANGE'
                   |     +-[DOT] Node: '.'
                   |     |  +-[DOT] Node: '.'
                   |     |  |  +-[IDENT] Node: 'model'
                   |     |  |  \-[IDENT] Node: 'entities'
                   |     |  \-[IDENT] Node: 'Person'
                   |     \-[ALIAS] Node: 'p'
                   \-[SELECT] Node: 'SELECT'
                      \-[DOT] Node: '.'
                         +-[DOT] Node: '.'
                         |  +-[IDENT] Node: 'p'
                         |  \-[IDENT] Node: 'address'
                         \-[IDENT] Node: 'id'

2017-12-29 20:55:58,794 +0100 [main] DEBUG (HqlSqlBaseWalker.java:124) - select << begin [level=1, statement=select]
2017-12-29 20:55:58,802 +0100 [main] DEBUG (FromElement.java:147) - FromClause{level=1} : model.entities.Address (a) -> address0_
2017-12-29 20:55:58,803 +0100 [main] DEBUG (FromReferenceNode.java:60) - Resolved : a -> address0_.id
2017-12-29 20:55:58,805 +0100 [main] DEBUG (FromReferenceNode.java:60) - Resolved : a -> address0_.id
2017-12-29 20:55:58,805 +0100 [main] DEBUG (DotNode.java:666) - getDataType() : id -> org.hibernate.type.IntegerType@5e25a92e
2017-12-29 20:55:58,806 +0100 [main] DEBUG (FromReferenceNode.java:60) - Resolved : a.id -> address0_.id
2017-12-29 20:55:58,806 +0100 [main] DEBUG (HqlSqlBaseWalker.java:124) - select << begin [level=2, statement=select]
2017-12-29 20:55:58,807 +0100 [main] DEBUG (FromElement.java:147) - FromClause{level=2} : model.entities.Person (p) -> person1_
2017-12-29 20:55:58,807 +0100 [main] DEBUG (FromReferenceNode.java:60) - Resolved : p -> person1_.id
2017-12-29 20:55:58,807 +0100 [main] DEBUG (DotNode.java:666) - getDataType() : address -> org.hibernate.type.ManyToOneType(model.entities.Address)
2017-12-29 20:55:58,807 +0100 [main] DEBUG (DotNode.java:625) - dereferenceShortcut() : property id in model.entities.Person does not require a join.
2017-12-29 20:55:58,807 +0100 [main] DEBUG (DotNode.java:650) - Unresolved property path is now 'address.id'
2017-12-29 20:55:58,807 +0100 [main] DEBUG (FromReferenceNode.java:60) - Resolved : p.address -> person1_.addressId
2017-12-29 20:55:58,807 +0100 [main] DEBUG (DotNode.java:666) - getDataType() : address.id -> org.hibernate.type.IntegerType@5e25a92e
2017-12-29 20:55:58,807 +0100 [main] DEBUG (FromReferenceNode.java:60) - Resolved : p.address.id -> person1_.addressId
2017-12-29 20:55:58,808 +0100 [main] DEBUG (HqlSqlBaseWalker.java:128) - select : finishing up [level=2, statement=select]
2017-12-29 20:55:58,808 +0100 [main] DEBUG (HqlSqlWalker.java:747) - processQuery() :  ( SELECT ( {select clause} ( person1_.addressId ( person1_.addressId person1_.id address ) id ) ) ( FromClause{level=2} Person person1_ ) )
2017-12-29 20:55:58,812 +0100 [main] DEBUG (JoinProcessor.java:192) - Using FROM fragment [Person person1_]
2017-12-29 20:55:58,812 +0100 [main] DEBUG (HqlSqlBaseWalker.java:132) - select >> end [level=2, statement=select]
2017-12-29 20:55:58,813 +0100 [main] DEBUG (HqlSqlBaseWalker.java:128) - select : finishing up [level=1, statement=select]
2017-12-29 20:55:58,813 +0100 [main] DEBUG (HqlSqlWalker.java:747) - processQuery() :  ( SELECT ( {select clause} address0_.id ) ( FromClause{level=1} address address0_ ) ( WHERE ( not in ( address0_.id address0_.id id ) ( inList ( SELECT ( {select clause} ( person1_.addressId ( person1_.addressId person1_.id address ) id ) ) ( FromClause{level=2} Person person1_ ) ) ) ) ) )
2017-12-29 20:55:58,815 +0100 [main] DEBUG (JoinProcessor.java:192) - Using FROM fragment [address address0_]
2017-12-29 20:55:58,815 +0100 [main] DEBUG (HqlSqlBaseWalker.java:132) - select >> end [level=1, statement=select]
2017-12-29 20:55:58,815 +0100 [main] DEBUG (QueryTranslatorImpl.java:269) - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (address,Person)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'address0_.id as id1_0_' {alias=a, className=model.entities.Address, tableAlias=address0_}
    |  \-[SQL_TOKEN] SqlFragment: 'address0_.city as city2_0_, address0_.country as country3_0_, address0_.mailBox as mailBox4_0_, address0_.nr as nr5_0_, address0_.postalCode as postalCo6_0_, address0_.street as street7_0_'
    +-[FROM] FromClause: 'FROM' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[a], fromElementByTableAlias=[address0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'address address0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=a,role=null,tableName=address,tableAlias=address0_,origin=null,columns={,className=model.entities.Address}}
    \-[WHERE] SqlNode: 'WHERE'
       \-[NOT_IN] InLogicOperatorNode: 'not in'
          +-[DOT] DotNode: 'address0_.id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=id,path=a.id,tableAlias=address0_,className=model.entities.Address,classAlias=a}
          |  +-[ALIAS_REF] IdentNode: 'address0_.id' {alias=a, className=model.entities.Address, tableAlias=address0_}
          |  \-[IDENT] IdentNode: 'id' {originalText=id}
          \-[IN_LIST] SqlNode: 'inList'
             \-[SELECT] QueryNode: 'SELECT'  querySpaces (address,Person)
                +-[SELECT_CLAUSE] SelectClause: '{select clause}'
                |  \-[DOT] DotNode: 'person1_.addressId' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=address.id,path=p.address.id,tableAlias=person1_,className=model.entities.Person,classAlias=p}
                |     +-[DOT] DotNode: 'person1_.addressId' {propertyName=id,dereferenceType=UNKNOWN,getPropertyPath=address.id,path=p.address,tableAlias=person1_,className=model.entities.Person,classAlias=p}
                |     |  +-[ALIAS_REF] IdentNode: 'person1_.id' {alias=p, className=model.entities.Person, tableAlias=person1_}
                |     |  \-[IDENT] IdentNode: 'address' {originalText=address}
                |     \-[IDENT] IdentNode: 'id' {originalText=id}
                \-[FROM] FromClause: 'FROM' FromClause{level=2, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[p], fromElementByTableAlias=[person1_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
                   \-[FROM_FRAGMENT] FromElement: 'Person person1_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=p,role=null,tableName=Person,tableAlias=person1_,origin=null,columns={,className=model.entities.Person}}

2017-12-29 20:55:58,815 +0100 [main] DEBUG (ErrorCounter.java:95) - throwQueryException() : no errors
2017-12-29 20:55:58,819 +0100 [main] DEBUG (QueryTranslatorImpl.java:251) - HQL: SELECT a FROM model.entities.Address a WHERE a.id NOT IN (SELECT p.address.id FROM model.entities.Person p)
2017-12-29 20:55:58,819 +0100 [main] DEBUG (QueryTranslatorImpl.java:252) - SQL: select address0_.id as id1_0_, address0_.city as city2_0_, address0_.country as country3_0_, address0_.mailBox as mailBox4_0_, address0_.nr as nr5_0_, address0_.postalCode as postalCo6_0_, address0_.street as street7_0_ from address address0_ where address0_.id not in  (select person1_.addressId from Person person1_)
2017-12-29 20:55:58,819 +0100 [main] DEBUG (ErrorCounter.java:95) - throwQueryException() : no errors
2017-12-29 20:55:58,822 +0100 [main] DEBUG (NamedQueryRepository.java:167) - Checking 0 named SQL queries
2017-12-29 20:55:58,823 +0100 [main] DEBUG (SessionFactoryRegistry.java:52) - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@6bb75258
2017-12-29 20:55:58,824 +0100 [main] DEBUG (SessionFactoryRegistry.java:74) - Registering SessionFactory: 6ef8629c-fd80-411b-bf77-c6c4bb325901 (<unnamed>)
2017-12-29 20:55:58,824 +0100 [main] DEBUG (SessionFactoryRegistry.java:81) - Not binding SessionFactory to JNDI, no JNDI name configured
2017-12-29 20:55:58,921 +0100 [main] DEBUG (StatisticsInitiator.java:82) - Statistics initialized [enabled=false]
2017-12-29 20:55:58,927 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:55:58,928 +0100 [main] DEBUG (DefaultMergeEventListener.java:93) - EntityCopyObserver strategy: disallow
2017-12-29 20:55:58,940 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:55:58,943 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 20:55:59,032 +0100 [main] DEBUG (SqlExceptionHelper.java:124) - could not execute statement [n/a]
com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Duplicate entry 'Bondgenotenlaan-150-1-3000-Leuven-Belgi�' for key 'UC_Address'
	at sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
	at sun.reflect.NativeConstructorAccessorImpl.newInstance(Unknown Source)
	at sun.reflect.DelegatingConstructorAccessorImpl.newInstance(Unknown Source)
	at java.lang.reflect.Constructor.newInstance(Unknown Source)
	at com.mysql.jdbc.Util.handleNewInstance(Util.java:425)
	at com.mysql.jdbc.Util.getInstance(Util.java:408)
	at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:936)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3973)
	at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3909)
	at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:2527)
	at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2680)
	at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2484)
	at com.mysql.jdbc.PreparedStatement.executeInternal(PreparedStatement.java:1858)
	at com.mysql.jdbc.PreparedStatement.executeUpdateInternal(PreparedStatement.java:2079)
	at com.mysql.jdbc.PreparedStatement.executeUpdateInternal(PreparedStatement.java:2013)
	at com.mysql.jdbc.PreparedStatement.executeLargeUpdate(PreparedStatement.java:5104)
	at com.mysql.jdbc.PreparedStatement.executeUpdate(PreparedStatement.java:1998)
	at org.hibernate.engine.jdbc.internal.ResultSetReturnImpl.executeUpdate(ResultSetReturnImpl.java:175)
	at org.hibernate.dialect.identity.GetGeneratedKeysDelegate.executeAndExtract(GetGeneratedKeysDelegate.java:57)
	at org.hibernate.id.insert.AbstractReturningDelegate.performInsert(AbstractReturningDelegate.java:42)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:2919)
	at org.hibernate.persister.entity.AbstractEntityPersister.insert(AbstractEntityPersister.java:3490)
	at org.hibernate.action.internal.EntityIdentityInsertAction.execute(EntityIdentityInsertAction.java:81)
	at org.hibernate.engine.spi.ActionQueue.execute(ActionQueue.java:626)
	at org.hibernate.engine.spi.ActionQueue.addResolvedEntityInsertAction(ActionQueue.java:280)
	at org.hibernate.engine.spi.ActionQueue.addInsertAction(ActionQueue.java:261)
	at org.hibernate.engine.spi.ActionQueue.addAction(ActionQueue.java:306)
	at org.hibernate.event.internal.AbstractSaveEventListener.addInsertAction(AbstractSaveEventListener.java:318)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSaveOrReplicate(AbstractSaveEventListener.java:275)
	at org.hibernate.event.internal.AbstractSaveEventListener.performSave(AbstractSaveEventListener.java:182)
	at org.hibernate.event.internal.AbstractSaveEventListener.saveWithGeneratedId(AbstractSaveEventListener.java:113)
	at org.hibernate.jpa.event.internal.core.JpaMergeEventListener.saveWithGeneratedId(JpaMergeEventListener.java:56)
	at org.hibernate.event.internal.DefaultMergeEventListener.saveTransientEntity(DefaultMergeEventListener.java:255)
	at org.hibernate.event.internal.DefaultMergeEventListener.entityIsTransient(DefaultMergeEventListener.java:235)
	at org.hibernate.event.internal.DefaultMergeEventListener.onMerge(DefaultMergeEventListener.java:173)
	at org.hibernate.internal.SessionImpl.fireMerge(SessionImpl.java:905)
	at org.hibernate.internal.SessionImpl.merge(SessionImpl.java:875)
	at org.hibernate.engine.spi.CascadingActions$6.cascade(CascadingActions.java:261)
	at org.hibernate.engine.internal.Cascade.cascadeToOne(Cascade.java:467)
	at org.hibernate.engine.internal.Cascade.cascadeAssociation(Cascade.java:392)
	at org.hibernate.engine.internal.Cascade.cascadeProperty(Cascade.java:193)
	at org.hibernate.engine.internal.Cascade.cascade(Cascade.java:126)
	at org.hibernate.event.internal.AbstractSaveEventListener.cascadeBeforeSave(AbstractSaveEventListener.java:414)
	at org.hibernate.event.internal.DefaultMergeEventListener.entityIsTransient(DefaultMergeEventListener.java:232)
	at org.hibernate.event.internal.DefaultMergeEventListener.onMerge(DefaultMergeEventListener.java:173)
	at org.hibernate.event.internal.DefaultMergeEventListener.onMerge(DefaultMergeEventListener.java:69)
	at org.hibernate.internal.SessionImpl.fireMerge(SessionImpl.java:883)
	at org.hibernate.internal.SessionImpl.merge(SessionImpl.java:869)
	at database.GenericDAO.create(GenericDAO.java:84)
	at test.database.GenerateDummyData.createActivePerson(GenerateDummyData.java:65)
	at test.database.GenerateDummyData.main(GenerateDummyData.java:42)
2017-12-29 20:55:59,034 +0100 [main] WARN  (SqlExceptionHelper.java:129) - SQL Error: 1062, SQLState: 23000
2017-12-29 20:55:59,034 +0100 [main] ERROR (SqlExceptionHelper.java:131) - Duplicate entry 'Bondgenotenlaan-150-1-3000-Leuven-Belgi�' for key 'UC_Address'
2017-12-29 20:55:59,037 +0100 [main] DEBUG (JdbcResourceLocalTransactionCoordinatorImpl.java:266) - JDBC transaction marked for rollback-only (exception provided for stack trace)
java.lang.Exception: exception just for purpose of providing stack trace
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.markRollbackOnly(JdbcResourceLocalTransactionCoordinatorImpl.java:266)
	at org.hibernate.engine.transaction.internal.TransactionImpl.setRollbackOnly(TransactionImpl.java:143)
	at org.hibernate.Transaction.markRollbackOnly(Transaction.java:68)
	at org.hibernate.internal.AbstractSharedSessionContract.markForRollbackOnly(AbstractSharedSessionContract.java:364)
	at org.hibernate.internal.ExceptionConverterImpl.handlePersistenceException(ExceptionConverterImpl.java:273)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:150)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:157)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:164)
	at org.hibernate.internal.SessionImpl.fireMerge(SessionImpl.java:916)
	at org.hibernate.internal.SessionImpl.merge(SessionImpl.java:875)
	at org.hibernate.engine.spi.CascadingActions$6.cascade(CascadingActions.java:261)
	at org.hibernate.engine.internal.Cascade.cascadeToOne(Cascade.java:467)
	at org.hibernate.engine.internal.Cascade.cascadeAssociation(Cascade.java:392)
	at org.hibernate.engine.internal.Cascade.cascadeProperty(Cascade.java:193)
	at org.hibernate.engine.internal.Cascade.cascade(Cascade.java:126)
	at org.hibernate.event.internal.AbstractSaveEventListener.cascadeBeforeSave(AbstractSaveEventListener.java:414)
	at org.hibernate.event.internal.DefaultMergeEventListener.entityIsTransient(DefaultMergeEventListener.java:232)
	at org.hibernate.event.internal.DefaultMergeEventListener.onMerge(DefaultMergeEventListener.java:173)
	at org.hibernate.event.internal.DefaultMergeEventListener.onMerge(DefaultMergeEventListener.java:69)
	at org.hibernate.internal.SessionImpl.fireMerge(SessionImpl.java:883)
	at org.hibernate.internal.SessionImpl.merge(SessionImpl.java:869)
	at database.GenericDAO.create(GenericDAO.java:84)
	at test.database.GenerateDummyData.createActivePerson(GenerateDummyData.java:65)
	at test.database.GenerateDummyData.main(GenerateDummyData.java:42)
2017-12-29 20:55:59,037 +0100 [main] DEBUG (JdbcResourceLocalTransactionCoordinatorImpl.java:266) - JDBC transaction marked for rollback-only (exception provided for stack trace)
java.lang.Exception: exception just for purpose of providing stack trace
	at org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorImpl$TransactionDriverControlImpl.markRollbackOnly(JdbcResourceLocalTransactionCoordinatorImpl.java:266)
	at org.hibernate.engine.transaction.internal.TransactionImpl.setRollbackOnly(TransactionImpl.java:143)
	at org.hibernate.Transaction.markRollbackOnly(Transaction.java:68)
	at org.hibernate.internal.AbstractSharedSessionContract.markForRollbackOnly(AbstractSharedSessionContract.java:364)
	at org.hibernate.internal.ExceptionConverterImpl.convert(ExceptionConverterImpl.java:167)
	at org.hibernate.internal.SessionImpl.fireMerge(SessionImpl.java:895)
	at org.hibernate.internal.SessionImpl.merge(SessionImpl.java:869)
	at database.GenericDAO.create(GenericDAO.java:84)
	at test.database.GenerateDummyData.createActivePerson(GenerateDummyData.java:65)
	at test.database.GenerateDummyData.main(GenerateDummyData.java:42)
2017-12-29 20:57:24,758 +0100 [main] DEBUG (HibernatePersistenceProvider.java:38) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2017-12-29 20:57:24,836 +0100 [main] DEBUG (HibernatePersistenceProvider.java:98) - Located and parsed 1 persistence units; checking each
2017-12-29 20:57:24,838 +0100 [main] DEBUG (HibernatePersistenceProvider.java:106) - Checking persistence-unit [name=Afstandsbediening, explicit-provider=null] against incoming persistence unit name [Afstandsbediening]
2017-12-29 20:57:24,839 +0100 [main] DEBUG (ProviderChecker.java:96) - No PersistenceProvider explicitly requested, assuming Hibernate
2017-12-29 20:57:24,843 +0100 [main] DEBUG (LogHelper.java:102) - PersistenceUnitInfo [
	name: Afstandsbediening
	persistence provider classname: null
	classloader: null
	excludeUnlistedClasses: false
	JTA datasource: null
	Non JTA datasource: null
	Transaction type: RESOURCE_LOCAL
	PU root URL: file:/C:/Users/BenJolien/git/2018-Januari/8-Afstandsbediening/target/classes/
	Shared Cache Mode: null
	Validation Mode: null
	Jar files URLs []
	Managed classes names [
		model.entities.Remote
		model.entities.Person
		model.entities.Address]
	Mapping files names []
	Properties [
		javax.persistence.jdbc.driver: com.mysql.jdbc.Driver
		javax.persistence.jdbc.password: userDB
		javax.persistence.jdbc.url: jdbc:mysql://localhost:3306/DbRemote
		javax.persistence.jdbc.user: userDB]
2017-12-29 20:57:24,853 +0100 [main] DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
2017-12-29 20:57:24,854 +0100 [main] DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
2017-12-29 20:57:24,859 +0100 [main] DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2017-12-29 20:57:24,859 +0100 [main] DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.jpa.event.spi.JpaIntegrator].
2017-12-29 20:57:24,954 +0100 [main] INFO  (Version.java:45) - HHH000412: Hibernate Core {5.2.12.Final}
2017-12-29 20:57:24,956 +0100 [main] INFO  (Environment.java:213) - HHH000206: hibernate.properties not found
2017-12-29 20:57:24,963 +0100 [main] DEBUG (ServiceBinding.java:68) - Overriding existing service binding [org.hibernate.secure.spi.JaccService]
2017-12-29 20:57:24,979 +0100 [main] DEBUG (RegionFactoryInitiator.java:75) - Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
2017-12-29 20:57:24,984 +0100 [main] INFO  (JavaReflectionManager.java:66) - HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
2017-12-29 20:57:25,036 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration boolean -> org.hibernate.type.BooleanType@101df177
2017-12-29 20:57:25,037 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration boolean -> org.hibernate.type.BooleanType@101df177
2017-12-29 20:57:25,038 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@101df177
2017-12-29 20:57:25,039 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@6e2c9341
2017-12-29 20:57:25,040 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration true_false -> org.hibernate.type.TrueFalseType@517cd4b
2017-12-29 20:57:25,041 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration yes_no -> org.hibernate.type.YesNoType@679b62af
2017-12-29 20:57:25,043 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration byte -> org.hibernate.type.ByteType@12028586
2017-12-29 20:57:25,043 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration byte -> org.hibernate.type.ByteType@12028586
2017-12-29 20:57:25,043 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@12028586
2017-12-29 20:57:25,043 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration character -> org.hibernate.type.CharacterType@11c20519
2017-12-29 20:57:25,043 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration char -> org.hibernate.type.CharacterType@11c20519
2017-12-29 20:57:25,043 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@11c20519
2017-12-29 20:57:25,046 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration short -> org.hibernate.type.ShortType@4148db48
2017-12-29 20:57:25,046 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration short -> org.hibernate.type.ShortType@4148db48
2017-12-29 20:57:25,046 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Short -> org.hibernate.type.ShortType@4148db48
2017-12-29 20:57:25,047 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration integer -> org.hibernate.type.IntegerType@5e25a92e
2017-12-29 20:57:25,047 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration int -> org.hibernate.type.IntegerType@5e25a92e
2017-12-29 20:57:25,047 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@5e25a92e
2017-12-29 20:57:25,048 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration long -> org.hibernate.type.LongType@3e77a1ed
2017-12-29 20:57:25,048 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration long -> org.hibernate.type.LongType@3e77a1ed
2017-12-29 20:57:25,048 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Long -> org.hibernate.type.LongType@3e77a1ed
2017-12-29 20:57:25,050 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration float -> org.hibernate.type.FloatType@37574691
2017-12-29 20:57:25,050 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration float -> org.hibernate.type.FloatType@37574691
2017-12-29 20:57:25,050 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Float -> org.hibernate.type.FloatType@37574691
2017-12-29 20:57:25,051 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration double -> org.hibernate.type.DoubleType@6c3f5566
2017-12-29 20:57:25,051 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration double -> org.hibernate.type.DoubleType@6c3f5566
2017-12-29 20:57:25,052 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@6c3f5566
2017-12-29 20:57:25,053 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@6166e06f
2017-12-29 20:57:25,053 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@6166e06f
2017-12-29 20:57:25,054 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration big_integer -> org.hibernate.type.BigIntegerType@641147d0
2017-12-29 20:57:25,055 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@641147d0
2017-12-29 20:57:25,057 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration string -> org.hibernate.type.StringType@6385cb26
2017-12-29 20:57:25,058 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.String -> org.hibernate.type.StringType@6385cb26
2017-12-29 20:57:25,059 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration nstring -> org.hibernate.type.StringNVarcharType@1e9e725a
2017-12-29 20:57:25,060 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@646be2c3
2017-12-29 20:57:25,060 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration url -> org.hibernate.type.UrlType@62bd765
2017-12-29 20:57:25,060 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.net.URL -> org.hibernate.type.UrlType@62bd765
2017-12-29 20:57:25,061 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration Duration -> org.hibernate.type.DurationType@58fdd99
2017-12-29 20:57:25,062 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.Duration -> org.hibernate.type.DurationType@58fdd99
2017-12-29 20:57:25,072 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration Instant -> org.hibernate.type.InstantType@226a82c4
2017-12-29 20:57:25,072 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.Instant -> org.hibernate.type.InstantType@226a82c4
2017-12-29 20:57:25,074 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@64d2d351
2017-12-29 20:57:25,074 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@64d2d351
2017-12-29 20:57:25,075 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration LocalDate -> org.hibernate.type.LocalDateType@51931956
2017-12-29 20:57:25,075 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@51931956
2017-12-29 20:57:25,076 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@6279cee3
2017-12-29 20:57:25,076 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@6279cee3
2017-12-29 20:57:25,077 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@c540f5a
2017-12-29 20:57:25,077 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@c540f5a
2017-12-29 20:57:25,078 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@77e9807f
2017-12-29 20:57:25,078 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@77e9807f
2017-12-29 20:57:25,082 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@36f0f1be
2017-12-29 20:57:25,082 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@36f0f1be
2017-12-29 20:57:25,083 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration date -> org.hibernate.type.DateType@525f1e4e
2017-12-29 20:57:25,083 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.sql.Date -> org.hibernate.type.DateType@525f1e4e
2017-12-29 20:57:25,084 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration time -> org.hibernate.type.TimeType@5d47c63f
2017-12-29 20:57:25,084 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.sql.Time -> org.hibernate.type.TimeType@5d47c63f
2017-12-29 20:57:25,085 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration timestamp -> org.hibernate.type.TimestampType@568bf312
2017-12-29 20:57:25,085 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@568bf312
2017-12-29 20:57:25,085 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.Date -> org.hibernate.type.TimestampType@568bf312
2017-12-29 20:57:25,086 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@45f45fa1
2017-12-29 20:57:25,087 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration calendar -> org.hibernate.type.CalendarType@8e0379d
2017-12-29 20:57:25,087 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@8e0379d
2017-12-29 20:57:25,087 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@8e0379d
2017-12-29 20:57:25,087 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@2145433b
2017-12-29 20:57:25,088 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration locale -> org.hibernate.type.LocaleType@3ec300f1
2017-12-29 20:57:25,088 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@3ec300f1
2017-12-29 20:57:25,089 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration currency -> org.hibernate.type.CurrencyType@75c072cb
2017-12-29 20:57:25,089 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@75c072cb
2017-12-29 20:57:25,090 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration timezone -> org.hibernate.type.TimeZoneType@214b199c
2017-12-29 20:57:25,090 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@214b199c
2017-12-29 20:57:25,090 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration class -> org.hibernate.type.ClassType@12d3a4e9
2017-12-29 20:57:25,091 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Class -> org.hibernate.type.ClassType@12d3a4e9
2017-12-29 20:57:25,091 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@5762806e
2017-12-29 20:57:25,091 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@5762806e
2017-12-29 20:57:25,092 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@5ef60048
2017-12-29 20:57:25,092 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration binary -> org.hibernate.type.BinaryType@50a7bc6e
2017-12-29 20:57:25,093 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration byte[] -> org.hibernate.type.BinaryType@50a7bc6e
2017-12-29 20:57:25,093 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration [B -> org.hibernate.type.BinaryType@50a7bc6e
2017-12-29 20:57:25,093 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@e50a6f6
2017-12-29 20:57:25,093 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@e50a6f6
2017-12-29 20:57:25,093 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@e50a6f6
2017-12-29 20:57:25,094 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration row_version -> org.hibernate.type.RowVersionType@48524010
2017-12-29 20:57:25,095 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration image -> org.hibernate.type.ImageType@6b419da
2017-12-29 20:57:25,095 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration characters -> org.hibernate.type.CharArrayType@55a561cf
2017-12-29 20:57:25,095 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration char[] -> org.hibernate.type.CharArrayType@55a561cf
2017-12-29 20:57:25,095 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration [C -> org.hibernate.type.CharArrayType@55a561cf
2017-12-29 20:57:25,096 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@21507a04
2017-12-29 20:57:25,096 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@21507a04
2017-12-29 20:57:25,096 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@21507a04
2017-12-29 20:57:25,096 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration text -> org.hibernate.type.TextType@436a4e4b
2017-12-29 20:57:25,097 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration ntext -> org.hibernate.type.NTextType@5c1a8622
2017-12-29 20:57:25,099 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration blob -> org.hibernate.type.BlobType@69930714
2017-12-29 20:57:25,099 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@69930714
2017-12-29 20:57:25,099 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@8909f18
2017-12-29 20:57:25,101 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration clob -> org.hibernate.type.ClobType@79ad8b2f
2017-12-29 20:57:25,101 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@79ad8b2f
2017-12-29 20:57:25,103 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration nclob -> org.hibernate.type.NClobType@7692d9cc
2017-12-29 20:57:25,103 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@7692d9cc
2017-12-29 20:57:25,103 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@43ee72e6
2017-12-29 20:57:25,103 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@2805c96b
2017-12-29 20:57:25,104 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration serializable -> org.hibernate.type.SerializableType@37918c79
2017-12-29 20:57:25,106 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration object -> org.hibernate.type.ObjectType@4c1d9d4b
2017-12-29 20:57:25,106 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@4c1d9d4b
2017-12-29 20:57:25,107 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@45018215
2017-12-29 20:57:25,107 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@65d6b83b
2017-12-29 20:57:25,107 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@d706f19
2017-12-29 20:57:25,108 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@30b7c004
2017-12-29 20:57:25,108 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@79efed2d
2017-12-29 20:57:25,108 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@2928854b
2017-12-29 20:57:25,108 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@27ae2fd0
2017-12-29 20:57:25,109 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@29176cc1
2017-12-29 20:57:25,116 +0100 [main] WARN  (DriverManagerConnectionProviderImpl.java:70) - HHH10001002: Using Hibernate built-in connection pool (not for production use!)
2017-12-29 20:57:25,129 +0100 [main] INFO  (DriverManagerConnectionProviderImpl.java:126) - HHH10001005: using driver [com.mysql.jdbc.Driver] at URL [jdbc:mysql://localhost:3306/DbRemote]
2017-12-29 20:57:25,129 +0100 [main] INFO  (DriverManagerConnectionProviderImpl.java:132) - HHH10001001: Connection properties: {user=userDB, password=userDB}
2017-12-29 20:57:25,129 +0100 [main] INFO  (DriverManagerConnectionProviderImpl.java:140) - HHH10001003: Autocommit mode: false
2017-12-29 20:57:25,132 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Initializing Connection pool with 1 Connections
2017-12-29 20:57:25,132 +0100 [main] INFO  (PooledConnections.java:41) - HHH000115: Hibernate connection pool size: 20 (min=1)
2017-12-29 20:57:25,541 +0100 [main] DEBUG (JdbcEnvironmentInitiator.java:72) - Database ->
       name : MySQL
    version : 5.7.20-log
      major : 5
      minor : 7
2017-12-29 20:57:25,541 +0100 [main] DEBUG (JdbcEnvironmentInitiator.java:83) - Driver ->
       name : MySQL Connector Java
    version : mysql-connector-java-5.1.45 ( Revision: 9131eefa398531c7dc98776e8a3fe839e544c5b2 )
      major : 5
      minor : 1
2017-12-29 20:57:25,541 +0100 [main] DEBUG (DelegatingBasicLogger.java:389) - JDBC version : 4.0
2017-12-29 20:57:25,549 +0100 [main] INFO  (Dialect.java:157) - HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2017-12-29 20:57:25,572 +0100 [main] DEBUG (IdentifierHelperBuilder.java:117) - JDBC driver metadata reported database stores quoted identifiers in more than one case
2017-12-29 20:57:25,574 +0100 [main] DEBUG (IdentifierHelperBuilder.java:191) - IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
2017-12-29 20:57:25,653 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2017-12-29 20:57:25,653 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2017-12-29 20:57:25,654 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2017-12-29 20:57:25,654 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2017-12-29 20:57:25,654 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2017-12-29 20:57:25,654 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2017-12-29 20:57:25,655 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2017-12-29 20:57:25,655 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2017-12-29 20:57:25,656 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
2017-12-29 20:57:25,657 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2017-12-29 20:57:25,657 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2017-12-29 20:57:25,658 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
2017-12-29 20:57:25,658 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2017-12-29 20:57:25,659 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2017-12-29 20:57:25,678 +0100 [main] DEBUG (Namespace.java:47) - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2017-12-29 20:57:25,700 +0100 [main] DEBUG (AnnotationBinder.java:511) - Binding entity from annotated class: model.entities.Address
2017-12-29 20:57:25,711 +0100 [main] DEBUG (QueryBinder.java:80) - Binding named query: findUnusedAddress => SELECT a FROM Address a WHERE a.id NOT IN (SELECT p.address.id FROM Person p)
2017-12-29 20:57:25,716 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2017-12-29 20:57:25,719 +0100 [main] DEBUG (EntityBinder.java:419) - Import with entity name Address
2017-12-29 20:57:25,721 +0100 [main] DEBUG (EntityBinder.java:695) - Bind entity model.entities.Address on table address
2017-12-29 20:57:25,733 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=id, insertable=true, updatable=true, unique=false}
2017-12-29 20:57:25,736 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property id with lazy=false
2017-12-29 20:57:25,737 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:id]
2017-12-29 20:57:25,738 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for id
2017-12-29 20:57:25,740 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property id
2017-12-29 20:57:25,743 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=city, insertable=true, updatable=true, unique=false}
2017-12-29 20:57:25,744 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property city with lazy=false
2017-12-29 20:57:25,744 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:city]
2017-12-29 20:57:25,744 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for city
2017-12-29 20:57:25,744 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property city
2017-12-29 20:57:25,745 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=country, insertable=true, updatable=true, unique=false}
2017-12-29 20:57:25,745 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property country with lazy=false
2017-12-29 20:57:25,745 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:country]
2017-12-29 20:57:25,745 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for country
2017-12-29 20:57:25,745 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property country
2017-12-29 20:57:25,745 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=mailBox, insertable=true, updatable=true, unique=false}
2017-12-29 20:57:25,745 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property mailBox with lazy=false
2017-12-29 20:57:25,745 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:mailBox]
2017-12-29 20:57:25,745 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for mailBox
2017-12-29 20:57:25,746 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property mailBox
2017-12-29 20:57:25,746 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=nr, insertable=true, updatable=true, unique=false}
2017-12-29 20:57:25,746 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property nr with lazy=false
2017-12-29 20:57:25,746 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:nr]
2017-12-29 20:57:25,746 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for nr
2017-12-29 20:57:25,746 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property nr
2017-12-29 20:57:25,746 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=postalCode, insertable=true, updatable=true, unique=false}
2017-12-29 20:57:25,746 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property postalCode with lazy=false
2017-12-29 20:57:25,746 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:postalCode]
2017-12-29 20:57:25,747 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for postalCode
2017-12-29 20:57:25,747 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property postalCode
2017-12-29 20:57:25,747 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=street, insertable=true, updatable=true, unique=false}
2017-12-29 20:57:25,747 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property street with lazy=false
2017-12-29 20:57:25,748 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:street]
2017-12-29 20:57:25,748 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for street
2017-12-29 20:57:25,748 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property street
2017-12-29 20:57:25,748 +0100 [main] DEBUG (AnnotationBinder.java:511) - Binding entity from annotated class: model.entities.Remote
2017-12-29 20:57:25,749 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2017-12-29 20:57:25,749 +0100 [main] DEBUG (EntityBinder.java:419) - Import with entity name Remote
2017-12-29 20:57:25,749 +0100 [main] DEBUG (EntityBinder.java:695) - Bind entity model.entities.Remote on table Remote
2017-12-29 20:57:25,750 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Remote), mappingColumn=id, insertable=true, updatable=true, unique=false}
2017-12-29 20:57:25,750 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property id with lazy=false
2017-12-29 20:57:25,750 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Remote:id]
2017-12-29 20:57:25,750 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for id
2017-12-29 20:57:25,750 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property id
2017-12-29 20:57:25,750 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Remote), mappingColumn=frequency, insertable=true, updatable=true, unique=false}
2017-12-29 20:57:25,750 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property frequency with lazy=false
2017-12-29 20:57:25,750 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Remote:frequency]
2017-12-29 20:57:25,751 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for frequency
2017-12-29 20:57:25,751 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property frequency
2017-12-29 20:57:25,751 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Remote), mappingColumn=isActive, insertable=true, updatable=true, unique=false}
2017-12-29 20:57:25,751 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property isActive with lazy=false
2017-12-29 20:57:25,751 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Remote:isActive]
2017-12-29 20:57:25,751 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for isActive
2017-12-29 20:57:25,751 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property isActive
2017-12-29 20:57:25,751 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Remote), mappingColumn=serialNumber, insertable=true, updatable=true, unique=false}
2017-12-29 20:57:25,751 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property serialNumber with lazy=false
2017-12-29 20:57:25,752 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Remote:serialNumber]
2017-12-29 20:57:25,752 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for serialNumber
2017-12-29 20:57:25,752 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property serialNumber
2017-12-29 20:57:25,752 +0100 [main] DEBUG (AnnotationBinder.java:511) - Binding entity from annotated class: model.entities.Person
2017-12-29 20:57:25,752 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2017-12-29 20:57:25,752 +0100 [main] DEBUG (EntityBinder.java:419) - Import with entity name Person
2017-12-29 20:57:25,752 +0100 [main] DEBUG (EntityBinder.java:695) - Bind entity model.entities.Person on table Person
2017-12-29 20:57:25,758 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Person), mappingColumn=id, insertable=true, updatable=true, unique=false}
2017-12-29 20:57:25,758 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property id with lazy=false
2017-12-29 20:57:25,759 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Person:id]
2017-12-29 20:57:25,759 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for id
2017-12-29 20:57:25,759 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property id
2017-12-29 20:57:25,760 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='addressId', referencedColumn='', mappedBy=''}
2017-12-29 20:57:25,760 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Person), mappingColumn=address, insertable=true, updatable=true, unique=false}
2017-12-29 20:57:25,762 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property address
2017-12-29 20:57:25,763 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Person), mappingColumn=endOfContract, insertable=true, updatable=true, unique=false}
2017-12-29 20:57:25,763 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property endOfContract with lazy=false
2017-12-29 20:57:25,763 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Person:endOfContract]
2017-12-29 20:57:25,763 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for endOfContract
2017-12-29 20:57:25,763 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property endOfContract
2017-12-29 20:57:25,763 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Person), mappingColumn=firstname, insertable=true, updatable=true, unique=false}
2017-12-29 20:57:25,763 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property firstname with lazy=false
2017-12-29 20:57:25,764 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Person:firstname]
2017-12-29 20:57:25,764 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for firstname
2017-12-29 20:57:25,764 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property firstname
2017-12-29 20:57:25,764 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Person), mappingColumn=lastname, insertable=true, updatable=true, unique=false}
2017-12-29 20:57:25,764 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property lastname with lazy=false
2017-12-29 20:57:25,764 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Person:lastname]
2017-12-29 20:57:25,764 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for lastname
2017-12-29 20:57:25,765 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property lastname
2017-12-29 20:57:25,765 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='remoteId', referencedColumn='', mappedBy=''}
2017-12-29 20:57:25,765 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Person), mappingColumn=remote, insertable=true, updatable=true, unique=false}
2017-12-29 20:57:25,765 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property remote
2017-12-29 20:57:25,766 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for id
2017-12-29 20:57:25,766 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for city
2017-12-29 20:57:25,766 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for country
2017-12-29 20:57:25,766 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for mailBox
2017-12-29 20:57:25,766 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for nr
2017-12-29 20:57:25,766 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for postalCode
2017-12-29 20:57:25,767 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for street
2017-12-29 20:57:25,767 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for id
2017-12-29 20:57:25,767 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for frequency
2017-12-29 20:57:25,767 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for isActive
2017-12-29 20:57:25,767 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for serialNumber
2017-12-29 20:57:25,767 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for id
2017-12-29 20:57:25,768 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for endOfContract
2017-12-29 20:57:25,768 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for firstname
2017-12-29 20:57:25,768 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for lastname
2017-12-29 20:57:25,770 +0100 [main] DEBUG (PrimaryKey.java:35) - Forcing column [id] to be non-null as it is part of the primary key for table [address]
2017-12-29 20:57:25,770 +0100 [main] DEBUG (PrimaryKey.java:35) - Forcing column [id] to be non-null as it is part of the primary key for table [remote]
2017-12-29 20:57:25,771 +0100 [main] DEBUG (PrimaryKey.java:35) - Forcing column [id] to be non-null as it is part of the primary key for table [person]
2017-12-29 20:57:25,771 +0100 [main] DEBUG (InFlightMetadataCollectorImpl.java:1798) - Resolving reference to class: model.entities.Address
2017-12-29 20:57:25,772 +0100 [main] DEBUG (InFlightMetadataCollectorImpl.java:1798) - Resolving reference to class: model.entities.Remote
2017-12-29 20:57:25,773 +0100 [main] DEBUG (InFlightMetadataCollectorImpl.java:1798) - Resolving reference to class: model.entities.Address
2017-12-29 20:57:25,773 +0100 [main] DEBUG (InFlightMetadataCollectorImpl.java:1798) - Resolving reference to class: model.entities.Remote
2017-12-29 20:57:25,797 +0100 [main] DEBUG (SessionFactoryImpl.java:200) - Building session factory
2017-12-29 20:57:25,797 +0100 [main] DEBUG (Settings.java:69) - SessionFactory name : null
2017-12-29 20:57:25,798 +0100 [main] DEBUG (Settings.java:70) - Automatic flush during beforeCompletion(): enabled
2017-12-29 20:57:25,798 +0100 [main] DEBUG (Settings.java:71) - Automatic session close at end of transaction: disabled
2017-12-29 20:57:25,798 +0100 [main] DEBUG (Settings.java:73) - Statistics: disabled
2017-12-29 20:57:25,798 +0100 [main] DEBUG (Settings.java:75) - Deleted entity synthetic identifier rollback: disabled
2017-12-29 20:57:25,798 +0100 [main] DEBUG (Settings.java:76) - Default entity-mode: pojo
2017-12-29 20:57:25,798 +0100 [main] DEBUG (Settings.java:77) - Check Nullability in Core (should be disabled when Bean Validation is on): enabled
2017-12-29 20:57:25,798 +0100 [main] DEBUG (Settings.java:78) - Allow initialization of lazy state outside session : disabled
2017-12-29 20:57:25,798 +0100 [main] DEBUG (Settings.java:80) - Using BatchFetchStyle : LEGACY
2017-12-29 20:57:25,798 +0100 [main] DEBUG (Settings.java:81) - Default batch fetch size: -1
2017-12-29 20:57:25,799 +0100 [main] DEBUG (Settings.java:82) - Maximum outer join fetch depth: 2
2017-12-29 20:57:25,799 +0100 [main] DEBUG (Settings.java:83) - Default null ordering: NONE
2017-12-29 20:57:25,799 +0100 [main] DEBUG (Settings.java:84) - Order SQL updates by primary key: disabled
2017-12-29 20:57:25,799 +0100 [main] DEBUG (Settings.java:85) - Order SQL inserts for batching: disabled
2017-12-29 20:57:25,799 +0100 [main] DEBUG (Settings.java:87) - multi-tenancy strategy : NONE
2017-12-29 20:57:25,799 +0100 [main] DEBUG (Settings.java:89) - JTA Track by Thread: enabled
2017-12-29 20:57:25,799 +0100 [main] DEBUG (Settings.java:91) - Query language substitutions: {}
2017-12-29 20:57:25,799 +0100 [main] DEBUG (Settings.java:92) - JPA query language strict compliance: disabled
2017-12-29 20:57:25,799 +0100 [main] DEBUG (Settings.java:93) - Named query checking : enabled
2017-12-29 20:57:25,800 +0100 [main] DEBUG (Settings.java:95) - Second-level cache: enabled
2017-12-29 20:57:25,800 +0100 [main] DEBUG (Settings.java:96) - Second-level query cache: disabled
2017-12-29 20:57:25,800 +0100 [main] DEBUG (Settings.java:97) - Second-level query cache factory: org.hibernate.cache.internal.StandardQueryCacheFactory@24c22fe
2017-12-29 20:57:25,800 +0100 [main] DEBUG (Settings.java:98) - Second-level cache region prefix: null
2017-12-29 20:57:25,800 +0100 [main] DEBUG (Settings.java:99) - Optimize second-level cache for minimal puts: disabled
2017-12-29 20:57:25,800 +0100 [main] DEBUG (Settings.java:100) - Structured second-level cache entries: disabled
2017-12-29 20:57:25,800 +0100 [main] DEBUG (Settings.java:101) - Second-level cache direct-reference entries: disabled
2017-12-29 20:57:25,800 +0100 [main] DEBUG (Settings.java:102) - Automatic eviction of collection cache: disabled
2017-12-29 20:57:25,800 +0100 [main] DEBUG (Settings.java:104) - JDBC batch size: 15
2017-12-29 20:57:25,800 +0100 [main] DEBUG (Settings.java:105) - JDBC batch updates for versioned data: enabled
2017-12-29 20:57:25,801 +0100 [main] DEBUG (Settings.java:106) - Scrollable result sets: enabled
2017-12-29 20:57:25,801 +0100 [main] DEBUG (Settings.java:107) - Wrap result sets: disabled
2017-12-29 20:57:25,801 +0100 [main] DEBUG (Settings.java:108) - JDBC3 getGeneratedKeys(): enabled
2017-12-29 20:57:25,801 +0100 [main] DEBUG (Settings.java:109) - JDBC result set fetch size: null
2017-12-29 20:57:25,801 +0100 [main] DEBUG (Settings.java:110) - Connection release mode: AFTER_TRANSACTION
2017-12-29 20:57:25,801 +0100 [main] DEBUG (Settings.java:111) - Generate SQL with comments: disabled
2017-12-29 20:57:25,837 +0100 [main] DEBUG (SessionFactoryImpl.java:258) - Session factory constructed with filter configurations : {}
2017-12-29 20:57:25,837 +0100 [main] DEBUG (SessionFactoryImpl.java:259) - Instantiating session factory with properties: {sun.desktop=windows, awt.toolkit=sun.awt.windows.WToolkit, file.encoding.pkg=sun.io, java.specification.version=1.8, sun.cpu.isalist=amd64, sun.jnu.encoding=Cp1252, java.class.path=C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\log4j-1.2.17.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\mysql-connector-java-5.1.45-bin.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\antlr-2.7.7.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\classmate-1.3.0.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\dom4j-1.6.1.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\hibernate-commons-annotations-5.0.1.Final.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\hibernate-core-5.2.12.Final.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\hibernate-jpa-2.1-api-1.0.0.Final.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\jandex-2.0.3.Final.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\javassist-3.20.0-GA.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\jboss-logging-3.3.0.Final.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\jboss-transaction-api_1.2_spec-1.0.1.Final.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\eclipselink.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\javax.persistence-3.0-prelude-embedded-m2-sources.jar;C:\Users\BenJolien\Desktop\eclipse\plugins\org.junit_4.12.0.v201504281640\junit.jar;C:\Users\BenJolien\Desktop\eclipse\plugins\org.hamcrest.core_1.3.0.v201303031735.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\jcalendar-1.4.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\target\classes;C:\Users\BenJolien\.m2\repository\org\apache\maven\plugins\maven-compiler-plugin\3.7.0\maven-compiler-plugin-3.7.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-plugin-api\3.0\maven-plugin-api-3.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-model\3.0\maven-model-3.0.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\sisu\sisu-inject-plexus\1.4.2\sisu-inject-plexus-1.4.2.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\sisu\sisu-inject-bean\1.4.2\sisu-inject-bean-1.4.2.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\sisu\sisu-guice\2.1.7\sisu-guice-2.1.7-noaop.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-artifact\3.0\maven-artifact-3.0.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-utils\2.0.4\plexus-utils-2.0.4.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-core\3.0\maven-core-3.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-settings\3.0\maven-settings-3.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-settings-builder\3.0\maven-settings-builder-3.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-repository-metadata\3.0\maven-repository-metadata-3.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-model-builder\3.0\maven-model-builder-3.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-aether-provider\3.0\maven-aether-provider-3.0.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\aether\aether-impl\1.7\aether-impl-1.7.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\aether\aether-spi\1.7\aether-spi-1.7.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\aether\aether-api\1.7\aether-api-1.7.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\aether\aether-util\1.7\aether-util-1.7.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-interpolation\1.14\plexus-interpolation-1.14.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-classworlds\2.2.3\plexus-classworlds-2.2.3.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-component-annotations\1.5.5\plexus-component-annotations-1.5.5.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\plexus\plexus-sec-dispatcher\1.3\plexus-sec-dispatcher-1.3.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\plexus\plexus-cipher\1.4\plexus-cipher-1.4.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\shared\maven-shared-utils\3.1.0\maven-shared-utils-3.1.0.jar;C:\Users\BenJolien\.m2\repository\commons-io\commons-io\2.5\commons-io-2.5.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\shared\maven-shared-incremental\1.1\maven-shared-incremental-1.1.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-java\0.9.2\plexus-java-0.9.2.jar;C:\Users\BenJolien\.m2\repository\org\ow2\asm\asm\6.0_BETA\asm-6.0_BETA.jar;C:\Users\BenJolien\.m2\repository\com\thoughtworks\qdox\qdox\2.0-M7\qdox-2.0-M7.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-compiler-api\2.8.2\plexus-compiler-api-2.8.2.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-compiler-manager\2.8.2\plexus-compiler-manager-2.8.2.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-compiler-javac\2.8.2\plexus-compiler-javac-2.8.2.jar;C:\Users\BenJolien\.m2\repository\org\hibernate\hibernate-core\4.2.7.SP1\hibernate-core-4.2.7.SP1.jar;C:\Users\BenJolien\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\BenJolien\.m2\repository\org\jboss\logging\jboss-logging\3.1.0.GA\jboss-logging-3.1.0.GA.jar;C:\Users\BenJolien\.m2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;C:\Users\BenJolien\.m2\repository\org\javassist\javassist\3.18.1-GA\javassist-3.18.1-GA.jar;C:\Users\BenJolien\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.1_spec\1.0.1.Final\jboss-transaction-api_1.1_spec-1.0.1.Final.jar;C:\Users\BenJolien\.m2\repository\org\hibernate\common\hibernate-commons-annotations\4.0.2.Final\hibernate-commons-annotations-4.0.2.Final.jar;C:\Users\BenJolien\.m2\repository\mysql\mysql-connector-java\6.0.6\mysql-connector-java-6.0.6.jar;C:\Users\BenJolien\.m2\repository\org\fluttercode\datafactory\datafactory\0.8\datafactory-0.8.jar;C:\Users\BenJolien\.m2\repository\org\hibernate\javax\persistence\hibernate-jpa-2.0-api\1.0.1.Final\hibernate-jpa-2.0-api-1.0.1.Final.jar, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=http://java.oracle.com/, user.timezone=Europe/Berlin, javax.persistence.jdbc.user=****, javax.persistence.jdbc.url=jdbc:mysql://localhost:3306/DbRemote, os.name=Windows 10, java.vm.specification.version=1.8, user.country=BE, sun.java.launcher=SUN_STANDARD, sun.boot.library.path=C:\Program Files\Java\jre1.8.0_144\bin, sun.java.command=test.database.GenerateDummyData, sun.cpu.endian=little, user.home=C:\Users\BenJolien, user.language=nl, java.specification.vendor=Oracle Corporation, java.home=C:\Program Files\Java\jre1.8.0_144, file.separator=\, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, hibernate.transaction.coordinator_class=class org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorBuilderImpl, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, javax.persistence.jdbc.driver=com.mysql.jdbc.Driver, sun.boot.class.path=C:\Program Files\Java\jre1.8.0_144\lib\resources.jar;C:\Program Files\Java\jre1.8.0_144\lib\rt.jar;C:\Program Files\Java\jre1.8.0_144\lib\sunrsasign.jar;C:\Program Files\Java\jre1.8.0_144\lib\jsse.jar;C:\Program Files\Java\jre1.8.0_144\lib\jce.jar;C:\Program Files\Java\jre1.8.0_144\lib\charsets.jar;C:\Program Files\Java\jre1.8.0_144\lib\jfr.jar;C:\Program Files\Java\jre1.8.0_144\classes, user.script=, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=1.8.0_144-b01, user.name=BenJolien, path.separator=;, hibernate.connection.username=userDB, os.version=10.0, java.endorsed.dirs=C:\Program Files\Java\jre1.8.0_144\lib\endorsed, java.runtime.name=Java(TM) SE Runtime Environment, hibernate.connection.url=jdbc:mysql://localhost:3306/DbRemote, hibernate.ejb.persistenceUnitName=Afstandsbediening, file.encoding=UTF-8, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.connection.driver_class=com.mysql.jdbc.Driver, java.vendor.url.bug=http://bugreport.sun.com/bugreport/, java.io.tmpdir=C:\Users\BENJOL~1\AppData\Local\Temp\, java.version=1.8.0_144, user.dir=C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, hibernate.connection.password=****, java.awt.printerjob=sun.awt.windows.WPrinterJob, sun.os.patch.level=, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@3b8f0a79, java.library.path=C:\Program Files\Java\jre1.8.0_144\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:/Program Files/Java/jre1.8.0_151/bin/server;C:/Program Files/Java/jre1.8.0_151/bin;C:/Program Files/Java/jre1.8.0_151/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Program Files\Microsoft MPI\Bin\;C:\Program Files (x86)\Intel\iCLS Client\;C:\Program Files\Intel\iCLS Client\;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files (x86)\Windows Kits\10\Windows Performance Toolkit\;C:\Program Files\dotnet\;C:\Program Files\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files (x86)\GtkSharp\2.12\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\nodejs\;C:\Program Files\Microsoft\Web Platform Installer\;C:\Program Files\Microsoft SQL Server\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\110\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\110\DTS\Binn\;C:\Program Files\Microsoft SQL Server\110\DTS\Binn\;C:\Program Files (x86)\Microsoft SQL Server\Client SDK\ODBC\130\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\130\DTS\Binn\;C:\Program Files (x86)\Microsoft SQL Server\130\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files (x86)\scala\bin;C:\Program Files\ibm\gsk8\lib64;C:\Program Files (x86)\ibm\gsk8\lib;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Brackets\command;C:\Program Files\Git\cmd;C:\Program Files\MySQL\MySQL Utilities 1.6\;C:\Users\BenJolien\AppData\Local\Microsoft\WindowsApps;C:\Users\BenJolien\AppData\Roaming\npm;;C:\Users\BenJolien\Desktop\eclipse;;., java.vm.info=mixed mode, java.vendor=Oracle Corporation, java.vm.version=25.144-b01, hibernate.bytecode.use_reflection_optimizer=false, java.ext.dirs=C:\Program Files\Java\jre1.8.0_144\lib\ext;C:\WINDOWS\Sun\Java\lib\ext, sun.io.unicode.encoding=UnicodeLittle, javax.persistence.jdbc.password=userDB, java.class.version=52.0}
2017-12-29 20:57:25,845 +0100 [main] DEBUG (JaccIntegrator.java:80) - Skipping JACC integration as it was not enabled
2017-12-29 20:57:25,846 +0100 [main] DEBUG (CascadeStyles.java:268) - External cascade style registration [persist : STYLE_PERSIST_SKIPLAZY] overrode base registration [STYLE_PERSIST]
2017-12-29 20:57:25,890 +0100 [main] DEBUG (SessionFactoryImpl.java:298) - Instantiated session factory
2017-12-29 20:57:25,913 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:55) - Not known whether passed class name [model.entities.Address] is safe
2017-12-29 20:57:25,913 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:57) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.entities.Address
2017-12-29 20:57:25,921 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:55) - Not known whether passed class name [model.entities.Address] is safe
2017-12-29 20:57:25,921 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:57) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.entities.Address
2017-12-29 20:57:25,947 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:55) - Not known whether passed class name [model.entities.Remote] is safe
2017-12-29 20:57:25,947 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:57) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.entities.Remote
2017-12-29 20:57:25,947 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:55) - Not known whether passed class name [model.entities.Remote] is safe
2017-12-29 20:57:25,947 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:57) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.entities.Remote
2017-12-29 20:57:25,950 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:55) - Not known whether passed class name [model.entities.Person] is safe
2017-12-29 20:57:25,950 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:57) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.entities.Person
2017-12-29 20:57:25,953 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:55) - Not known whether passed class name [model.entities.Person] is safe
2017-12-29 20:57:25,953 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:57) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.entities.Person
2017-12-29 20:57:25,961 +0100 [main] DEBUG (AbstractEntityPersister.java:3608) - Static SQL for entity: model.entities.Address
2017-12-29 20:57:25,961 +0100 [main] DEBUG (AbstractEntityPersister.java:3613) -  Version select: select id from address where id =?
2017-12-29 20:57:25,961 +0100 [main] DEBUG (AbstractEntityPersister.java:3616) -  Snapshot select: select address_.id, address_.city as city2_0_, address_.country as country3_0_, address_.mailBox as mailBox4_0_, address_.nr as nr5_0_, address_.postalCode as postalCo6_0_, address_.street as street7_0_ from address address_ where address_.id=?
2017-12-29 20:57:25,961 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into address (city, country, mailBox, nr, postalCode, street, id) values (?, ?, ?, ?, ?, ?, ?)
2017-12-29 20:57:25,961 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update address set city=?, country=?, mailBox=?, nr=?, postalCode=?, street=? where id=?
2017-12-29 20:57:25,961 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from address where id=?
2017-12-29 20:57:25,961 +0100 [main] DEBUG (AbstractEntityPersister.java:3624) -  Identity insert: insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 20:57:25,972 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@363042d7]
2017-12-29 20:57:25,973 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 20:57:25,974 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 20:57:25,974 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 20:57:25,974 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 20:57:25,974 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 20:57:25,974 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 20:57:25,974 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:57:25,981 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:57:25,983 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 20:57:25,984 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [NONE]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 20:57:25,984 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3700ec9c]
2017-12-29 20:57:25,985 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 20:57:25,985 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 20:57:25,985 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 20:57:25,985 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 20:57:25,985 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 20:57:25,985 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 20:57:25,985 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:57:25,985 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:57:25,985 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 20:57:25,985 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [READ]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 20:57:25,986 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5911e990]
2017-12-29 20:57:25,986 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 20:57:25,986 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 20:57:25,986 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 20:57:25,986 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 20:57:25,986 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 20:57:25,986 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 20:57:25,986 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:57:25,986 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:57:25,986 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 20:57:25,986 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [UPGRADE]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? for update
2017-12-29 20:57:25,987 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1d470d0]
2017-12-29 20:57:25,987 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 20:57:25,987 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 20:57:25,987 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 20:57:25,987 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 20:57:25,987 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 20:57:25,987 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 20:57:25,987 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:57:25,987 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:57:25,987 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 20:57:25,988 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [UPGRADE_NOWAIT]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? for update
2017-12-29 20:57:25,988 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@54c62d71]
2017-12-29 20:57:25,988 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 20:57:25,988 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 20:57:25,988 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 20:57:25,988 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 20:57:25,988 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 20:57:25,988 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 20:57:25,988 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:57:25,988 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:57:25,989 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 20:57:25,989 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [UPGRADE_SKIPLOCKED]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? for update
2017-12-29 20:57:25,989 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@47f4e407]
2017-12-29 20:57:25,989 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 20:57:25,989 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 20:57:25,989 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 20:57:25,989 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 20:57:25,989 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 20:57:25,989 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 20:57:25,989 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:57:25,990 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:57:25,990 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 20:57:25,990 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [FORCE]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? for update
2017-12-29 20:57:25,990 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@48d5f34e]
2017-12-29 20:57:25,990 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 20:57:25,990 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 20:57:25,991 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 20:57:25,991 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 20:57:25,991 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 20:57:25,992 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 20:57:25,992 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:57:25,994 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:57:25,994 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 20:57:25,995 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [PESSIMISTIC_READ]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? lock in share mode
2017-12-29 20:57:25,995 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6ff65192]
2017-12-29 20:57:25,995 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 20:57:25,995 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 20:57:25,996 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 20:57:25,996 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 20:57:25,996 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 20:57:25,996 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 20:57:25,996 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:57:25,996 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:57:25,996 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 20:57:25,996 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [PESSIMISTIC_WRITE]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? for update
2017-12-29 20:57:25,996 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4af0df05]
2017-12-29 20:57:25,997 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 20:57:25,997 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 20:57:25,997 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 20:57:25,997 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 20:57:25,997 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 20:57:25,997 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 20:57:25,997 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:57:25,998 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:57:25,998 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 20:57:25,998 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [PESSIMISTIC_FORCE_INCREMENT]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? for update
2017-12-29 20:57:25,998 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@acdb094]
2017-12-29 20:57:25,998 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 20:57:25,999 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 20:57:25,999 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 20:57:25,999 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 20:57:25,999 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 20:57:25,999 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 20:57:25,999 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:57:25,999 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:57:26,000 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 20:57:26,000 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [OPTIMISTIC]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 20:57:26,000 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2b0f373b]
2017-12-29 20:57:26,000 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 20:57:26,000 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 20:57:26,000 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 20:57:26,000 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 20:57:26,000 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 20:57:26,000 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 20:57:26,001 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:57:26,001 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:57:26,001 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 20:57:26,001 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [OPTIMISTIC_FORCE_INCREMENT]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 20:57:26,009 +0100 [main] DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity model.entities.Address: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 20:57:26,009 +0100 [main] DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity model.entities.Address: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 20:57:26,009 +0100 [main] DEBUG (AbstractEntityPersister.java:3608) - Static SQL for entity: model.entities.Remote
2017-12-29 20:57:26,009 +0100 [main] DEBUG (AbstractEntityPersister.java:3613) -  Version select: select id from Remote where id =?
2017-12-29 20:57:26,009 +0100 [main] DEBUG (AbstractEntityPersister.java:3616) -  Snapshot select: select remote_.id, remote_.frequency as frequenc2_2_, remote_.isActive as isActive3_2_, remote_.serialNumber as serialNu4_2_ from Remote remote_ where remote_.id=?
2017-12-29 20:57:26,009 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into Remote (frequency, isActive, serialNumber, id) values (?, ?, ?, ?)
2017-12-29 20:57:26,010 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update Remote set frequency=?, isActive=?, serialNumber=? where id=?
2017-12-29 20:57:26,010 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from Remote where id=?
2017-12-29 20:57:26,010 +0100 [main] DEBUG (AbstractEntityPersister.java:3624) -  Identity insert: insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 20:57:26,010 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4c550889]
2017-12-29 20:57:26,010 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 20:57:26,010 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 20:57:26,010 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 20:57:26,010 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:57:26,010 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:57:26,010 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 20:57:26,010 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [NONE]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 20:57:26,011 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@44040454]
2017-12-29 20:57:26,011 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 20:57:26,011 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 20:57:26,011 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 20:57:26,011 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:57:26,011 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:57:26,011 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 20:57:26,011 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [READ]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 20:57:26,011 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@18bc345]
2017-12-29 20:57:26,012 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 20:57:26,012 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 20:57:26,012 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 20:57:26,012 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:57:26,012 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:57:26,012 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 20:57:26,012 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [UPGRADE]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? for update
2017-12-29 20:57:26,013 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@26bab2f1]
2017-12-29 20:57:26,013 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 20:57:26,013 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 20:57:26,013 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 20:57:26,013 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:57:26,013 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:57:26,014 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 20:57:26,015 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [UPGRADE_NOWAIT]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? for update
2017-12-29 20:57:26,015 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@68ead359]
2017-12-29 20:57:26,015 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 20:57:26,016 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 20:57:26,016 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 20:57:26,016 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:57:26,016 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:57:26,017 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 20:57:26,017 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [UPGRADE_SKIPLOCKED]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? for update
2017-12-29 20:57:26,017 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@a43ce46]
2017-12-29 20:57:26,017 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 20:57:26,017 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 20:57:26,017 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 20:57:26,018 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:57:26,018 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:57:26,018 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 20:57:26,018 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [FORCE]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? for update
2017-12-29 20:57:26,018 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@424ebba3]
2017-12-29 20:57:26,019 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 20:57:26,019 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 20:57:26,019 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 20:57:26,019 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:57:26,019 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:57:26,020 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 20:57:26,020 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [PESSIMISTIC_READ]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? lock in share mode
2017-12-29 20:57:26,020 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2320fa6f]
2017-12-29 20:57:26,020 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 20:57:26,020 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 20:57:26,020 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 20:57:26,020 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:57:26,020 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:57:26,020 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 20:57:26,021 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [PESSIMISTIC_WRITE]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? for update
2017-12-29 20:57:26,021 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4d722ac9]
2017-12-29 20:57:26,021 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 20:57:26,021 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 20:57:26,021 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 20:57:26,021 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:57:26,022 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:57:26,022 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 20:57:26,022 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [PESSIMISTIC_FORCE_INCREMENT]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? for update
2017-12-29 20:57:26,022 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@77a7cf58]
2017-12-29 20:57:26,022 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 20:57:26,022 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 20:57:26,022 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 20:57:26,022 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:57:26,022 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:57:26,023 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 20:57:26,023 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [OPTIMISTIC]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 20:57:26,023 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@616fe72b]
2017-12-29 20:57:26,023 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 20:57:26,023 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 20:57:26,023 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 20:57:26,023 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:57:26,024 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:57:26,024 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 20:57:26,024 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [OPTIMISTIC_FORCE_INCREMENT]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 20:57:26,024 +0100 [main] DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity model.entities.Remote: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 20:57:26,025 +0100 [main] DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity model.entities.Remote: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 20:57:26,025 +0100 [main] DEBUG (AbstractEntityPersister.java:3608) - Static SQL for entity: model.entities.Person
2017-12-29 20:57:26,025 +0100 [main] DEBUG (AbstractEntityPersister.java:3613) -  Version select: select id from Person where id =?
2017-12-29 20:57:26,025 +0100 [main] DEBUG (AbstractEntityPersister.java:3616) -  Snapshot select: select person_.id, person_.addressId as addressI5_1_, person_.endOfContract as endOfCon2_1_, person_.firstname as firstnam3_1_, person_.lastname as lastname4_1_, person_.remoteId as remoteId6_1_ from Person person_ where person_.id=?
2017-12-29 20:57:26,025 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into Person (addressId, endOfContract, firstname, lastname, remoteId, id) values (?, ?, ?, ?, ?, ?)
2017-12-29 20:57:26,025 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update Person set addressId=?, endOfContract=?, firstname=?, lastname=?, remoteId=? where id=?
2017-12-29 20:57:26,025 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from Person where id=?
2017-12-29 20:57:26,025 +0100 [main] DEBUG (AbstractEntityPersister.java:3624) -  Identity insert: insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 20:57:26,025 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7e7b159b]
2017-12-29 20:57:26,026 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 20:57:26,029 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5cbe877d]
2017-12-29 20:57:26,031 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.city
2017-12-29 20:57:26,031 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.country
2017-12-29 20:57:26,031 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.mailBox
2017-12-29 20:57:26,031 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.nr
2017-12-29 20:57:26,032 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.postalCode
2017-12-29 20:57:26,032 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.street
2017-12-29 20:57:26,032 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 20:57:26,032 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 20:57:26,032 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 20:57:26,032 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 20:57:26,032 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3cc41abc]
2017-12-29 20:57:26,033 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote.frequency
2017-12-29 20:57:26,033 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote.isActive
2017-12-29 20:57:26,033 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote.serialNumber
2017-12-29 20:57:26,033 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:57:26,033 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:57:26,034 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}
          - JOIN (JoinDefinedByMetadata(address)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=model.entities.Address)
                - SQL table alias mapping - address1_
                - alias suffix - 1_
                - suffixed key columns - {id1_0_1_}
          - JOIN (JoinDefinedByMetadata(remote)) : <gen:0> -> <gen:2>
             - EntityQuerySpaceImpl(uid=<gen:2>, entity=model.entities.Remote)
                - SQL table alias mapping - remote2_
                - alias suffix - 2_
                - suffixed key columns - {id1_2_2_}

2017-12-29 20:57:26,035 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [NONE]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.mailBox as mailBox4_0_1_, address1_.nr as nr5_0_1_, address1_.postalCode as postalCo6_0_1_, address1_.street as street7_0_1_, remote2_.id as id1_2_2_, remote2_.frequency as frequenc2_2_2_, remote2_.isActive as isActive3_2_2_, remote2_.serialNumber as serialNu4_2_2_ from Person person0_ left outer join address address1_ on person0_.addressId=address1_.id left outer join Remote remote2_ on person0_.remoteId=remote2_.id where person0_.id=?
2017-12-29 20:57:26,035 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1c3b9394]
2017-12-29 20:57:26,035 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 20:57:26,035 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7f6f61c8]
2017-12-29 20:57:26,035 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.city
2017-12-29 20:57:26,035 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.country
2017-12-29 20:57:26,036 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.mailBox
2017-12-29 20:57:26,036 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.nr
2017-12-29 20:57:26,036 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.postalCode
2017-12-29 20:57:26,036 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.street
2017-12-29 20:57:26,036 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 20:57:26,036 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 20:57:26,036 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 20:57:26,036 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 20:57:26,037 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@ccb4b1b]
2017-12-29 20:57:26,037 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote.frequency
2017-12-29 20:57:26,037 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote.isActive
2017-12-29 20:57:26,037 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote.serialNumber
2017-12-29 20:57:26,037 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:57:26,037 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:57:26,039 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}
          - JOIN (JoinDefinedByMetadata(address)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=model.entities.Address)
                - SQL table alias mapping - address1_
                - alias suffix - 1_
                - suffixed key columns - {id1_0_1_}
          - JOIN (JoinDefinedByMetadata(remote)) : <gen:0> -> <gen:2>
             - EntityQuerySpaceImpl(uid=<gen:2>, entity=model.entities.Remote)
                - SQL table alias mapping - remote2_
                - alias suffix - 2_
                - suffixed key columns - {id1_2_2_}

2017-12-29 20:57:26,039 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [READ]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.mailBox as mailBox4_0_1_, address1_.nr as nr5_0_1_, address1_.postalCode as postalCo6_0_1_, address1_.street as street7_0_1_, remote2_.id as id1_2_2_, remote2_.frequency as frequenc2_2_2_, remote2_.isActive as isActive3_2_2_, remote2_.serialNumber as serialNu4_2_2_ from Person person0_ left outer join address address1_ on person0_.addressId=address1_.id left outer join Remote remote2_ on person0_.remoteId=remote2_.id where person0_.id=?
2017-12-29 20:57:26,039 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@ec2cc4]
2017-12-29 20:57:26,039 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 20:57:26,040 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7c1e2a2d]
2017-12-29 20:57:26,040 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 20:57:26,040 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 20:57:26,040 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 20:57:26,040 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 20:57:26,040 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@333dd51e]
2017-12-29 20:57:26,040 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:57:26,040 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:57:26,041 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 20:57:26,041 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [UPGRADE]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? for update
2017-12-29 20:57:26,041 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@52d645b1]
2017-12-29 20:57:26,041 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 20:57:26,041 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2cc3ad05]
2017-12-29 20:57:26,042 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 20:57:26,042 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 20:57:26,042 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 20:57:26,042 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 20:57:26,042 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@710b18a6]
2017-12-29 20:57:26,042 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:57:26,042 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:57:26,043 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 20:57:26,043 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [UPGRADE_NOWAIT]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? for update
2017-12-29 20:57:26,043 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@119020fb]
2017-12-29 20:57:26,043 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 20:57:26,043 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@c055c54]
2017-12-29 20:57:26,043 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 20:57:26,043 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 20:57:26,043 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 20:57:26,043 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 20:57:26,044 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@25e2ab5a]
2017-12-29 20:57:26,044 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:57:26,044 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:57:26,044 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 20:57:26,044 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [UPGRADE_SKIPLOCKED]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? for update
2017-12-29 20:57:26,045 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@35e5d0e5]
2017-12-29 20:57:26,045 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 20:57:26,045 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@55562aa9]
2017-12-29 20:57:26,045 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 20:57:26,045 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 20:57:26,045 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 20:57:26,046 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 20:57:26,052 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@655ef322]
2017-12-29 20:57:26,052 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:57:26,053 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:57:26,053 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 20:57:26,054 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [FORCE]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? for update
2017-12-29 20:57:26,054 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7e276594]
2017-12-29 20:57:26,054 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 20:57:26,055 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5066d65f]
2017-12-29 20:57:26,055 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 20:57:26,055 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 20:57:26,055 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 20:57:26,055 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 20:57:26,056 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4233e892]
2017-12-29 20:57:26,056 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:57:26,056 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:57:26,059 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 20:57:26,060 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [PESSIMISTIC_READ]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? lock in share mode
2017-12-29 20:57:26,060 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@77d2e85]
2017-12-29 20:57:26,060 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 20:57:26,060 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@58ffcbd7]
2017-12-29 20:57:26,060 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 20:57:26,060 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 20:57:26,060 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 20:57:26,060 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 20:57:26,061 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@555cf22]
2017-12-29 20:57:26,061 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:57:26,061 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:57:26,062 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 20:57:26,062 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [PESSIMISTIC_WRITE]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? for update
2017-12-29 20:57:26,062 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6bb2d00b]
2017-12-29 20:57:26,062 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 20:57:26,062 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1a9c38eb]
2017-12-29 20:57:26,062 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 20:57:26,062 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 20:57:26,062 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 20:57:26,063 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 20:57:26,063 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@319bc845]
2017-12-29 20:57:26,063 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:57:26,064 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:57:26,064 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 20:57:26,065 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [PESSIMISTIC_FORCE_INCREMENT]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? for update
2017-12-29 20:57:26,065 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4c5474f5]
2017-12-29 20:57:26,065 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 20:57:26,065 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@54e22bdd]
2017-12-29 20:57:26,065 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 20:57:26,065 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 20:57:26,066 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 20:57:26,066 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 20:57:26,066 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3bd418e4]
2017-12-29 20:57:26,066 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:57:26,066 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:57:26,067 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 20:57:26,067 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [OPTIMISTIC]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=?
2017-12-29 20:57:26,067 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@544820b7]
2017-12-29 20:57:26,067 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 20:57:26,067 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2e61d218]
2017-12-29 20:57:26,068 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 20:57:26,068 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 20:57:26,068 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 20:57:26,068 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 20:57:26,068 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3569fc08]
2017-12-29 20:57:26,068 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 20:57:26,069 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 20:57:26,069 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 20:57:26,069 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [OPTIMISTIC_FORCE_INCREMENT]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=?
2017-12-29 20:57:26,070 +0100 [main] DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity model.entities.Person: select person0_.id as id1_1_2_, person0_.addressId as addressI5_1_2_, person0_.endOfContract as endOfCon2_1_2_, person0_.firstname as firstnam3_1_2_, person0_.lastname as lastname4_1_2_, person0_.remoteId as remoteId6_1_2_, address1_.id as id1_0_0_, address1_.city as city2_0_0_, address1_.country as country3_0_0_, address1_.mailBox as mailBox4_0_0_, address1_.nr as nr5_0_0_, address1_.postalCode as postalCo6_0_0_, address1_.street as street7_0_0_, remote2_.id as id1_2_1_, remote2_.frequency as frequenc2_2_1_, remote2_.isActive as isActive3_2_1_, remote2_.serialNumber as serialNu4_2_1_ from Person person0_ left outer join address address1_ on person0_.addressId=address1_.id left outer join Remote remote2_ on person0_.remoteId=remote2_.id where person0_.id=?
2017-12-29 20:57:26,071 +0100 [main] DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity model.entities.Person: select person0_.id as id1_1_2_, person0_.addressId as addressI5_1_2_, person0_.endOfContract as endOfCon2_1_2_, person0_.firstname as firstnam3_1_2_, person0_.lastname as lastname4_1_2_, person0_.remoteId as remoteId6_1_2_, address1_.id as id1_0_0_, address1_.city as city2_0_0_, address1_.country as country3_0_0_, address1_.mailBox as mailBox4_0_0_, address1_.nr as nr5_0_0_, address1_.postalCode as postalCo6_0_0_, address1_.street as street7_0_0_, remote2_.id as id1_2_1_, remote2_.frequency as frequenc2_2_1_, remote2_.isActive as isActive3_2_1_, remote2_.serialNumber as serialNu4_2_1_ from Person person0_ left outer join address address1_ on person0_.addressId=address1_.id left outer join Remote remote2_ on person0_.remoteId=remote2_.id where person0_.id=?
2017-12-29 20:57:26,090 +0100 [main] DEBUG (SchemaManagementToolCoordinator.java:56) - No actions specified; doing nothing
2017-12-29 20:57:26,090 +0100 [main] DEBUG (JtaPlatformInitiator.java:42) - No JtaPlatform was specified, checking resolver
2017-12-29 20:57:26,091 +0100 [main] DEBUG (JtaPlatformResolverInitiator.java:33) - No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
2017-12-29 20:57:26,095 +0100 [main] DEBUG (StandardJtaPlatformResolver.java:102) - Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2017-12-29 20:57:26,096 +0100 [main] DEBUG (NamedQueryRepository.java:151) - Checking 1 named HQL queries
2017-12-29 20:57:26,096 +0100 [main] DEBUG (NamedQueryRepository.java:155) - Checking named query: findUnusedAddress
2017-12-29 20:57:26,102 +0100 [main] DEBUG (QueryTranslatorFactoryInitiator.java:45) - QueryTranslatorFactory : org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory@3543df7d
2017-12-29 20:57:26,114 +0100 [main] INFO  (QueryTranslatorFactoryInitiator.java:47) - HHH000397: Using ASTQueryTranslatorFactory
2017-12-29 20:57:26,143 +0100 [main] DEBUG (QueryTranslatorImpl.java:282) - parse() - HQL: SELECT a FROM model.entities.Address a WHERE a.id NOT IN (SELECT p.address.id FROM model.entities.Person p)
2017-12-29 20:57:26,150 +0100 [main] DEBUG (ErrorCounter.java:95) - throwQueryException() : no errors
2017-12-29 20:57:26,153 +0100 [main] DEBUG (QueryTranslatorImpl.java:305) - --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'FROM'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[IDENT] Node: 'model'
    |  |     |  |  \-[IDENT] Node: 'entities'
    |  |     |  \-[IDENT] Node: 'Address'
    |  |     \-[ALIAS] Node: 'a'
    |  \-[SELECT] Node: 'SELECT'
    |     \-[IDENT] Node: 'a'
    \-[WHERE] Node: 'WHERE'
       \-[NOT_IN] Node: 'not in'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'a'
          |  \-[IDENT] Node: 'id'
          \-[IN_LIST] Node: 'inList'
             \-[QUERY] Node: 'query'
                \-[SELECT_FROM] Node: 'SELECT_FROM'
                   +-[FROM] Node: 'FROM'
                   |  \-[RANGE] Node: 'RANGE'
                   |     +-[DOT] Node: '.'
                   |     |  +-[DOT] Node: '.'
                   |     |  |  +-[IDENT] Node: 'model'
                   |     |  |  \-[IDENT] Node: 'entities'
                   |     |  \-[IDENT] Node: 'Person'
                   |     \-[ALIAS] Node: 'p'
                   \-[SELECT] Node: 'SELECT'
                      \-[DOT] Node: '.'
                         +-[DOT] Node: '.'
                         |  +-[IDENT] Node: 'p'
                         |  \-[IDENT] Node: 'address'
                         \-[IDENT] Node: 'id'

2017-12-29 20:57:26,179 +0100 [main] DEBUG (HqlSqlBaseWalker.java:124) - select << begin [level=1, statement=select]
2017-12-29 20:57:26,188 +0100 [main] DEBUG (FromElement.java:147) - FromClause{level=1} : model.entities.Address (a) -> address0_
2017-12-29 20:57:26,189 +0100 [main] DEBUG (FromReferenceNode.java:60) - Resolved : a -> address0_.id
2017-12-29 20:57:26,191 +0100 [main] DEBUG (FromReferenceNode.java:60) - Resolved : a -> address0_.id
2017-12-29 20:57:26,193 +0100 [main] DEBUG (DotNode.java:666) - getDataType() : id -> org.hibernate.type.IntegerType@5e25a92e
2017-12-29 20:57:26,193 +0100 [main] DEBUG (FromReferenceNode.java:60) - Resolved : a.id -> address0_.id
2017-12-29 20:57:26,194 +0100 [main] DEBUG (HqlSqlBaseWalker.java:124) - select << begin [level=2, statement=select]
2017-12-29 20:57:26,194 +0100 [main] DEBUG (FromElement.java:147) - FromClause{level=2} : model.entities.Person (p) -> person1_
2017-12-29 20:57:26,195 +0100 [main] DEBUG (FromReferenceNode.java:60) - Resolved : p -> person1_.id
2017-12-29 20:57:26,195 +0100 [main] DEBUG (DotNode.java:666) - getDataType() : address -> org.hibernate.type.ManyToOneType(model.entities.Address)
2017-12-29 20:57:26,195 +0100 [main] DEBUG (DotNode.java:625) - dereferenceShortcut() : property id in model.entities.Person does not require a join.
2017-12-29 20:57:26,195 +0100 [main] DEBUG (DotNode.java:650) - Unresolved property path is now 'address.id'
2017-12-29 20:57:26,195 +0100 [main] DEBUG (FromReferenceNode.java:60) - Resolved : p.address -> person1_.addressId
2017-12-29 20:57:26,196 +0100 [main] DEBUG (DotNode.java:666) - getDataType() : address.id -> org.hibernate.type.IntegerType@5e25a92e
2017-12-29 20:57:26,196 +0100 [main] DEBUG (FromReferenceNode.java:60) - Resolved : p.address.id -> person1_.addressId
2017-12-29 20:57:26,196 +0100 [main] DEBUG (HqlSqlBaseWalker.java:128) - select : finishing up [level=2, statement=select]
2017-12-29 20:57:26,196 +0100 [main] DEBUG (HqlSqlWalker.java:747) - processQuery() :  ( SELECT ( {select clause} ( person1_.addressId ( person1_.addressId person1_.id address ) id ) ) ( FromClause{level=2} Person person1_ ) )
2017-12-29 20:57:26,200 +0100 [main] DEBUG (JoinProcessor.java:192) - Using FROM fragment [Person person1_]
2017-12-29 20:57:26,200 +0100 [main] DEBUG (HqlSqlBaseWalker.java:132) - select >> end [level=2, statement=select]
2017-12-29 20:57:26,201 +0100 [main] DEBUG (HqlSqlBaseWalker.java:128) - select : finishing up [level=1, statement=select]
2017-12-29 20:57:26,202 +0100 [main] DEBUG (HqlSqlWalker.java:747) - processQuery() :  ( SELECT ( {select clause} address0_.id ) ( FromClause{level=1} address address0_ ) ( WHERE ( not in ( address0_.id address0_.id id ) ( inList ( SELECT ( {select clause} ( person1_.addressId ( person1_.addressId person1_.id address ) id ) ) ( FromClause{level=2} Person person1_ ) ) ) ) ) )
2017-12-29 20:57:26,203 +0100 [main] DEBUG (JoinProcessor.java:192) - Using FROM fragment [address address0_]
2017-12-29 20:57:26,203 +0100 [main] DEBUG (HqlSqlBaseWalker.java:132) - select >> end [level=1, statement=select]
2017-12-29 20:57:26,203 +0100 [main] DEBUG (QueryTranslatorImpl.java:269) - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (address,Person)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'address0_.id as id1_0_' {alias=a, className=model.entities.Address, tableAlias=address0_}
    |  \-[SQL_TOKEN] SqlFragment: 'address0_.city as city2_0_, address0_.country as country3_0_, address0_.mailBox as mailBox4_0_, address0_.nr as nr5_0_, address0_.postalCode as postalCo6_0_, address0_.street as street7_0_'
    +-[FROM] FromClause: 'FROM' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[a], fromElementByTableAlias=[address0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'address address0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=a,role=null,tableName=address,tableAlias=address0_,origin=null,columns={,className=model.entities.Address}}
    \-[WHERE] SqlNode: 'WHERE'
       \-[NOT_IN] InLogicOperatorNode: 'not in'
          +-[DOT] DotNode: 'address0_.id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=id,path=a.id,tableAlias=address0_,className=model.entities.Address,classAlias=a}
          |  +-[ALIAS_REF] IdentNode: 'address0_.id' {alias=a, className=model.entities.Address, tableAlias=address0_}
          |  \-[IDENT] IdentNode: 'id' {originalText=id}
          \-[IN_LIST] SqlNode: 'inList'
             \-[SELECT] QueryNode: 'SELECT'  querySpaces (address,Person)
                +-[SELECT_CLAUSE] SelectClause: '{select clause}'
                |  \-[DOT] DotNode: 'person1_.addressId' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=address.id,path=p.address.id,tableAlias=person1_,className=model.entities.Person,classAlias=p}
                |     +-[DOT] DotNode: 'person1_.addressId' {propertyName=id,dereferenceType=UNKNOWN,getPropertyPath=address.id,path=p.address,tableAlias=person1_,className=model.entities.Person,classAlias=p}
                |     |  +-[ALIAS_REF] IdentNode: 'person1_.id' {alias=p, className=model.entities.Person, tableAlias=person1_}
                |     |  \-[IDENT] IdentNode: 'address' {originalText=address}
                |     \-[IDENT] IdentNode: 'id' {originalText=id}
                \-[FROM] FromClause: 'FROM' FromClause{level=2, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[p], fromElementByTableAlias=[person1_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
                   \-[FROM_FRAGMENT] FromElement: 'Person person1_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=p,role=null,tableName=Person,tableAlias=person1_,origin=null,columns={,className=model.entities.Person}}

2017-12-29 20:57:26,203 +0100 [main] DEBUG (ErrorCounter.java:95) - throwQueryException() : no errors
2017-12-29 20:57:26,207 +0100 [main] DEBUG (QueryTranslatorImpl.java:251) - HQL: SELECT a FROM model.entities.Address a WHERE a.id NOT IN (SELECT p.address.id FROM model.entities.Person p)
2017-12-29 20:57:26,207 +0100 [main] DEBUG (QueryTranslatorImpl.java:252) - SQL: select address0_.id as id1_0_, address0_.city as city2_0_, address0_.country as country3_0_, address0_.mailBox as mailBox4_0_, address0_.nr as nr5_0_, address0_.postalCode as postalCo6_0_, address0_.street as street7_0_ from address address0_ where address0_.id not in  (select person1_.addressId from Person person1_)
2017-12-29 20:57:26,208 +0100 [main] DEBUG (ErrorCounter.java:95) - throwQueryException() : no errors
2017-12-29 20:57:26,210 +0100 [main] DEBUG (NamedQueryRepository.java:167) - Checking 0 named SQL queries
2017-12-29 20:57:26,211 +0100 [main] DEBUG (SessionFactoryRegistry.java:52) - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@6bb75258
2017-12-29 20:57:26,212 +0100 [main] DEBUG (SessionFactoryRegistry.java:74) - Registering SessionFactory: 333a227b-c19c-461e-bbf0-368c7774c6e3 (<unnamed>)
2017-12-29 20:57:26,212 +0100 [main] DEBUG (SessionFactoryRegistry.java:81) - Not binding SessionFactory to JNDI, no JNDI name configured
2017-12-29 20:57:26,292 +0100 [main] DEBUG (StatisticsInitiator.java:82) - Statistics initialized [enabled=false]
2017-12-29 20:57:26,309 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:26,311 +0100 [main] DEBUG (DefaultMergeEventListener.java:93) - EntityCopyObserver strategy: disallow
2017-12-29 20:57:26,329 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:26,334 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 20:57:26,352 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 323
2017-12-29 20:57:26,353 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:26,358 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:26,358 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 20:57:26,361 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 201
2017-12-29 20:57:26,362 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:26,362 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:26,363 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 20:57:26,367 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 1
2017-12-29 20:57:26,368 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:26,368 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:26,369 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:26,370 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:26,375 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 20:57:26,375 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:26,376 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:26,377 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=68755b28-2fc5-4894-88fa-ae5c782233ba, id=201, isActive=true, frequency=505159}
2017-12-29 20:57:26,378 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Lindsey, address=model.entities.Address#323, id=1, remote=model.entities.Remote#201, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Craft}
2017-12-29 20:57:26,378 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=1, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=323}
2017-12-29 20:57:26,467 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:26,468 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:26,469 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:26,470 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:26,470 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 20:57:26,471 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 324
2017-12-29 20:57:26,471 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:26,471 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:26,472 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 20:57:26,473 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 202
2017-12-29 20:57:26,473 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:26,473 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:26,473 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 20:57:26,474 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 2
2017-12-29 20:57:26,474 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:26,474 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:26,475 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:26,475 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:26,475 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 20:57:26,475 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:26,475 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:26,475 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=6863ba10-f1cc-4fad-9fe5-387a95db1834, id=202, isActive=true, frequency=72566}
2017-12-29 20:57:26,475 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Erica, address=model.entities.Address#324, id=2, remote=model.entities.Remote#202, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Larsen}
2017-12-29 20:57:26,475 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=2, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=324}
2017-12-29 20:57:26,544 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:26,545 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:26,545 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:26,546 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:26,546 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 20:57:26,547 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 325
2017-12-29 20:57:26,547 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:26,548 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:26,548 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 20:57:26,549 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 203
2017-12-29 20:57:26,550 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:26,550 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:26,550 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 20:57:26,578 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 3
2017-12-29 20:57:26,578 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:26,579 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:26,579 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:26,579 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:26,579 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 20:57:26,579 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:26,579 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:26,579 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=d1ca8dbe-cea6-48db-8bb0-4d81f9434cde, id=203, isActive=true, frequency=218946}
2017-12-29 20:57:26,579 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=3, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=325}
2017-12-29 20:57:26,580 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Ryan, address=model.entities.Address#325, id=3, remote=model.entities.Remote#203, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Levine}
2017-12-29 20:57:26,612 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:26,612 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:26,612 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:26,613 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:26,613 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 20:57:26,614 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 326
2017-12-29 20:57:26,614 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:26,615 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:26,615 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 20:57:26,616 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 204
2017-12-29 20:57:26,616 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:26,617 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:26,617 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 20:57:26,701 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 4
2017-12-29 20:57:26,701 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:26,702 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:26,702 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:26,702 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:26,703 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 20:57:26,703 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:26,703 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:26,705 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=8feffcd1-9536-4dce-a041-7f9f09686acf, id=204, isActive=true, frequency=866575}
2017-12-29 20:57:26,706 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=4, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=326}
2017-12-29 20:57:26,706 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Erika, address=model.entities.Address#326, id=4, remote=model.entities.Remote#204, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Smith}
2017-12-29 20:57:26,755 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:26,756 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:26,756 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:26,757 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:26,757 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 20:57:26,758 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 327
2017-12-29 20:57:26,758 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:26,758 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:26,758 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 20:57:26,759 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 205
2017-12-29 20:57:26,759 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:26,760 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:26,760 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 20:57:26,761 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 5
2017-12-29 20:57:26,761 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:26,761 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:26,761 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:26,761 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:26,762 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 20:57:26,762 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:26,762 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:26,762 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=5, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=327}
2017-12-29 20:57:26,762 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=348bf48d-0a74-4bcf-8e22-c22c5b46be73, id=205, isActive=true, frequency=657164}
2017-12-29 20:57:26,762 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Brooklyn, address=model.entities.Address#327, id=5, remote=model.entities.Remote#205, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Sloan}
2017-12-29 20:57:26,800 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:26,800 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:26,801 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:26,801 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:26,801 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 20:57:26,802 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 328
2017-12-29 20:57:26,803 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:26,803 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:26,803 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 20:57:26,804 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 206
2017-12-29 20:57:26,804 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:26,804 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:26,805 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 20:57:26,867 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 6
2017-12-29 20:57:26,867 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:26,868 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:26,868 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:26,873 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:26,873 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 20:57:26,873 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:26,874 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:26,874 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Karen, address=model.entities.Address#328, id=6, remote=model.entities.Remote#206, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Mayer}
2017-12-29 20:57:26,874 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=6, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=328}
2017-12-29 20:57:26,874 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=add0803a-5d07-4e36-b0bd-fd1a9fc9d6bb, id=206, isActive=true, frequency=927735}
2017-12-29 20:57:26,910 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:26,911 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:26,911 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:26,911 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:26,912 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 20:57:26,912 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 329
2017-12-29 20:57:26,913 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:26,913 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:26,913 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 20:57:26,914 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 207
2017-12-29 20:57:26,915 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:26,915 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:26,915 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 20:57:26,918 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 7
2017-12-29 20:57:26,918 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:26,919 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:26,919 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:26,919 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:26,919 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 20:57:26,919 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:26,920 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:26,920 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=7, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=329}
2017-12-29 20:57:26,920 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Eddie, address=model.entities.Address#329, id=7, remote=model.entities.Remote#207, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=O'neill}
2017-12-29 20:57:26,920 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=0ff2dbb1-078b-4810-9979-09e2a86fbc87, id=207, isActive=true, frequency=110932}
2017-12-29 20:57:26,956 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:26,957 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:26,957 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:26,958 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:26,958 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 20:57:26,959 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 330
2017-12-29 20:57:26,959 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:26,959 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:26,959 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 20:57:26,960 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 208
2017-12-29 20:57:26,960 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:26,960 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:26,960 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 20:57:26,961 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 8
2017-12-29 20:57:26,961 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:26,961 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:26,961 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:26,962 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:26,962 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 20:57:26,962 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:26,962 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:26,962 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=8, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=330}
2017-12-29 20:57:26,962 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Nancy, address=model.entities.Address#330, id=8, remote=model.entities.Remote#208, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Stevens}
2017-12-29 20:57:26,962 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=5bae211f-a1a1-4db2-b191-5b7bbfb1297f, id=208, isActive=true, frequency=434662}
2017-12-29 20:57:27,012 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:27,013 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:27,014 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:27,017 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,018 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 20:57:27,021 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 331
2017-12-29 20:57:27,022 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,024 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,025 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 20:57:27,027 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 209
2017-12-29 20:57:27,027 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,029 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,029 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 20:57:27,031 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 9
2017-12-29 20:57:27,031 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,032 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:27,032 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:27,033 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:27,034 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 20:57:27,034 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:27,034 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:27,035 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=fe6f74de-2ef4-437d-afcd-39ea9a9cd2f3, id=209, isActive=true, frequency=862827}
2017-12-29 20:57:27,035 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Chasity, address=model.entities.Address#331, id=9, remote=model.entities.Remote#209, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Conway}
2017-12-29 20:57:27,035 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=9, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=331}
2017-12-29 20:57:27,067 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:27,068 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:27,068 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:27,073 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,073 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 20:57:27,074 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 332
2017-12-29 20:57:27,074 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,075 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,075 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 20:57:27,076 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 210
2017-12-29 20:57:27,076 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,076 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,076 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 20:57:27,077 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 10
2017-12-29 20:57:27,077 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,078 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:27,078 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:27,078 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:27,078 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 20:57:27,078 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:27,078 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:27,079 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=a7e8927d-a74a-4e77-8f5b-c415416ae0f0, id=210, isActive=true, frequency=552320}
2017-12-29 20:57:27,079 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Aaron, address=model.entities.Address#332, id=10, remote=model.entities.Remote#210, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=McCray}
2017-12-29 20:57:27,079 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=10, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=332}
2017-12-29 20:57:27,111 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:27,111 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:27,112 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:27,112 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,112 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 20:57:27,113 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 333
2017-12-29 20:57:27,113 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,114 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,114 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 20:57:27,114 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 211
2017-12-29 20:57:27,114 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,115 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,115 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 20:57:27,116 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 11
2017-12-29 20:57:27,116 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,116 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:27,116 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:27,116 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:27,116 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 20:57:27,116 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:27,116 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:27,116 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=0f5dd557-57e4-4654-af57-618c5b95bb4f, id=211, isActive=true, frequency=136733}
2017-12-29 20:57:27,116 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=11, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=333}
2017-12-29 20:57:27,117 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Kendra, address=model.entities.Address#333, id=11, remote=model.entities.Remote#211, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Allen}
2017-12-29 20:57:27,156 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:27,157 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:27,158 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:27,160 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,160 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 20:57:27,163 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 334
2017-12-29 20:57:27,163 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,165 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,165 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 20:57:27,168 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 212
2017-12-29 20:57:27,169 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,170 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,171 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 20:57:27,174 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 12
2017-12-29 20:57:27,174 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,175 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:27,176 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:27,176 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:27,178 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 20:57:27,178 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:27,179 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:27,179 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=e316c0ab-5e06-46ca-ae43-d4cb38b1f85b, id=212, isActive=true, frequency=686854}
2017-12-29 20:57:27,179 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=12, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=334}
2017-12-29 20:57:27,180 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Jenna, address=model.entities.Address#334, id=12, remote=model.entities.Remote#212, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Burns}
2017-12-29 20:57:27,211 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:27,211 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:27,211 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:27,212 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,212 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 20:57:27,215 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 335
2017-12-29 20:57:27,216 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,216 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,216 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 20:57:27,217 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 213
2017-12-29 20:57:27,218 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,218 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,218 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 20:57:27,221 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 13
2017-12-29 20:57:27,222 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,223 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:27,223 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:27,223 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:27,223 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 20:57:27,223 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:27,224 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:27,224 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=13, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=335}
2017-12-29 20:57:27,224 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=cd9b1602-c5bc-4333-be43-2eca3f8589d4, id=213, isActive=true, frequency=774439}
2017-12-29 20:57:27,224 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Jane, address=model.entities.Address#335, id=13, remote=model.entities.Remote#213, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Mayo}
2017-12-29 20:57:27,256 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:27,256 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:27,256 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:27,257 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,257 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 20:57:27,258 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 336
2017-12-29 20:57:27,258 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,258 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,258 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 20:57:27,259 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 214
2017-12-29 20:57:27,259 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,259 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,259 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 20:57:27,259 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 14
2017-12-29 20:57:27,260 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,260 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:27,260 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:27,260 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:27,260 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 20:57:27,260 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:27,260 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:27,260 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=George, address=model.entities.Address#336, id=14, remote=model.entities.Remote#214, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Suarez}
2017-12-29 20:57:27,260 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=14, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=336}
2017-12-29 20:57:27,261 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=3b79cd13-1c77-4a63-8237-8173e43deb96, id=214, isActive=true, frequency=454967}
2017-12-29 20:57:27,300 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:27,300 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:27,300 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:27,302 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,302 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 20:57:27,303 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 337
2017-12-29 20:57:27,303 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,304 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,304 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 20:57:27,305 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 215
2017-12-29 20:57:27,305 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,306 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,306 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 20:57:27,307 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 15
2017-12-29 20:57:27,307 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,307 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:27,307 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:27,307 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:27,308 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 20:57:27,308 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:27,308 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:27,308 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=15, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=337}
2017-12-29 20:57:27,308 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Janet, address=model.entities.Address#337, id=15, remote=model.entities.Remote#215, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Abbott}
2017-12-29 20:57:27,308 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=fd8ca3db-a214-4c17-8076-f707a8ad6e8c, id=215, isActive=true, frequency=183793}
2017-12-29 20:57:27,346 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:27,347 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:27,348 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:27,353 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,354 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 20:57:27,358 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 338
2017-12-29 20:57:27,359 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,361 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,361 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 20:57:27,365 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 216
2017-12-29 20:57:27,365 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,366 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,366 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 20:57:27,368 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 16
2017-12-29 20:57:27,369 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,369 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:27,370 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:27,370 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:27,371 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 20:57:27,371 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:27,372 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:27,372 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=16, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=338}
2017-12-29 20:57:27,372 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Steven, address=model.entities.Address#338, id=16, remote=model.entities.Remote#216, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Marshall}
2017-12-29 20:57:27,373 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=2c637db5-ba82-4586-ba80-6170e8b82d08, id=216, isActive=true, frequency=389432}
2017-12-29 20:57:27,411 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:27,412 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:27,413 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:27,414 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,415 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 20:57:27,416 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 339
2017-12-29 20:57:27,417 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,417 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,418 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 20:57:27,419 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 217
2017-12-29 20:57:27,419 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,420 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,420 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 20:57:27,422 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 17
2017-12-29 20:57:27,422 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,423 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:27,423 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:27,423 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:27,424 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 20:57:27,424 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:27,424 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:27,425 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=110f3489-fc3c-4200-8aeb-ffcdc0bde289, id=217, isActive=true, frequency=682817}
2017-12-29 20:57:27,425 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Shane, address=model.entities.Address#339, id=17, remote=model.entities.Remote#217, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Heath}
2017-12-29 20:57:27,425 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=17, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=339}
2017-12-29 20:57:27,456 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:27,457 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:27,457 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:27,458 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,458 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 20:57:27,459 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 340
2017-12-29 20:57:27,459 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,460 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,460 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 20:57:27,461 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 218
2017-12-29 20:57:27,461 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,461 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,461 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 20:57:27,462 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 18
2017-12-29 20:57:27,462 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,462 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:27,462 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:27,463 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:27,463 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 20:57:27,463 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:27,463 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:27,463 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=c0e7713a-8f03-44ca-a2f0-258b9166f5ce, id=218, isActive=true, frequency=762928}
2017-12-29 20:57:27,463 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Unborn, address=model.entities.Address#340, id=18, remote=model.entities.Remote#218, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Vega}
2017-12-29 20:57:27,463 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=18, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=340}
2017-12-29 20:57:27,500 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:27,500 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:27,501 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:27,502 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,502 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 20:57:27,503 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 341
2017-12-29 20:57:27,503 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,503 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,504 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 20:57:27,505 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 219
2017-12-29 20:57:27,505 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,505 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,506 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 20:57:27,507 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 19
2017-12-29 20:57:27,507 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,507 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:27,508 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:27,508 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:27,508 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 20:57:27,508 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:27,509 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:27,509 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=478bbe03-3e11-4018-83f2-92bbe7dac256, id=219, isActive=true, frequency=23125}
2017-12-29 20:57:27,509 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=19, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=341}
2017-12-29 20:57:27,509 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Kaitlyn, address=model.entities.Address#341, id=19, remote=model.entities.Remote#219, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Wilder}
2017-12-29 20:57:27,545 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:27,546 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:27,546 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:27,547 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,547 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 20:57:27,548 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 342
2017-12-29 20:57:27,548 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,549 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,549 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 20:57:27,550 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 220
2017-12-29 20:57:27,550 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,551 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,551 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 20:57:27,552 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 20
2017-12-29 20:57:27,553 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,553 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:27,553 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:27,553 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:27,554 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 20:57:27,554 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:27,554 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:27,554 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=53d41ed3-2943-4f88-8fe7-35c642cce541, id=220, isActive=true, frequency=856146}
2017-12-29 20:57:27,554 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=20, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=342}
2017-12-29 20:57:27,554 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Donald, address=model.entities.Address#342, id=20, remote=model.entities.Remote#220, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Morgan}
2017-12-29 20:57:27,589 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:27,589 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:27,590 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:27,591 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,591 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 20:57:27,592 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 343
2017-12-29 20:57:27,592 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,592 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,592 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 20:57:27,593 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 221
2017-12-29 20:57:27,593 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,593 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,594 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 20:57:27,594 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 21
2017-12-29 20:57:27,595 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,595 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:27,595 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:27,595 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:27,595 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 20:57:27,595 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:27,595 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:27,596 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=21, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=343}
2017-12-29 20:57:27,596 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=aa0c6ea6-e64b-4f3d-871a-ca9bc072ec32, id=221, isActive=true, frequency=846157}
2017-12-29 20:57:27,596 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Alisha, address=model.entities.Address#343, id=21, remote=model.entities.Remote#221, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Dunn}
2017-12-29 20:57:27,634 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:27,634 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:27,634 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:27,635 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,635 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 20:57:27,636 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 344
2017-12-29 20:57:27,636 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,637 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,637 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 20:57:27,638 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 222
2017-12-29 20:57:27,638 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,639 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,639 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 20:57:27,640 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 22
2017-12-29 20:57:27,640 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,640 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:27,640 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:27,641 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:27,641 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 20:57:27,641 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:27,641 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:27,641 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Marty, address=model.entities.Address#344, id=22, remote=model.entities.Remote#222, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Franco}
2017-12-29 20:57:27,641 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=22, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=344}
2017-12-29 20:57:27,642 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=002a240a-6aa1-431a-a5b8-ac917bbf3783, id=222, isActive=true, frequency=567686}
2017-12-29 20:57:27,678 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:27,678 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:27,678 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:27,679 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,679 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 20:57:27,712 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 345
2017-12-29 20:57:27,712 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,713 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,713 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 20:57:27,714 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 223
2017-12-29 20:57:27,714 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,715 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,715 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 20:57:27,716 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 23
2017-12-29 20:57:27,716 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,717 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:27,717 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:27,717 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:27,717 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 20:57:27,717 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:27,717 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:27,717 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=23, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=345}
2017-12-29 20:57:27,718 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Sam, address=model.entities.Address#345, id=23, remote=model.entities.Remote#223, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Jackson}
2017-12-29 20:57:27,718 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=878cf08d-4ea5-4a5d-bffe-f2d202b3e8c2, id=223, isActive=true, frequency=179932}
2017-12-29 20:57:27,768 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:27,768 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:27,769 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:27,769 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,770 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 20:57:27,771 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 346
2017-12-29 20:57:27,771 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,772 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,772 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 20:57:27,773 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 224
2017-12-29 20:57:27,773 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,773 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,774 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 20:57:27,775 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 24
2017-12-29 20:57:27,775 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,775 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:27,775 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:27,775 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:27,776 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 20:57:27,776 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:27,776 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:27,776 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=24, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=346}
2017-12-29 20:57:27,776 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Jeffrey, address=model.entities.Address#346, id=24, remote=model.entities.Remote#224, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Suarez}
2017-12-29 20:57:27,776 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=338e4785-7e85-4dc9-8305-7009a149f2b0, id=224, isActive=true, frequency=432918}
2017-12-29 20:57:27,811 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:27,811 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:27,812 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:27,812 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,812 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 20:57:27,813 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 347
2017-12-29 20:57:27,813 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,814 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,814 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 20:57:27,815 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 225
2017-12-29 20:57:27,815 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,816 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,816 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 20:57:27,818 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 25
2017-12-29 20:57:27,819 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,819 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:27,819 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:27,820 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:27,820 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 20:57:27,820 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:27,820 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:27,820 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=637f988d-6498-4056-b374-dcc93ce26e5d, id=225, isActive=true, frequency=799276}
2017-12-29 20:57:27,820 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Thomas, address=model.entities.Address#347, id=25, remote=model.entities.Remote#225, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Dotson}
2017-12-29 20:57:27,820 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=25, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=347}
2017-12-29 20:57:27,856 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:27,856 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:27,857 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:27,857 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,857 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 20:57:27,858 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 348
2017-12-29 20:57:27,858 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,858 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,858 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 20:57:27,859 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 226
2017-12-29 20:57:27,859 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,859 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,859 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 20:57:27,860 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 26
2017-12-29 20:57:27,860 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,860 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:27,860 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:27,861 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:27,861 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 20:57:27,861 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:27,861 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:27,861 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=e75e76f4-8b32-4b9c-95f7-c47801cf8611, id=226, isActive=true, frequency=927018}
2017-12-29 20:57:27,861 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Mickey, address=model.entities.Address#348, id=26, remote=model.entities.Remote#226, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Cruz}
2017-12-29 20:57:27,861 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=26, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=348}
2017-12-29 20:57:27,900 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:27,900 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:27,901 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:27,901 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,901 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 20:57:27,902 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 349
2017-12-29 20:57:27,902 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,902 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,902 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 20:57:27,903 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 227
2017-12-29 20:57:27,903 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,903 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,903 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 20:57:27,904 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 27
2017-12-29 20:57:27,904 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,904 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:27,904 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:27,904 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:27,904 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 20:57:27,904 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:27,904 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:27,905 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=122fb106-c90c-4d10-ad89-e497fcc6ec9e, id=227, isActive=true, frequency=430859}
2017-12-29 20:57:27,905 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=27, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=349}
2017-12-29 20:57:27,905 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Chuck, address=model.entities.Address#349, id=27, remote=model.entities.Remote#227, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Castillo}
2017-12-29 20:57:27,938 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:27,938 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:27,938 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:27,939 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,939 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 20:57:27,940 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 350
2017-12-29 20:57:27,940 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,940 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,941 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 20:57:27,941 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 228
2017-12-29 20:57:27,941 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,942 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,942 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 20:57:27,943 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 28
2017-12-29 20:57:27,943 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,943 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:27,943 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:27,943 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:27,943 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 20:57:27,943 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:27,943 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:27,944 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=11a83161-e820-4f80-ac0e-93551d32526d, id=228, isActive=true, frequency=144668}
2017-12-29 20:57:27,944 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=28, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=350}
2017-12-29 20:57:27,944 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Sierra, address=model.entities.Address#350, id=28, remote=model.entities.Remote#228, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Schneider}
2017-12-29 20:57:27,966 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:27,967 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:27,967 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:27,968 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,968 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 20:57:27,969 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 351
2017-12-29 20:57:27,969 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,969 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,969 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 20:57:27,970 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 229
2017-12-29 20:57:27,970 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,970 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:27,970 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 20:57:27,971 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 29
2017-12-29 20:57:27,971 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:27,971 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:27,972 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:27,972 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:27,972 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 20:57:27,972 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:27,972 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:27,972 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=29, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=351}
2017-12-29 20:57:27,972 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=5451a171-4945-47b8-befc-4888f2771511, id=229, isActive=true, frequency=149796}
2017-12-29 20:57:27,973 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Michael, address=model.entities.Address#351, id=29, remote=model.entities.Remote#229, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Gross}
2017-12-29 20:57:28,012 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:28,012 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:28,012 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:28,012 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:28,012 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 20:57:28,013 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 352
2017-12-29 20:57:28,013 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:28,013 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:28,013 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 20:57:28,014 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 230
2017-12-29 20:57:28,014 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:28,014 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:28,014 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 20:57:28,015 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 30
2017-12-29 20:57:28,015 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:28,015 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:28,015 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:28,015 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:28,015 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 20:57:28,016 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:28,016 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:28,016 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Richard, address=model.entities.Address#352, id=30, remote=model.entities.Remote#230, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Wheeler}
2017-12-29 20:57:28,016 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=30, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=352}
2017-12-29 20:57:28,016 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=bf276bdd-fa39-42f9-8aa4-570dd4306fc4, id=230, isActive=true, frequency=421033}
2017-12-29 20:57:28,055 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:28,055 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:28,055 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:28,057 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:28,057 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 20:57:28,057 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 231
2017-12-29 20:57:28,057 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:28,057 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:28,057 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:28,057 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:28,057 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 20:57:28,057 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:28,057 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:28,057 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=fe082b43-6f6f-4333-a008-d8d07e7b4fe2, id=231, isActive=false, frequency=618294}
2017-12-29 20:57:28,089 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:28,090 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:28,090 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:28,090 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:28,090 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 20:57:28,091 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 232
2017-12-29 20:57:28,091 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:28,091 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:28,091 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:28,091 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:28,091 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 20:57:28,091 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:28,092 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:28,092 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=73243da8-d191-4477-a1c1-6d4bc38c7dc8, id=232, isActive=false, frequency=738516}
2017-12-29 20:57:28,122 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:28,123 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:28,123 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:28,123 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:28,124 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 20:57:28,124 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 233
2017-12-29 20:57:28,124 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:28,125 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:28,125 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:28,125 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:28,125 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 20:57:28,125 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:28,125 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:28,125 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=ecc6c7fe-2d66-41b5-8df3-5173eccc378e, id=233, isActive=false, frequency=535388}
2017-12-29 20:57:28,156 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:28,156 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:28,156 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:28,157 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:28,157 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 20:57:28,157 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 234
2017-12-29 20:57:28,157 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:28,158 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:28,158 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:28,158 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:28,158 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 20:57:28,158 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:28,158 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:28,158 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=292d3023-1997-4523-8b13-1814a71e4dbc, id=234, isActive=false, frequency=442903}
2017-12-29 20:57:28,200 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:28,201 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:28,201 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:28,201 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:28,201 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 20:57:28,202 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 235
2017-12-29 20:57:28,202 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:28,202 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:28,202 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:28,202 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:28,202 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 20:57:28,203 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:28,203 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:28,203 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=abcb3a96-b646-419e-8c93-35a7525881e7, id=235, isActive=false, frequency=722520}
2017-12-29 20:57:28,233 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:28,233 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:28,233 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:28,234 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:28,234 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 20:57:28,234 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 236
2017-12-29 20:57:28,234 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:28,234 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:28,234 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:28,234 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:28,234 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 20:57:28,235 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:28,235 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:28,235 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=c9309773-9316-4b4e-beff-779fb4c12092, id=236, isActive=false, frequency=420968}
2017-12-29 20:57:28,267 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:28,267 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:28,268 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:28,269 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:28,269 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 20:57:28,269 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 237
2017-12-29 20:57:28,270 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:28,270 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:28,270 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:28,270 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:28,270 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 20:57:28,270 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:28,270 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:28,270 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=34d53232-c4b2-4fcd-8516-6fdef2adcce3, id=237, isActive=false, frequency=354551}
2017-12-29 20:57:28,300 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:28,300 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:28,300 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:28,301 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:28,301 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 20:57:28,302 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 238
2017-12-29 20:57:28,302 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:28,302 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:28,302 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:28,302 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:28,303 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 20:57:28,303 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:28,303 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:28,303 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=b9a25615-b254-4650-b2ac-4d91817b67de, id=238, isActive=false, frequency=500826}
2017-12-29 20:57:28,334 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:28,334 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:28,334 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:28,334 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:28,335 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 20:57:28,335 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 239
2017-12-29 20:57:28,335 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:28,335 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:28,335 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:28,336 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:28,336 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 20:57:28,336 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:28,336 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:28,336 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=0b454bb8-1890-4ed4-b9a4-18a03c5ccc84, id=239, isActive=false, frequency=83118}
2017-12-29 20:57:28,366 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:28,366 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:28,366 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:28,367 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:28,367 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 20:57:28,368 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 240
2017-12-29 20:57:28,368 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:28,368 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:28,368 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:28,368 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:28,368 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 20:57:28,368 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:28,368 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:28,368 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=57969f01-d2ad-457e-9d8f-7488c2d4ae4a, id=240, isActive=false, frequency=42162}
2017-12-29 20:57:28,401 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:28,401 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:28,401 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:28,401 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:28,401 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 20:57:28,402 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 353
2017-12-29 20:57:28,402 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:28,402 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:28,402 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:28,402 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:28,402 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 20:57:28,402 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:28,403 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:28,403 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=België, mailBox=31, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=353}
2017-12-29 20:57:28,433 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:28,433 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:28,433 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:28,434 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:28,434 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 20:57:28,434 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 354
2017-12-29 20:57:28,435 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:28,435 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:28,435 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:28,435 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:28,435 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 20:57:28,435 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:28,435 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:28,435 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=België, mailBox=32, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=354}
2017-12-29 20:57:28,467 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:28,467 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:28,468 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:28,468 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:28,468 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 20:57:28,469 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 355
2017-12-29 20:57:28,469 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:28,469 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:28,469 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:28,469 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:28,469 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 20:57:28,469 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:28,470 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:28,470 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=België, mailBox=33, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=355}
2017-12-29 20:57:28,500 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:28,501 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:28,501 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:28,501 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:28,501 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 20:57:28,502 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 356
2017-12-29 20:57:28,502 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:28,502 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:28,502 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:28,502 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:28,502 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 20:57:28,502 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:28,503 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:28,503 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=België, mailBox=34, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=356}
2017-12-29 20:57:28,534 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:28,534 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:28,534 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:28,535 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:28,535 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 20:57:28,535 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 357
2017-12-29 20:57:28,535 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:28,535 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:28,536 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:28,536 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:28,536 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 20:57:28,536 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:28,536 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:28,536 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=België, mailBox=35, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=357}
2017-12-29 20:57:28,567 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:28,567 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:28,567 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:28,568 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:28,568 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 20:57:28,569 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 358
2017-12-29 20:57:28,569 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:28,569 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:28,569 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:28,569 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:28,569 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 20:57:28,569 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:28,569 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:28,569 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=België, mailBox=36, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=358}
2017-12-29 20:57:28,600 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:28,601 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:28,601 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:28,602 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:28,602 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 20:57:28,602 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 359
2017-12-29 20:57:28,602 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:28,602 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:28,602 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:28,602 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:28,603 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 20:57:28,603 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:28,603 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:28,603 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=België, mailBox=37, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=359}
2017-12-29 20:57:28,633 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:28,633 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:28,634 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:28,634 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:28,634 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 20:57:28,635 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 360
2017-12-29 20:57:28,635 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:28,635 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:28,635 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:28,636 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:28,636 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 20:57:28,636 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:28,636 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:28,636 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=België, mailBox=38, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=360}
2017-12-29 20:57:28,667 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:28,668 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:28,668 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:28,668 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:28,669 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 20:57:28,722 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 361
2017-12-29 20:57:28,722 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:28,722 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:28,723 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:28,723 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:28,723 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 20:57:28,723 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:28,723 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:28,723 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=België, mailBox=39, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=361}
2017-12-29 20:57:28,761 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:28,761 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:28,761 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 20:57:28,761 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 20:57:28,761 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 20:57:28,762 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 362
2017-12-29 20:57:28,762 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 20:57:28,762 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 20:57:28,762 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 20:57:28,762 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 20:57:28,762 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 20:57:28,763 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 20:57:28,763 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 20:57:28,763 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=België, mailBox=40, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=362}
2017-12-29 20:57:28,788 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:28,789 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 20:57:55,540 +0100 [pool-1-thread-1] DEBUG (PooledConnections.java:51) - Connection pool now considered primed; min-size will be maintained
2017-12-29 21:01:16,992 +0100 [main] DEBUG (HibernatePersistenceProvider.java:38) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2017-12-29 21:01:17,072 +0100 [main] DEBUG (HibernatePersistenceProvider.java:98) - Located and parsed 1 persistence units; checking each
2017-12-29 21:01:17,075 +0100 [main] DEBUG (HibernatePersistenceProvider.java:106) - Checking persistence-unit [name=Afstandsbediening, explicit-provider=null] against incoming persistence unit name [Person]
2017-12-29 21:01:17,075 +0100 [main] DEBUG (HibernatePersistenceProvider.java:115) - Excluding from consideration due to name mis-match
2017-12-29 21:01:17,075 +0100 [main] DEBUG (HibernatePersistenceProvider.java:133) - Found no matching persistence units
2017-12-29 21:03:15,104 +0100 [main] DEBUG (HibernatePersistenceProvider.java:38) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2017-12-29 21:03:15,212 +0100 [main] DEBUG (HibernatePersistenceProvider.java:98) - Located and parsed 1 persistence units; checking each
2017-12-29 21:03:15,215 +0100 [main] DEBUG (HibernatePersistenceProvider.java:106) - Checking persistence-unit [name=Afstandsbediening, explicit-provider=org.hibernate.ejb.HibernatePersistence] against incoming persistence unit name [Person]
2017-12-29 21:03:15,215 +0100 [main] DEBUG (HibernatePersistenceProvider.java:115) - Excluding from consideration due to name mis-match
2017-12-29 21:03:15,216 +0100 [main] DEBUG (HibernatePersistenceProvider.java:133) - Found no matching persistence units
2017-12-29 21:07:49,551 +0100 [main] DEBUG (HibernatePersistenceProvider.java:38) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2017-12-29 21:07:49,694 +0100 [main] DEBUG (HibernatePersistenceProvider.java:98) - Located and parsed 1 persistence units; checking each
2017-12-29 21:07:49,698 +0100 [main] DEBUG (HibernatePersistenceProvider.java:106) - Checking persistence-unit [name=Afstandsbediening, explicit-provider=org.hibernate.ejb.HibernatePersistence] against incoming persistence unit name [Person]
2017-12-29 21:07:49,699 +0100 [main] DEBUG (HibernatePersistenceProvider.java:115) - Excluding from consideration due to name mis-match
2017-12-29 21:07:49,699 +0100 [main] DEBUG (HibernatePersistenceProvider.java:133) - Found no matching persistence units
2017-12-29 21:39:31,303 +0100 [main] DEBUG (HibernatePersistenceProvider.java:38) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2017-12-29 21:39:31,413 +0100 [main] DEBUG (HibernatePersistenceProvider.java:98) - Located and parsed 1 persistence units; checking each
2017-12-29 21:39:31,415 +0100 [main] DEBUG (HibernatePersistenceProvider.java:106) - Checking persistence-unit [name=Afstandsbediening, explicit-provider=org.hibernate.ejb.HibernatePersistence] against incoming persistence unit name [Afstandsbediening]
2017-12-29 21:39:31,417 +0100 [main] DEBUG (ProviderChecker.java:87) - Persistence-unit [Afstandsbediening] requested PersistenceProvider [org.hibernate.ejb.HibernatePersistence]
2017-12-29 21:39:31,418 +0100 [main] DEBUG (HibernatePersistenceProvider.java:121) - Excluding from consideration due to provider mis-match
2017-12-29 21:39:31,418 +0100 [main] DEBUG (HibernatePersistenceProvider.java:133) - Found no matching persistence units
2017-12-29 21:40:02,972 +0100 [main] DEBUG (HibernatePersistenceProvider.java:38) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2017-12-29 21:40:03,052 +0100 [main] DEBUG (HibernatePersistenceProvider.java:98) - Located and parsed 1 persistence units; checking each
2017-12-29 21:40:03,054 +0100 [main] DEBUG (HibernatePersistenceProvider.java:106) - Checking persistence-unit [name=Afstandsbediening, explicit-provider=null] against incoming persistence unit name [Afstandsbediening]
2017-12-29 21:40:03,055 +0100 [main] DEBUG (ProviderChecker.java:96) - No PersistenceProvider explicitly requested, assuming Hibernate
2017-12-29 21:40:03,060 +0100 [main] DEBUG (LogHelper.java:102) - PersistenceUnitInfo [
	name: Afstandsbediening
	persistence provider classname: null
	classloader: null
	excludeUnlistedClasses: false
	JTA datasource: null
	Non JTA datasource: null
	Transaction type: RESOURCE_LOCAL
	PU root URL: file:/C:/Users/BenJolien/git/2018-Januari/8-Afstandsbediening/target/classes/
	Shared Cache Mode: null
	Validation Mode: null
	Jar files URLs []
	Managed classes names [
		model.entities.Remote
		model.entities.Person
		model.entities.Address]
	Mapping files names []
	Properties [
		javax.persistence.jdbc.driver: com.mysql.jdbc.Driver
		javax.persistence.jdbc.password: userDB
		javax.persistence.jdbc.url: jdbc:mysql://localhost:3306/DbRemote
		javax.persistence.jdbc.user: userDB]
2017-12-29 21:40:03,066 +0100 [main] DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
2017-12-29 21:40:03,069 +0100 [main] DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
2017-12-29 21:40:03,074 +0100 [main] DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2017-12-29 21:40:03,074 +0100 [main] DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.jpa.event.spi.JpaIntegrator].
2017-12-29 21:40:03,163 +0100 [main] INFO  (Version.java:45) - HHH000412: Hibernate Core {5.2.12.Final}
2017-12-29 21:40:03,164 +0100 [main] INFO  (Environment.java:213) - HHH000206: hibernate.properties not found
2017-12-29 21:40:03,172 +0100 [main] DEBUG (ServiceBinding.java:68) - Overriding existing service binding [org.hibernate.secure.spi.JaccService]
2017-12-29 21:40:03,189 +0100 [main] DEBUG (RegionFactoryInitiator.java:75) - Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
2017-12-29 21:40:03,194 +0100 [main] INFO  (JavaReflectionManager.java:66) - HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
2017-12-29 21:40:03,241 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration boolean -> org.hibernate.type.BooleanType@46238e3f
2017-12-29 21:40:03,242 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration boolean -> org.hibernate.type.BooleanType@46238e3f
2017-12-29 21:40:03,243 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@46238e3f
2017-12-29 21:40:03,244 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@6cc7b4de
2017-12-29 21:40:03,245 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration true_false -> org.hibernate.type.TrueFalseType@49c43f4e
2017-12-29 21:40:03,245 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration yes_no -> org.hibernate.type.YesNoType@17776a8
2017-12-29 21:40:03,246 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration byte -> org.hibernate.type.ByteType@32a068d1
2017-12-29 21:40:03,246 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration byte -> org.hibernate.type.ByteType@32a068d1
2017-12-29 21:40:03,246 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@32a068d1
2017-12-29 21:40:03,247 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration character -> org.hibernate.type.CharacterType@282003e1
2017-12-29 21:40:03,247 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration char -> org.hibernate.type.CharacterType@282003e1
2017-12-29 21:40:03,247 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@282003e1
2017-12-29 21:40:03,249 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration short -> org.hibernate.type.ShortType@62fdb4a6
2017-12-29 21:40:03,249 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration short -> org.hibernate.type.ShortType@62fdb4a6
2017-12-29 21:40:03,249 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Short -> org.hibernate.type.ShortType@62fdb4a6
2017-12-29 21:40:03,250 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration integer -> org.hibernate.type.IntegerType@3ffcd140
2017-12-29 21:40:03,250 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration int -> org.hibernate.type.IntegerType@3ffcd140
2017-12-29 21:40:03,250 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@3ffcd140
2017-12-29 21:40:03,251 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration long -> org.hibernate.type.LongType@6a79c292
2017-12-29 21:40:03,251 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration long -> org.hibernate.type.LongType@6a79c292
2017-12-29 21:40:03,251 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Long -> org.hibernate.type.LongType@6a79c292
2017-12-29 21:40:03,253 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration float -> org.hibernate.type.FloatType@12405818
2017-12-29 21:40:03,253 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration float -> org.hibernate.type.FloatType@12405818
2017-12-29 21:40:03,253 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Float -> org.hibernate.type.FloatType@12405818
2017-12-29 21:40:03,254 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration double -> org.hibernate.type.DoubleType@442675e1
2017-12-29 21:40:03,254 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration double -> org.hibernate.type.DoubleType@442675e1
2017-12-29 21:40:03,255 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@442675e1
2017-12-29 21:40:03,256 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@27c6e487
2017-12-29 21:40:03,256 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@27c6e487
2017-12-29 21:40:03,257 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration big_integer -> org.hibernate.type.BigIntegerType@59717824
2017-12-29 21:40:03,257 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@59717824
2017-12-29 21:40:03,258 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration string -> org.hibernate.type.StringType@516be40f
2017-12-29 21:40:03,258 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.String -> org.hibernate.type.StringType@516be40f
2017-12-29 21:40:03,259 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration nstring -> org.hibernate.type.StringNVarcharType@19dc67c2
2017-12-29 21:40:03,259 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@dd3b207
2017-12-29 21:40:03,260 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration url -> org.hibernate.type.UrlType@70b0b186
2017-12-29 21:40:03,260 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.net.URL -> org.hibernate.type.UrlType@70b0b186
2017-12-29 21:40:03,261 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration Duration -> org.hibernate.type.DurationType@3d36e4cd
2017-12-29 21:40:03,261 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.Duration -> org.hibernate.type.DurationType@3d36e4cd
2017-12-29 21:40:03,277 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration Instant -> org.hibernate.type.InstantType@3b2c72c2
2017-12-29 21:40:03,278 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.Instant -> org.hibernate.type.InstantType@3b2c72c2
2017-12-29 21:40:03,279 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@2b4a2ec7
2017-12-29 21:40:03,279 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@2b4a2ec7
2017-12-29 21:40:03,281 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration LocalDate -> org.hibernate.type.LocalDateType@4206a205
2017-12-29 21:40:03,281 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@4206a205
2017-12-29 21:40:03,282 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@4d826d77
2017-12-29 21:40:03,282 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@4d826d77
2017-12-29 21:40:03,283 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@7f77e91b
2017-12-29 21:40:03,283 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@7f77e91b
2017-12-29 21:40:03,284 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@145eaa29
2017-12-29 21:40:03,284 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@145eaa29
2017-12-29 21:40:03,286 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@75f9eccc
2017-12-29 21:40:03,286 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@75f9eccc
2017-12-29 21:40:03,287 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration date -> org.hibernate.type.DateType@4ae3c1cd
2017-12-29 21:40:03,287 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.sql.Date -> org.hibernate.type.DateType@4ae3c1cd
2017-12-29 21:40:03,288 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration time -> org.hibernate.type.TimeType@45f45fa1
2017-12-29 21:40:03,288 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.sql.Time -> org.hibernate.type.TimeType@45f45fa1
2017-12-29 21:40:03,289 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration timestamp -> org.hibernate.type.TimestampType@8e0379d
2017-12-29 21:40:03,289 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@8e0379d
2017-12-29 21:40:03,289 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.Date -> org.hibernate.type.TimestampType@8e0379d
2017-12-29 21:40:03,290 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@2145433b
2017-12-29 21:40:03,291 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration calendar -> org.hibernate.type.CalendarType@3ec300f1
2017-12-29 21:40:03,291 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@3ec300f1
2017-12-29 21:40:03,291 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@3ec300f1
2017-12-29 21:40:03,291 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@7d68ef40
2017-12-29 21:40:03,292 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration locale -> org.hibernate.type.LocaleType@2b546384
2017-12-29 21:40:03,292 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@2b546384
2017-12-29 21:40:03,292 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration currency -> org.hibernate.type.CurrencyType@55ca8de8
2017-12-29 21:40:03,292 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@55ca8de8
2017-12-29 21:40:03,293 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration timezone -> org.hibernate.type.TimeZoneType@2ed0fbae
2017-12-29 21:40:03,293 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@2ed0fbae
2017-12-29 21:40:03,294 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration class -> org.hibernate.type.ClassType@548a102f
2017-12-29 21:40:03,294 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Class -> org.hibernate.type.ClassType@548a102f
2017-12-29 21:40:03,295 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@50a7bc6e
2017-12-29 21:40:03,295 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@50a7bc6e
2017-12-29 21:40:03,295 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@2d9d4f9d
2017-12-29 21:40:03,296 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration binary -> org.hibernate.type.BinaryType@358c99f5
2017-12-29 21:40:03,296 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration byte[] -> org.hibernate.type.BinaryType@358c99f5
2017-12-29 21:40:03,296 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration [B -> org.hibernate.type.BinaryType@358c99f5
2017-12-29 21:40:03,297 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@23282c25
2017-12-29 21:40:03,297 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@23282c25
2017-12-29 21:40:03,297 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@23282c25
2017-12-29 21:40:03,298 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration row_version -> org.hibernate.type.RowVersionType@258e2e41
2017-12-29 21:40:03,298 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration image -> org.hibernate.type.ImageType@78b1cc93
2017-12-29 21:40:03,299 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration characters -> org.hibernate.type.CharArrayType@475e586c
2017-12-29 21:40:03,299 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration char[] -> org.hibernate.type.CharArrayType@475e586c
2017-12-29 21:40:03,299 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration [C -> org.hibernate.type.CharArrayType@475e586c
2017-12-29 21:40:03,299 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@3b2cf7ab
2017-12-29 21:40:03,299 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@3b2cf7ab
2017-12-29 21:40:03,300 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@3b2cf7ab
2017-12-29 21:40:03,300 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration text -> org.hibernate.type.TextType@3c153a1
2017-12-29 21:40:03,300 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration ntext -> org.hibernate.type.NTextType@2b6856dd
2017-12-29 21:40:03,302 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration blob -> org.hibernate.type.BlobType@6e75aa0d
2017-12-29 21:40:03,302 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@6e75aa0d
2017-12-29 21:40:03,303 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@527e5409
2017-12-29 21:40:03,305 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration clob -> org.hibernate.type.ClobType@7fc2413d
2017-12-29 21:40:03,305 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@7fc2413d
2017-12-29 21:40:03,306 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration nclob -> org.hibernate.type.NClobType@2fd6b6c7
2017-12-29 21:40:03,306 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@2fd6b6c7
2017-12-29 21:40:03,306 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@223f3642
2017-12-29 21:40:03,307 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@78e94dcf
2017-12-29 21:40:03,307 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration serializable -> org.hibernate.type.SerializableType@16e7dcfd
2017-12-29 21:40:03,309 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration object -> org.hibernate.type.ObjectType@2928854b
2017-12-29 21:40:03,309 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@2928854b
2017-12-29 21:40:03,310 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@2f177a4b
2017-12-29 21:40:03,310 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@4278a03f
2017-12-29 21:40:03,310 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@147ed70f
2017-12-29 21:40:03,310 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@61dd025
2017-12-29 21:40:03,311 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@124c278f
2017-12-29 21:40:03,311 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@15b204a1
2017-12-29 21:40:03,311 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@77167fb7
2017-12-29 21:40:03,311 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@1fe20588
2017-12-29 21:40:03,316 +0100 [main] WARN  (DriverManagerConnectionProviderImpl.java:70) - HHH10001002: Using Hibernate built-in connection pool (not for production use!)
2017-12-29 21:40:03,328 +0100 [main] INFO  (DriverManagerConnectionProviderImpl.java:126) - HHH10001005: using driver [com.mysql.jdbc.Driver] at URL [jdbc:mysql://localhost:3306/DbRemote]
2017-12-29 21:40:03,328 +0100 [main] INFO  (DriverManagerConnectionProviderImpl.java:132) - HHH10001001: Connection properties: {user=userDB, password=userDB}
2017-12-29 21:40:03,328 +0100 [main] INFO  (DriverManagerConnectionProviderImpl.java:140) - HHH10001003: Autocommit mode: false
2017-12-29 21:40:03,330 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Initializing Connection pool with 1 Connections
2017-12-29 21:40:03,330 +0100 [main] INFO  (PooledConnections.java:41) - HHH000115: Hibernate connection pool size: 20 (min=1)
2017-12-29 21:40:03,535 +0100 [main] DEBUG (JdbcEnvironmentInitiator.java:72) - Database ->
       name : MySQL
    version : 5.7.20-log
      major : 5
      minor : 7
2017-12-29 21:40:03,535 +0100 [main] DEBUG (JdbcEnvironmentInitiator.java:83) - Driver ->
       name : MySQL Connector Java
    version : mysql-connector-java-5.1.45 ( Revision: 9131eefa398531c7dc98776e8a3fe839e544c5b2 )
      major : 5
      minor : 1
2017-12-29 21:40:03,535 +0100 [main] DEBUG (DelegatingBasicLogger.java:389) - JDBC version : 4.0
2017-12-29 21:40:03,544 +0100 [main] INFO  (Dialect.java:157) - HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2017-12-29 21:40:03,569 +0100 [main] DEBUG (IdentifierHelperBuilder.java:117) - JDBC driver metadata reported database stores quoted identifiers in more than one case
2017-12-29 21:40:03,572 +0100 [main] DEBUG (IdentifierHelperBuilder.java:191) - IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
2017-12-29 21:40:03,655 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2017-12-29 21:40:03,655 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2017-12-29 21:40:03,655 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2017-12-29 21:40:03,655 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2017-12-29 21:40:03,656 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2017-12-29 21:40:03,656 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2017-12-29 21:40:03,656 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2017-12-29 21:40:03,657 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2017-12-29 21:40:03,658 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
2017-12-29 21:40:03,658 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2017-12-29 21:40:03,659 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2017-12-29 21:40:03,659 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
2017-12-29 21:40:03,659 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2017-12-29 21:40:03,660 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2017-12-29 21:40:03,678 +0100 [main] DEBUG (Namespace.java:47) - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2017-12-29 21:40:03,701 +0100 [main] DEBUG (AnnotationBinder.java:511) - Binding entity from annotated class: model.entities.Address
2017-12-29 21:40:03,713 +0100 [main] DEBUG (QueryBinder.java:80) - Binding named query: findUnusedAddress => SELECT a FROM Address a WHERE a.id NOT IN (SELECT p.address.id FROM Person p)
2017-12-29 21:40:03,717 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2017-12-29 21:40:03,721 +0100 [main] DEBUG (EntityBinder.java:419) - Import with entity name Address
2017-12-29 21:40:03,723 +0100 [main] DEBUG (EntityBinder.java:695) - Bind entity model.entities.Address on table address
2017-12-29 21:40:03,737 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=id, insertable=true, updatable=true, unique=false}
2017-12-29 21:40:03,739 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property id with lazy=false
2017-12-29 21:40:03,740 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:id]
2017-12-29 21:40:03,741 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for id
2017-12-29 21:40:03,742 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property id
2017-12-29 21:40:03,746 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=city, insertable=true, updatable=true, unique=false}
2017-12-29 21:40:03,747 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property city with lazy=false
2017-12-29 21:40:03,747 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:city]
2017-12-29 21:40:03,747 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for city
2017-12-29 21:40:03,748 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property city
2017-12-29 21:40:03,748 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=country, insertable=true, updatable=true, unique=false}
2017-12-29 21:40:03,748 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property country with lazy=false
2017-12-29 21:40:03,748 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:country]
2017-12-29 21:40:03,748 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for country
2017-12-29 21:40:03,748 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property country
2017-12-29 21:40:03,748 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=mailBox, insertable=true, updatable=true, unique=false}
2017-12-29 21:40:03,748 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property mailBox with lazy=false
2017-12-29 21:40:03,749 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:mailBox]
2017-12-29 21:40:03,749 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for mailBox
2017-12-29 21:40:03,749 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property mailBox
2017-12-29 21:40:03,749 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=nr, insertable=true, updatable=true, unique=false}
2017-12-29 21:40:03,749 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property nr with lazy=false
2017-12-29 21:40:03,749 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:nr]
2017-12-29 21:40:03,749 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for nr
2017-12-29 21:40:03,749 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property nr
2017-12-29 21:40:03,749 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=postalCode, insertable=true, updatable=true, unique=false}
2017-12-29 21:40:03,750 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property postalCode with lazy=false
2017-12-29 21:40:03,750 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:postalCode]
2017-12-29 21:40:03,750 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for postalCode
2017-12-29 21:40:03,750 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property postalCode
2017-12-29 21:40:03,750 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=street, insertable=true, updatable=true, unique=false}
2017-12-29 21:40:03,750 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property street with lazy=false
2017-12-29 21:40:03,750 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:street]
2017-12-29 21:40:03,751 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for street
2017-12-29 21:40:03,751 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property street
2017-12-29 21:40:03,751 +0100 [main] DEBUG (AnnotationBinder.java:511) - Binding entity from annotated class: model.entities.Remote
2017-12-29 21:40:03,751 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2017-12-29 21:40:03,751 +0100 [main] DEBUG (EntityBinder.java:419) - Import with entity name Remote
2017-12-29 21:40:03,752 +0100 [main] DEBUG (EntityBinder.java:695) - Bind entity model.entities.Remote on table Remote
2017-12-29 21:40:03,752 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Remote), mappingColumn=id, insertable=true, updatable=true, unique=false}
2017-12-29 21:40:03,752 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property id with lazy=false
2017-12-29 21:40:03,753 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Remote:id]
2017-12-29 21:40:03,753 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for id
2017-12-29 21:40:03,753 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property id
2017-12-29 21:40:03,753 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Remote), mappingColumn=frequency, insertable=true, updatable=true, unique=false}
2017-12-29 21:40:03,753 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property frequency with lazy=false
2017-12-29 21:40:03,753 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Remote:frequency]
2017-12-29 21:40:03,754 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for frequency
2017-12-29 21:40:03,754 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property frequency
2017-12-29 21:40:03,754 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Remote), mappingColumn=isActive, insertable=true, updatable=true, unique=false}
2017-12-29 21:40:03,754 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property isActive with lazy=false
2017-12-29 21:40:03,754 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Remote:isActive]
2017-12-29 21:40:03,754 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for isActive
2017-12-29 21:40:03,754 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property isActive
2017-12-29 21:40:03,754 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Remote), mappingColumn=serialNumber, insertable=true, updatable=true, unique=false}
2017-12-29 21:40:03,754 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property serialNumber with lazy=false
2017-12-29 21:40:03,754 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Remote:serialNumber]
2017-12-29 21:40:03,755 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for serialNumber
2017-12-29 21:40:03,755 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property serialNumber
2017-12-29 21:40:03,755 +0100 [main] DEBUG (AnnotationBinder.java:511) - Binding entity from annotated class: model.entities.Person
2017-12-29 21:40:03,755 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2017-12-29 21:40:03,755 +0100 [main] DEBUG (EntityBinder.java:419) - Import with entity name Person
2017-12-29 21:40:03,755 +0100 [main] DEBUG (EntityBinder.java:695) - Bind entity model.entities.Person on table Person
2017-12-29 21:40:03,760 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Person), mappingColumn=id, insertable=true, updatable=true, unique=false}
2017-12-29 21:40:03,760 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property id with lazy=false
2017-12-29 21:40:03,760 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Person:id]
2017-12-29 21:40:03,760 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for id
2017-12-29 21:40:03,760 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property id
2017-12-29 21:40:03,761 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='addressId', referencedColumn='', mappedBy=''}
2017-12-29 21:40:03,761 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Person), mappingColumn=address, insertable=true, updatable=true, unique=false}
2017-12-29 21:40:03,763 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property address
2017-12-29 21:40:03,764 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Person), mappingColumn=endOfContract, insertable=true, updatable=true, unique=false}
2017-12-29 21:40:03,764 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property endOfContract with lazy=false
2017-12-29 21:40:03,764 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Person:endOfContract]
2017-12-29 21:40:03,764 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for endOfContract
2017-12-29 21:40:03,764 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property endOfContract
2017-12-29 21:40:03,765 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Person), mappingColumn=firstname, insertable=true, updatable=true, unique=false}
2017-12-29 21:40:03,765 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property firstname with lazy=false
2017-12-29 21:40:03,765 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Person:firstname]
2017-12-29 21:40:03,765 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for firstname
2017-12-29 21:40:03,765 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property firstname
2017-12-29 21:40:03,765 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Person), mappingColumn=lastname, insertable=true, updatable=true, unique=false}
2017-12-29 21:40:03,766 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property lastname with lazy=false
2017-12-29 21:40:03,766 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Person:lastname]
2017-12-29 21:40:03,766 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for lastname
2017-12-29 21:40:03,766 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property lastname
2017-12-29 21:40:03,766 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='remoteId', referencedColumn='', mappedBy=''}
2017-12-29 21:40:03,766 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Person), mappingColumn=remote, insertable=true, updatable=true, unique=false}
2017-12-29 21:40:03,767 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property remote
2017-12-29 21:40:03,767 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for id
2017-12-29 21:40:03,768 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for city
2017-12-29 21:40:03,768 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for country
2017-12-29 21:40:03,768 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for mailBox
2017-12-29 21:40:03,768 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for nr
2017-12-29 21:40:03,768 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for postalCode
2017-12-29 21:40:03,768 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for street
2017-12-29 21:40:03,768 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for id
2017-12-29 21:40:03,768 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for frequency
2017-12-29 21:40:03,769 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for isActive
2017-12-29 21:40:03,769 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for serialNumber
2017-12-29 21:40:03,769 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for id
2017-12-29 21:40:03,769 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for endOfContract
2017-12-29 21:40:03,769 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for firstname
2017-12-29 21:40:03,769 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for lastname
2017-12-29 21:40:03,772 +0100 [main] DEBUG (PrimaryKey.java:35) - Forcing column [id] to be non-null as it is part of the primary key for table [address]
2017-12-29 21:40:03,772 +0100 [main] DEBUG (PrimaryKey.java:35) - Forcing column [id] to be non-null as it is part of the primary key for table [remote]
2017-12-29 21:40:03,772 +0100 [main] DEBUG (PrimaryKey.java:35) - Forcing column [id] to be non-null as it is part of the primary key for table [person]
2017-12-29 21:40:03,773 +0100 [main] DEBUG (InFlightMetadataCollectorImpl.java:1798) - Resolving reference to class: model.entities.Address
2017-12-29 21:40:03,774 +0100 [main] DEBUG (InFlightMetadataCollectorImpl.java:1798) - Resolving reference to class: model.entities.Remote
2017-12-29 21:40:03,775 +0100 [main] DEBUG (InFlightMetadataCollectorImpl.java:1798) - Resolving reference to class: model.entities.Address
2017-12-29 21:40:03,775 +0100 [main] DEBUG (InFlightMetadataCollectorImpl.java:1798) - Resolving reference to class: model.entities.Remote
2017-12-29 21:40:03,798 +0100 [main] DEBUG (SessionFactoryImpl.java:200) - Building session factory
2017-12-29 21:40:03,799 +0100 [main] DEBUG (Settings.java:69) - SessionFactory name : null
2017-12-29 21:40:03,799 +0100 [main] DEBUG (Settings.java:70) - Automatic flush during beforeCompletion(): enabled
2017-12-29 21:40:03,799 +0100 [main] DEBUG (Settings.java:71) - Automatic session close at end of transaction: disabled
2017-12-29 21:40:03,799 +0100 [main] DEBUG (Settings.java:73) - Statistics: disabled
2017-12-29 21:40:03,799 +0100 [main] DEBUG (Settings.java:75) - Deleted entity synthetic identifier rollback: disabled
2017-12-29 21:40:03,799 +0100 [main] DEBUG (Settings.java:76) - Default entity-mode: pojo
2017-12-29 21:40:03,799 +0100 [main] DEBUG (Settings.java:77) - Check Nullability in Core (should be disabled when Bean Validation is on): enabled
2017-12-29 21:40:03,799 +0100 [main] DEBUG (Settings.java:78) - Allow initialization of lazy state outside session : disabled
2017-12-29 21:40:03,799 +0100 [main] DEBUG (Settings.java:80) - Using BatchFetchStyle : LEGACY
2017-12-29 21:40:03,799 +0100 [main] DEBUG (Settings.java:81) - Default batch fetch size: -1
2017-12-29 21:40:03,800 +0100 [main] DEBUG (Settings.java:82) - Maximum outer join fetch depth: 2
2017-12-29 21:40:03,800 +0100 [main] DEBUG (Settings.java:83) - Default null ordering: NONE
2017-12-29 21:40:03,800 +0100 [main] DEBUG (Settings.java:84) - Order SQL updates by primary key: disabled
2017-12-29 21:40:03,800 +0100 [main] DEBUG (Settings.java:85) - Order SQL inserts for batching: disabled
2017-12-29 21:40:03,800 +0100 [main] DEBUG (Settings.java:87) - multi-tenancy strategy : NONE
2017-12-29 21:40:03,800 +0100 [main] DEBUG (Settings.java:89) - JTA Track by Thread: enabled
2017-12-29 21:40:03,800 +0100 [main] DEBUG (Settings.java:91) - Query language substitutions: {}
2017-12-29 21:40:03,800 +0100 [main] DEBUG (Settings.java:92) - JPA query language strict compliance: disabled
2017-12-29 21:40:03,800 +0100 [main] DEBUG (Settings.java:93) - Named query checking : enabled
2017-12-29 21:40:03,800 +0100 [main] DEBUG (Settings.java:95) - Second-level cache: enabled
2017-12-29 21:40:03,800 +0100 [main] DEBUG (Settings.java:96) - Second-level query cache: disabled
2017-12-29 21:40:03,800 +0100 [main] DEBUG (Settings.java:97) - Second-level query cache factory: org.hibernate.cache.internal.StandardQueryCacheFactory@31edaa7d
2017-12-29 21:40:03,800 +0100 [main] DEBUG (Settings.java:98) - Second-level cache region prefix: null
2017-12-29 21:40:03,800 +0100 [main] DEBUG (Settings.java:99) - Optimize second-level cache for minimal puts: disabled
2017-12-29 21:40:03,800 +0100 [main] DEBUG (Settings.java:100) - Structured second-level cache entries: disabled
2017-12-29 21:40:03,801 +0100 [main] DEBUG (Settings.java:101) - Second-level cache direct-reference entries: disabled
2017-12-29 21:40:03,801 +0100 [main] DEBUG (Settings.java:102) - Automatic eviction of collection cache: disabled
2017-12-29 21:40:03,801 +0100 [main] DEBUG (Settings.java:104) - JDBC batch size: 15
2017-12-29 21:40:03,801 +0100 [main] DEBUG (Settings.java:105) - JDBC batch updates for versioned data: enabled
2017-12-29 21:40:03,801 +0100 [main] DEBUG (Settings.java:106) - Scrollable result sets: enabled
2017-12-29 21:40:03,801 +0100 [main] DEBUG (Settings.java:107) - Wrap result sets: disabled
2017-12-29 21:40:03,801 +0100 [main] DEBUG (Settings.java:108) - JDBC3 getGeneratedKeys(): enabled
2017-12-29 21:40:03,801 +0100 [main] DEBUG (Settings.java:109) - JDBC result set fetch size: null
2017-12-29 21:40:03,801 +0100 [main] DEBUG (Settings.java:110) - Connection release mode: AFTER_TRANSACTION
2017-12-29 21:40:03,801 +0100 [main] DEBUG (Settings.java:111) - Generate SQL with comments: disabled
2017-12-29 21:40:03,834 +0100 [main] DEBUG (SessionFactoryImpl.java:258) - Session factory constructed with filter configurations : {}
2017-12-29 21:40:03,835 +0100 [main] DEBUG (SessionFactoryImpl.java:259) - Instantiating session factory with properties: {sun.desktop=windows, awt.toolkit=sun.awt.windows.WToolkit, file.encoding.pkg=sun.io, java.specification.version=1.8, sun.cpu.isalist=amd64, sun.jnu.encoding=Cp1252, java.class.path=C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\log4j-1.2.17.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\mysql-connector-java-5.1.45-bin.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\antlr-2.7.7.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\classmate-1.3.0.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\dom4j-1.6.1.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\hibernate-commons-annotations-5.0.1.Final.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\hibernate-core-5.2.12.Final.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\hibernate-jpa-2.1-api-1.0.0.Final.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\jandex-2.0.3.Final.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\javassist-3.20.0-GA.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\jboss-logging-3.3.0.Final.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\jboss-transaction-api_1.2_spec-1.0.1.Final.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\eclipselink.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\javax.persistence-3.0-prelude-embedded-m2-sources.jar;C:\Users\BenJolien\Desktop\eclipse\plugins\org.junit_4.12.0.v201504281640\junit.jar;C:\Users\BenJolien\Desktop\eclipse\plugins\org.hamcrest.core_1.3.0.v201303031735.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\jcalendar-1.4.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\target\classes;C:\Users\BenJolien\.m2\repository\org\apache\maven\plugins\maven-compiler-plugin\3.7.0\maven-compiler-plugin-3.7.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-plugin-api\3.0\maven-plugin-api-3.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-model\3.0\maven-model-3.0.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\sisu\sisu-inject-plexus\1.4.2\sisu-inject-plexus-1.4.2.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\sisu\sisu-inject-bean\1.4.2\sisu-inject-bean-1.4.2.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\sisu\sisu-guice\2.1.7\sisu-guice-2.1.7-noaop.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-artifact\3.0\maven-artifact-3.0.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-utils\2.0.4\plexus-utils-2.0.4.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-core\3.0\maven-core-3.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-settings\3.0\maven-settings-3.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-settings-builder\3.0\maven-settings-builder-3.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-repository-metadata\3.0\maven-repository-metadata-3.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-model-builder\3.0\maven-model-builder-3.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-aether-provider\3.0\maven-aether-provider-3.0.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\aether\aether-impl\1.7\aether-impl-1.7.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\aether\aether-spi\1.7\aether-spi-1.7.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\aether\aether-api\1.7\aether-api-1.7.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\aether\aether-util\1.7\aether-util-1.7.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-interpolation\1.14\plexus-interpolation-1.14.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-classworlds\2.2.3\plexus-classworlds-2.2.3.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-component-annotations\1.5.5\plexus-component-annotations-1.5.5.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\plexus\plexus-sec-dispatcher\1.3\plexus-sec-dispatcher-1.3.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\plexus\plexus-cipher\1.4\plexus-cipher-1.4.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\shared\maven-shared-utils\3.1.0\maven-shared-utils-3.1.0.jar;C:\Users\BenJolien\.m2\repository\commons-io\commons-io\2.5\commons-io-2.5.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\shared\maven-shared-incremental\1.1\maven-shared-incremental-1.1.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-java\0.9.2\plexus-java-0.9.2.jar;C:\Users\BenJolien\.m2\repository\org\ow2\asm\asm\6.0_BETA\asm-6.0_BETA.jar;C:\Users\BenJolien\.m2\repository\com\thoughtworks\qdox\qdox\2.0-M7\qdox-2.0-M7.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-compiler-api\2.8.2\plexus-compiler-api-2.8.2.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-compiler-manager\2.8.2\plexus-compiler-manager-2.8.2.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-compiler-javac\2.8.2\plexus-compiler-javac-2.8.2.jar;C:\Users\BenJolien\.m2\repository\org\hibernate\hibernate-core\4.2.7.SP1\hibernate-core-4.2.7.SP1.jar;C:\Users\BenJolien\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\BenJolien\.m2\repository\org\jboss\logging\jboss-logging\3.1.0.GA\jboss-logging-3.1.0.GA.jar;C:\Users\BenJolien\.m2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;C:\Users\BenJolien\.m2\repository\org\javassist\javassist\3.18.1-GA\javassist-3.18.1-GA.jar;C:\Users\BenJolien\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.1_spec\1.0.1.Final\jboss-transaction-api_1.1_spec-1.0.1.Final.jar;C:\Users\BenJolien\.m2\repository\org\hibernate\common\hibernate-commons-annotations\4.0.2.Final\hibernate-commons-annotations-4.0.2.Final.jar;C:\Users\BenJolien\.m2\repository\mysql\mysql-connector-java\6.0.6\mysql-connector-java-6.0.6.jar;C:\Users\BenJolien\.m2\repository\org\fluttercode\datafactory\datafactory\0.8\datafactory-0.8.jar;C:\Users\BenJolien\.m2\repository\org\hibernate\javax\persistence\hibernate-jpa-2.0-api\1.0.1.Final\hibernate-jpa-2.0-api-1.0.1.Final.jar;C:\Users\BenJolien\.m2\repository\org\hibernate\hibernate-entitymanager\5.2.12.Final\hibernate-entitymanager-5.2.12.Final.jar;C:\Users\BenJolien\.m2\repository\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar;C:\Users\BenJolien\.m2\repository\net\bytebuddy\byte-buddy\1.6.14\byte-buddy-1.6.14.jar;C:\Users\BenJolien\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.0.1.Final\jboss-transaction-api_1.2_spec-1.0.1.Final.jar, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=http://java.oracle.com/, user.timezone=Europe/Berlin, javax.persistence.jdbc.user=****, javax.persistence.jdbc.url=jdbc:mysql://localhost:3306/DbRemote, os.name=Windows 10, java.vm.specification.version=1.8, user.country=BE, sun.java.launcher=SUN_STANDARD, sun.boot.library.path=C:\Program Files\Java\jre1.8.0_144\bin, sun.java.command=test.database.GenerateDummyData, sun.cpu.endian=little, user.home=C:\Users\BenJolien, user.language=nl, java.specification.vendor=Oracle Corporation, java.home=C:\Program Files\Java\jre1.8.0_144, file.separator=\, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, hibernate.transaction.coordinator_class=class org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorBuilderImpl, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, javax.persistence.jdbc.driver=com.mysql.jdbc.Driver, sun.boot.class.path=C:\Program Files\Java\jre1.8.0_144\lib\resources.jar;C:\Program Files\Java\jre1.8.0_144\lib\rt.jar;C:\Program Files\Java\jre1.8.0_144\lib\sunrsasign.jar;C:\Program Files\Java\jre1.8.0_144\lib\jsse.jar;C:\Program Files\Java\jre1.8.0_144\lib\jce.jar;C:\Program Files\Java\jre1.8.0_144\lib\charsets.jar;C:\Program Files\Java\jre1.8.0_144\lib\jfr.jar;C:\Program Files\Java\jre1.8.0_144\classes, user.script=, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=1.8.0_144-b01, user.name=BenJolien, path.separator=;, hibernate.connection.username=userDB, os.version=10.0, java.endorsed.dirs=C:\Program Files\Java\jre1.8.0_144\lib\endorsed, java.runtime.name=Java(TM) SE Runtime Environment, hibernate.connection.url=jdbc:mysql://localhost:3306/DbRemote, hibernate.ejb.persistenceUnitName=Afstandsbediening, file.encoding=UTF-8, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.connection.driver_class=com.mysql.jdbc.Driver, java.vendor.url.bug=http://bugreport.sun.com/bugreport/, java.io.tmpdir=C:\Users\BENJOL~1\AppData\Local\Temp\, java.version=1.8.0_144, user.dir=C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, hibernate.connection.password=****, java.awt.printerjob=sun.awt.windows.WPrinterJob, sun.os.patch.level=, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@41005828, java.library.path=C:\Program Files\Java\jre1.8.0_144\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:/Program Files/Java/jre1.8.0_151/bin/server;C:/Program Files/Java/jre1.8.0_151/bin;C:/Program Files/Java/jre1.8.0_151/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Program Files\Microsoft MPI\Bin\;C:\Program Files (x86)\Intel\iCLS Client\;C:\Program Files\Intel\iCLS Client\;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files (x86)\Windows Kits\10\Windows Performance Toolkit\;C:\Program Files\dotnet\;C:\Program Files\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files (x86)\GtkSharp\2.12\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\nodejs\;C:\Program Files\Microsoft\Web Platform Installer\;C:\Program Files\Microsoft SQL Server\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\110\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\110\DTS\Binn\;C:\Program Files\Microsoft SQL Server\110\DTS\Binn\;C:\Program Files (x86)\Microsoft SQL Server\Client SDK\ODBC\130\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\130\DTS\Binn\;C:\Program Files (x86)\Microsoft SQL Server\130\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files (x86)\scala\bin;C:\Program Files\ibm\gsk8\lib64;C:\Program Files (x86)\ibm\gsk8\lib;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Brackets\command;C:\Program Files\Git\cmd;C:\Program Files\MySQL\MySQL Utilities 1.6\;C:\Users\BenJolien\AppData\Local\Microsoft\WindowsApps;C:\Users\BenJolien\AppData\Roaming\npm;;C:\Users\BenJolien\Desktop\eclipse;;., java.vm.info=mixed mode, java.vendor=Oracle Corporation, java.vm.version=25.144-b01, hibernate.bytecode.use_reflection_optimizer=false, java.ext.dirs=C:\Program Files\Java\jre1.8.0_144\lib\ext;C:\WINDOWS\Sun\Java\lib\ext, sun.io.unicode.encoding=UnicodeLittle, javax.persistence.jdbc.password=userDB, java.class.version=52.0}
2017-12-29 21:40:03,843 +0100 [main] DEBUG (JaccIntegrator.java:80) - Skipping JACC integration as it was not enabled
2017-12-29 21:40:03,844 +0100 [main] DEBUG (CascadeStyles.java:268) - External cascade style registration [persist : STYLE_PERSIST_SKIPLAZY] overrode base registration [STYLE_PERSIST]
2017-12-29 21:40:03,888 +0100 [main] DEBUG (SessionFactoryImpl.java:298) - Instantiated session factory
2017-12-29 21:40:03,908 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:55) - Not known whether passed class name [model.entities.Address] is safe
2017-12-29 21:40:03,908 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:57) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.entities.Address
2017-12-29 21:40:03,915 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:55) - Not known whether passed class name [model.entities.Address] is safe
2017-12-29 21:40:03,915 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:57) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.entities.Address
2017-12-29 21:40:03,939 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:55) - Not known whether passed class name [model.entities.Remote] is safe
2017-12-29 21:40:03,940 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:57) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.entities.Remote
2017-12-29 21:40:03,940 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:55) - Not known whether passed class name [model.entities.Remote] is safe
2017-12-29 21:40:03,940 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:57) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.entities.Remote
2017-12-29 21:40:03,942 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:55) - Not known whether passed class name [model.entities.Person] is safe
2017-12-29 21:40:03,943 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:57) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.entities.Person
2017-12-29 21:40:03,945 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:55) - Not known whether passed class name [model.entities.Person] is safe
2017-12-29 21:40:03,945 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:57) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.entities.Person
2017-12-29 21:40:03,956 +0100 [main] DEBUG (AbstractEntityPersister.java:3608) - Static SQL for entity: model.entities.Address
2017-12-29 21:40:03,956 +0100 [main] DEBUG (AbstractEntityPersister.java:3613) -  Version select: select id from address where id =?
2017-12-29 21:40:03,956 +0100 [main] DEBUG (AbstractEntityPersister.java:3616) -  Snapshot select: select address_.id, address_.city as city2_0_, address_.country as country3_0_, address_.mailBox as mailBox4_0_, address_.nr as nr5_0_, address_.postalCode as postalCo6_0_, address_.street as street7_0_ from address address_ where address_.id=?
2017-12-29 21:40:03,956 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into address (city, country, mailBox, nr, postalCode, street, id) values (?, ?, ?, ?, ?, ?, ?)
2017-12-29 21:40:03,957 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update address set city=?, country=?, mailBox=?, nr=?, postalCode=?, street=? where id=?
2017-12-29 21:40:03,957 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from address where id=?
2017-12-29 21:40:03,957 +0100 [main] DEBUG (AbstractEntityPersister.java:3624) -  Identity insert: insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:40:03,968 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@663411de]
2017-12-29 21:40:03,969 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:40:03,969 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:40:03,969 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:40:03,969 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:40:03,969 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:40:03,969 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:40:03,969 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:40:03,976 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:40:03,979 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:40:03,980 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [NONE]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:40:03,980 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@47f4e407]
2017-12-29 21:40:03,981 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:40:03,981 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:40:03,981 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:40:03,981 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:40:03,981 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:40:03,981 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:40:03,981 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:40:03,981 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:40:03,982 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:40:03,982 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [READ]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:40:03,982 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@48d5f34e]
2017-12-29 21:40:03,982 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:40:03,982 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:40:03,982 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:40:03,982 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:40:03,982 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:40:03,982 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:40:03,982 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:40:03,983 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:40:03,983 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:40:03,983 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [UPGRADE]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? for update
2017-12-29 21:40:03,983 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6ff65192]
2017-12-29 21:40:03,983 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:40:03,983 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:40:03,983 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:40:03,983 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:40:03,983 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:40:03,983 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:40:03,984 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:40:03,984 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:40:03,984 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:40:03,984 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [UPGRADE_NOWAIT]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? for update
2017-12-29 21:40:03,984 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4af0df05]
2017-12-29 21:40:03,984 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:40:03,984 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:40:03,984 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:40:03,984 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:40:03,985 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:40:03,985 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:40:03,985 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:40:03,985 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:40:03,985 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:40:03,985 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [UPGRADE_SKIPLOCKED]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? for update
2017-12-29 21:40:03,985 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@acdb094]
2017-12-29 21:40:03,985 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:40:03,985 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:40:03,987 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:40:03,987 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:40:03,987 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:40:03,987 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:40:03,987 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:40:03,987 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:40:03,987 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:40:03,987 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [FORCE]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? for update
2017-12-29 21:40:03,988 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2b0f373b]
2017-12-29 21:40:03,988 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:40:03,988 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:40:03,988 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:40:03,988 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:40:03,988 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:40:03,988 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:40:03,988 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:40:03,988 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:40:03,989 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:40:03,989 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [PESSIMISTIC_READ]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? lock in share mode
2017-12-29 21:40:03,989 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4b45dcb8]
2017-12-29 21:40:03,989 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:40:03,989 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:40:03,989 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:40:03,989 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:40:03,990 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:40:03,990 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:40:03,990 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:40:03,990 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:40:03,990 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:40:03,990 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [PESSIMISTIC_WRITE]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? for update
2017-12-29 21:40:03,991 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2072acb2]
2017-12-29 21:40:03,991 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:40:03,991 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:40:03,991 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:40:03,991 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:40:03,991 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:40:03,991 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:40:03,991 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:40:03,992 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:40:03,992 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:40:03,992 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [PESSIMISTIC_FORCE_INCREMENT]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? for update
2017-12-29 21:40:03,992 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@35a9782c]
2017-12-29 21:40:03,992 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:40:03,992 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:40:03,993 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:40:03,993 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:40:03,993 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:40:03,993 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:40:03,993 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:40:03,993 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:40:03,993 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:40:03,993 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [OPTIMISTIC]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:40:03,993 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@45815ffc]
2017-12-29 21:40:03,994 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:40:03,994 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:40:03,994 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:40:03,994 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:40:03,994 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:40:03,994 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:40:03,994 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:40:03,994 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:40:03,994 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:40:03,994 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [OPTIMISTIC_FORCE_INCREMENT]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:40:04,002 +0100 [main] DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity model.entities.Address: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:40:04,002 +0100 [main] DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity model.entities.Address: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:40:04,002 +0100 [main] DEBUG (AbstractEntityPersister.java:3608) - Static SQL for entity: model.entities.Remote
2017-12-29 21:40:04,002 +0100 [main] DEBUG (AbstractEntityPersister.java:3613) -  Version select: select id from Remote where id =?
2017-12-29 21:40:04,002 +0100 [main] DEBUG (AbstractEntityPersister.java:3616) -  Snapshot select: select remote_.id, remote_.frequency as frequenc2_2_, remote_.isActive as isActive3_2_, remote_.serialNumber as serialNu4_2_ from Remote remote_ where remote_.id=?
2017-12-29 21:40:04,002 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into Remote (frequency, isActive, serialNumber, id) values (?, ?, ?, ?)
2017-12-29 21:40:04,002 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update Remote set frequency=?, isActive=?, serialNumber=? where id=?
2017-12-29 21:40:04,002 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from Remote where id=?
2017-12-29 21:40:04,003 +0100 [main] DEBUG (AbstractEntityPersister.java:3624) -  Identity insert: insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:40:04,003 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@68ead359]
2017-12-29 21:40:04,003 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:40:04,003 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:40:04,003 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:40:04,003 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:40:04,003 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:40:04,003 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:40:04,003 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [NONE]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:40:04,003 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@180da663]
2017-12-29 21:40:04,004 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:40:04,004 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:40:04,004 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:40:04,004 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:40:04,004 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:40:04,004 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:40:04,004 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [READ]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:40:04,004 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@340da44c]
2017-12-29 21:40:04,004 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:40:04,004 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:40:04,004 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:40:04,005 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:40:04,005 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:40:04,005 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:40:04,005 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [UPGRADE]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? for update
2017-12-29 21:40:04,005 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@37052337]
2017-12-29 21:40:04,005 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:40:04,005 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:40:04,005 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:40:04,005 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:40:04,005 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:40:04,005 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:40:04,006 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [UPGRADE_NOWAIT]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? for update
2017-12-29 21:40:04,006 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7a560583]
2017-12-29 21:40:04,006 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:40:04,006 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:40:04,006 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:40:04,007 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:40:04,007 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:40:04,007 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:40:04,008 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [UPGRADE_SKIPLOCKED]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? for update
2017-12-29 21:40:04,008 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@77a7cf58]
2017-12-29 21:40:04,008 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:40:04,008 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:40:04,008 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:40:04,008 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:40:04,008 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:40:04,008 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:40:04,009 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [FORCE]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? for update
2017-12-29 21:40:04,009 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@616fe72b]
2017-12-29 21:40:04,009 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:40:04,009 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:40:04,009 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:40:04,009 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:40:04,010 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:40:04,011 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:40:04,011 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [PESSIMISTIC_READ]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? lock in share mode
2017-12-29 21:40:04,011 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7e7b159b]
2017-12-29 21:40:04,011 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:40:04,011 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:40:04,012 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:40:04,012 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:40:04,012 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:40:04,012 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:40:04,013 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [PESSIMISTIC_WRITE]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? for update
2017-12-29 21:40:04,013 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@60957c0f]
2017-12-29 21:40:04,013 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:40:04,013 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:40:04,013 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:40:04,013 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:40:04,013 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:40:04,014 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:40:04,014 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [PESSIMISTIC_FORCE_INCREMENT]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? for update
2017-12-29 21:40:04,014 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@fcb4004]
2017-12-29 21:40:04,014 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:40:04,014 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:40:04,014 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:40:04,015 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:40:04,015 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:40:04,015 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:40:04,015 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [OPTIMISTIC]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:40:04,015 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@56e8b606]
2017-12-29 21:40:04,016 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:40:04,016 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:40:04,016 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:40:04,016 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:40:04,016 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:40:04,016 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:40:04,017 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [OPTIMISTIC_FORCE_INCREMENT]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:40:04,017 +0100 [main] DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity model.entities.Remote: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:40:04,017 +0100 [main] DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity model.entities.Remote: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:40:04,017 +0100 [main] DEBUG (AbstractEntityPersister.java:3608) - Static SQL for entity: model.entities.Person
2017-12-29 21:40:04,017 +0100 [main] DEBUG (AbstractEntityPersister.java:3613) -  Version select: select id from Person where id =?
2017-12-29 21:40:04,018 +0100 [main] DEBUG (AbstractEntityPersister.java:3616) -  Snapshot select: select person_.id, person_.addressId as addressI5_1_, person_.endOfContract as endOfCon2_1_, person_.firstname as firstnam3_1_, person_.lastname as lastname4_1_, person_.remoteId as remoteId6_1_ from Person person_ where person_.id=?
2017-12-29 21:40:04,018 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into Person (addressId, endOfContract, firstname, lastname, remoteId, id) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:40:04,018 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update Person set addressId=?, endOfContract=?, firstname=?, lastname=?, remoteId=? where id=?
2017-12-29 21:40:04,018 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from Person where id=?
2017-12-29 21:40:04,018 +0100 [main] DEBUG (AbstractEntityPersister.java:3624) -  Identity insert: insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:40:04,018 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@784c3487]
2017-12-29 21:40:04,019 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:40:04,023 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@c35172e]
2017-12-29 21:40:04,025 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.city
2017-12-29 21:40:04,026 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.country
2017-12-29 21:40:04,026 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.mailBox
2017-12-29 21:40:04,026 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.nr
2017-12-29 21:40:04,026 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.postalCode
2017-12-29 21:40:04,026 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.street
2017-12-29 21:40:04,026 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:40:04,026 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:40:04,026 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:40:04,026 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:40:04,027 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@ccb4b1b]
2017-12-29 21:40:04,027 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote.frequency
2017-12-29 21:40:04,027 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote.isActive
2017-12-29 21:40:04,027 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote.serialNumber
2017-12-29 21:40:04,027 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:40:04,028 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:40:04,028 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}
          - JOIN (JoinDefinedByMetadata(address)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=model.entities.Address)
                - SQL table alias mapping - address1_
                - alias suffix - 1_
                - suffixed key columns - {id1_0_1_}
          - JOIN (JoinDefinedByMetadata(remote)) : <gen:0> -> <gen:2>
             - EntityQuerySpaceImpl(uid=<gen:2>, entity=model.entities.Remote)
                - SQL table alias mapping - remote2_
                - alias suffix - 2_
                - suffixed key columns - {id1_2_2_}

2017-12-29 21:40:04,029 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [NONE]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.mailBox as mailBox4_0_1_, address1_.nr as nr5_0_1_, address1_.postalCode as postalCo6_0_1_, address1_.street as street7_0_1_, remote2_.id as id1_2_2_, remote2_.frequency as frequenc2_2_2_, remote2_.isActive as isActive3_2_2_, remote2_.serialNumber as serialNu4_2_2_ from Person person0_ left outer join address address1_ on person0_.addressId=address1_.id left outer join Remote remote2_ on person0_.remoteId=remote2_.id where person0_.id=?
2017-12-29 21:40:04,029 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7c1e2a2d]
2017-12-29 21:40:04,029 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:40:04,029 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@52d645b1]
2017-12-29 21:40:04,029 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.city
2017-12-29 21:40:04,029 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.country
2017-12-29 21:40:04,030 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.mailBox
2017-12-29 21:40:04,030 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.nr
2017-12-29 21:40:04,030 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.postalCode
2017-12-29 21:40:04,030 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.street
2017-12-29 21:40:04,030 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:40:04,030 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:40:04,030 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:40:04,030 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:40:04,030 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2cc3ad05]
2017-12-29 21:40:04,030 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote.frequency
2017-12-29 21:40:04,031 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote.isActive
2017-12-29 21:40:04,031 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote.serialNumber
2017-12-29 21:40:04,031 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:40:04,031 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:40:04,032 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}
          - JOIN (JoinDefinedByMetadata(address)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=model.entities.Address)
                - SQL table alias mapping - address1_
                - alias suffix - 1_
                - suffixed key columns - {id1_0_1_}
          - JOIN (JoinDefinedByMetadata(remote)) : <gen:0> -> <gen:2>
             - EntityQuerySpaceImpl(uid=<gen:2>, entity=model.entities.Remote)
                - SQL table alias mapping - remote2_
                - alias suffix - 2_
                - suffixed key columns - {id1_2_2_}

2017-12-29 21:40:04,032 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [READ]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.mailBox as mailBox4_0_1_, address1_.nr as nr5_0_1_, address1_.postalCode as postalCo6_0_1_, address1_.street as street7_0_1_, remote2_.id as id1_2_2_, remote2_.frequency as frequenc2_2_2_, remote2_.isActive as isActive3_2_2_, remote2_.serialNumber as serialNu4_2_2_ from Person person0_ left outer join address address1_ on person0_.addressId=address1_.id left outer join Remote remote2_ on person0_.remoteId=remote2_.id where person0_.id=?
2017-12-29 21:40:04,032 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@119020fb]
2017-12-29 21:40:04,032 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:40:04,033 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@c055c54]
2017-12-29 21:40:04,033 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:40:04,033 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:40:04,033 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:40:04,033 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:40:04,033 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@25e2ab5a]
2017-12-29 21:40:04,033 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:40:04,033 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:40:04,034 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 21:40:04,034 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [UPGRADE]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? for update
2017-12-29 21:40:04,034 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@35e5d0e5]
2017-12-29 21:40:04,034 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:40:04,034 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@55562aa9]
2017-12-29 21:40:04,035 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:40:04,035 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:40:04,035 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:40:04,035 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:40:04,035 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@655ef322]
2017-12-29 21:40:04,035 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:40:04,035 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:40:04,036 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 21:40:04,036 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [UPGRADE_NOWAIT]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? for update
2017-12-29 21:40:04,036 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7e276594]
2017-12-29 21:40:04,036 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:40:04,036 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5066d65f]
2017-12-29 21:40:04,037 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:40:04,037 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:40:04,037 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:40:04,037 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:40:04,037 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4233e892]
2017-12-29 21:40:04,037 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:40:04,037 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:40:04,038 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 21:40:04,038 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [UPGRADE_SKIPLOCKED]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? for update
2017-12-29 21:40:04,038 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@77d2e85]
2017-12-29 21:40:04,038 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:40:04,038 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@58ffcbd7]
2017-12-29 21:40:04,038 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:40:04,038 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:40:04,038 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:40:04,038 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:40:04,039 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@555cf22]
2017-12-29 21:40:04,039 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:40:04,039 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:40:04,040 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 21:40:04,040 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [FORCE]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? for update
2017-12-29 21:40:04,040 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6bb2d00b]
2017-12-29 21:40:04,040 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:40:04,040 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1a9c38eb]
2017-12-29 21:40:04,040 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:40:04,041 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:40:04,041 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:40:04,041 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:40:04,041 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@319bc845]
2017-12-29 21:40:04,041 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:40:04,041 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:40:04,042 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 21:40:04,042 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [PESSIMISTIC_READ]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? lock in share mode
2017-12-29 21:40:04,042 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4c5474f5]
2017-12-29 21:40:04,042 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:40:04,042 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@54e22bdd]
2017-12-29 21:40:04,042 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:40:04,042 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:40:04,042 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:40:04,043 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:40:04,043 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3bd418e4]
2017-12-29 21:40:04,043 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:40:04,043 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:40:04,043 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 21:40:04,044 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [PESSIMISTIC_WRITE]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? for update
2017-12-29 21:40:04,044 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@544820b7]
2017-12-29 21:40:04,044 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:40:04,044 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2e61d218]
2017-12-29 21:40:04,044 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:40:04,044 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:40:04,044 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:40:04,045 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:40:04,045 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3569fc08]
2017-12-29 21:40:04,045 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:40:04,045 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:40:04,045 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 21:40:04,046 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [PESSIMISTIC_FORCE_INCREMENT]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? for update
2017-12-29 21:40:04,046 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@20b12f8a]
2017-12-29 21:40:04,046 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:40:04,046 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2e554a3b]
2017-12-29 21:40:04,046 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:40:04,046 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:40:04,046 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:40:04,046 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:40:04,046 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@54a67a45]
2017-12-29 21:40:04,047 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:40:04,047 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:40:04,047 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 21:40:04,047 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [OPTIMISTIC]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=?
2017-12-29 21:40:04,047 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7d42c224]
2017-12-29 21:40:04,048 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:40:04,048 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@522a32b1]
2017-12-29 21:40:04,048 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:40:04,048 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:40:04,048 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:40:04,048 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:40:04,048 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@35390ee3]
2017-12-29 21:40:04,048 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:40:04,049 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:40:04,049 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 21:40:04,049 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [OPTIMISTIC_FORCE_INCREMENT]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=?
2017-12-29 21:40:04,050 +0100 [main] DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity model.entities.Person: select person0_.id as id1_1_2_, person0_.addressId as addressI5_1_2_, person0_.endOfContract as endOfCon2_1_2_, person0_.firstname as firstnam3_1_2_, person0_.lastname as lastname4_1_2_, person0_.remoteId as remoteId6_1_2_, address1_.id as id1_0_0_, address1_.city as city2_0_0_, address1_.country as country3_0_0_, address1_.mailBox as mailBox4_0_0_, address1_.nr as nr5_0_0_, address1_.postalCode as postalCo6_0_0_, address1_.street as street7_0_0_, remote2_.id as id1_2_1_, remote2_.frequency as frequenc2_2_1_, remote2_.isActive as isActive3_2_1_, remote2_.serialNumber as serialNu4_2_1_ from Person person0_ left outer join address address1_ on person0_.addressId=address1_.id left outer join Remote remote2_ on person0_.remoteId=remote2_.id where person0_.id=?
2017-12-29 21:40:04,050 +0100 [main] DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity model.entities.Person: select person0_.id as id1_1_2_, person0_.addressId as addressI5_1_2_, person0_.endOfContract as endOfCon2_1_2_, person0_.firstname as firstnam3_1_2_, person0_.lastname as lastname4_1_2_, person0_.remoteId as remoteId6_1_2_, address1_.id as id1_0_0_, address1_.city as city2_0_0_, address1_.country as country3_0_0_, address1_.mailBox as mailBox4_0_0_, address1_.nr as nr5_0_0_, address1_.postalCode as postalCo6_0_0_, address1_.street as street7_0_0_, remote2_.id as id1_2_1_, remote2_.frequency as frequenc2_2_1_, remote2_.isActive as isActive3_2_1_, remote2_.serialNumber as serialNu4_2_1_ from Person person0_ left outer join address address1_ on person0_.addressId=address1_.id left outer join Remote remote2_ on person0_.remoteId=remote2_.id where person0_.id=?
2017-12-29 21:40:04,069 +0100 [main] DEBUG (SchemaManagementToolCoordinator.java:56) - No actions specified; doing nothing
2017-12-29 21:40:04,069 +0100 [main] DEBUG (JtaPlatformInitiator.java:42) - No JtaPlatform was specified, checking resolver
2017-12-29 21:40:04,070 +0100 [main] DEBUG (JtaPlatformResolverInitiator.java:33) - No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
2017-12-29 21:40:04,073 +0100 [main] DEBUG (StandardJtaPlatformResolver.java:102) - Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2017-12-29 21:40:04,073 +0100 [main] DEBUG (NamedQueryRepository.java:151) - Checking 1 named HQL queries
2017-12-29 21:40:04,073 +0100 [main] DEBUG (NamedQueryRepository.java:155) - Checking named query: findUnusedAddress
2017-12-29 21:40:04,076 +0100 [main] DEBUG (QueryTranslatorFactoryInitiator.java:45) - QueryTranslatorFactory : org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory@c1bd0be
2017-12-29 21:40:04,076 +0100 [main] INFO  (QueryTranslatorFactoryInitiator.java:47) - HHH000397: Using ASTQueryTranslatorFactory
2017-12-29 21:40:04,095 +0100 [main] DEBUG (QueryTranslatorImpl.java:282) - parse() - HQL: SELECT a FROM model.entities.Address a WHERE a.id NOT IN (SELECT p.address.id FROM model.entities.Person p)
2017-12-29 21:40:04,099 +0100 [main] DEBUG (ErrorCounter.java:95) - throwQueryException() : no errors
2017-12-29 21:40:04,100 +0100 [main] DEBUG (QueryTranslatorImpl.java:305) - --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'FROM'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[IDENT] Node: 'model'
    |  |     |  |  \-[IDENT] Node: 'entities'
    |  |     |  \-[IDENT] Node: 'Address'
    |  |     \-[ALIAS] Node: 'a'
    |  \-[SELECT] Node: 'SELECT'
    |     \-[IDENT] Node: 'a'
    \-[WHERE] Node: 'WHERE'
       \-[NOT_IN] Node: 'not in'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'a'
          |  \-[IDENT] Node: 'id'
          \-[IN_LIST] Node: 'inList'
             \-[QUERY] Node: 'query'
                \-[SELECT_FROM] Node: 'SELECT_FROM'
                   +-[FROM] Node: 'FROM'
                   |  \-[RANGE] Node: 'RANGE'
                   |     +-[DOT] Node: '.'
                   |     |  +-[DOT] Node: '.'
                   |     |  |  +-[IDENT] Node: 'model'
                   |     |  |  \-[IDENT] Node: 'entities'
                   |     |  \-[IDENT] Node: 'Person'
                   |     \-[ALIAS] Node: 'p'
                   \-[SELECT] Node: 'SELECT'
                      \-[DOT] Node: '.'
                         +-[DOT] Node: '.'
                         |  +-[IDENT] Node: 'p'
                         |  \-[IDENT] Node: 'address'
                         \-[IDENT] Node: 'id'

2017-12-29 21:40:04,117 +0100 [main] DEBUG (HqlSqlBaseWalker.java:124) - select << begin [level=1, statement=select]
2017-12-29 21:40:04,126 +0100 [main] DEBUG (FromElement.java:147) - FromClause{level=1} : model.entities.Address (a) -> address0_
2017-12-29 21:40:04,126 +0100 [main] DEBUG (FromReferenceNode.java:60) - Resolved : a -> address0_.id
2017-12-29 21:40:04,128 +0100 [main] DEBUG (FromReferenceNode.java:60) - Resolved : a -> address0_.id
2017-12-29 21:40:04,129 +0100 [main] DEBUG (DotNode.java:666) - getDataType() : id -> org.hibernate.type.IntegerType@3ffcd140
2017-12-29 21:40:04,129 +0100 [main] DEBUG (FromReferenceNode.java:60) - Resolved : a.id -> address0_.id
2017-12-29 21:40:04,129 +0100 [main] DEBUG (HqlSqlBaseWalker.java:124) - select << begin [level=2, statement=select]
2017-12-29 21:40:04,130 +0100 [main] DEBUG (FromElement.java:147) - FromClause{level=2} : model.entities.Person (p) -> person1_
2017-12-29 21:40:04,130 +0100 [main] DEBUG (FromReferenceNode.java:60) - Resolved : p -> person1_.id
2017-12-29 21:40:04,131 +0100 [main] DEBUG (DotNode.java:666) - getDataType() : address -> org.hibernate.type.ManyToOneType(model.entities.Address)
2017-12-29 21:40:04,131 +0100 [main] DEBUG (DotNode.java:625) - dereferenceShortcut() : property id in model.entities.Person does not require a join.
2017-12-29 21:40:04,131 +0100 [main] DEBUG (DotNode.java:650) - Unresolved property path is now 'address.id'
2017-12-29 21:40:04,131 +0100 [main] DEBUG (FromReferenceNode.java:60) - Resolved : p.address -> person1_.addressId
2017-12-29 21:40:04,131 +0100 [main] DEBUG (DotNode.java:666) - getDataType() : address.id -> org.hibernate.type.IntegerType@3ffcd140
2017-12-29 21:40:04,131 +0100 [main] DEBUG (FromReferenceNode.java:60) - Resolved : p.address.id -> person1_.addressId
2017-12-29 21:40:04,131 +0100 [main] DEBUG (HqlSqlBaseWalker.java:128) - select : finishing up [level=2, statement=select]
2017-12-29 21:40:04,131 +0100 [main] DEBUG (HqlSqlWalker.java:747) - processQuery() :  ( SELECT ( {select clause} ( person1_.addressId ( person1_.addressId person1_.id address ) id ) ) ( FromClause{level=2} Person person1_ ) )
2017-12-29 21:40:04,134 +0100 [main] DEBUG (JoinProcessor.java:192) - Using FROM fragment [Person person1_]
2017-12-29 21:40:04,135 +0100 [main] DEBUG (HqlSqlBaseWalker.java:132) - select >> end [level=2, statement=select]
2017-12-29 21:40:04,136 +0100 [main] DEBUG (HqlSqlBaseWalker.java:128) - select : finishing up [level=1, statement=select]
2017-12-29 21:40:04,136 +0100 [main] DEBUG (HqlSqlWalker.java:747) - processQuery() :  ( SELECT ( {select clause} address0_.id ) ( FromClause{level=1} address address0_ ) ( WHERE ( not in ( address0_.id address0_.id id ) ( inList ( SELECT ( {select clause} ( person1_.addressId ( person1_.addressId person1_.id address ) id ) ) ( FromClause{level=2} Person person1_ ) ) ) ) ) )
2017-12-29 21:40:04,137 +0100 [main] DEBUG (JoinProcessor.java:192) - Using FROM fragment [address address0_]
2017-12-29 21:40:04,138 +0100 [main] DEBUG (HqlSqlBaseWalker.java:132) - select >> end [level=1, statement=select]
2017-12-29 21:40:04,138 +0100 [main] DEBUG (QueryTranslatorImpl.java:269) - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (address,Person)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'address0_.id as id1_0_' {alias=a, className=model.entities.Address, tableAlias=address0_}
    |  \-[SQL_TOKEN] SqlFragment: 'address0_.city as city2_0_, address0_.country as country3_0_, address0_.mailBox as mailBox4_0_, address0_.nr as nr5_0_, address0_.postalCode as postalCo6_0_, address0_.street as street7_0_'
    +-[FROM] FromClause: 'FROM' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[a], fromElementByTableAlias=[address0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'address address0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=a,role=null,tableName=address,tableAlias=address0_,origin=null,columns={,className=model.entities.Address}}
    \-[WHERE] SqlNode: 'WHERE'
       \-[NOT_IN] InLogicOperatorNode: 'not in'
          +-[DOT] DotNode: 'address0_.id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=id,path=a.id,tableAlias=address0_,className=model.entities.Address,classAlias=a}
          |  +-[ALIAS_REF] IdentNode: 'address0_.id' {alias=a, className=model.entities.Address, tableAlias=address0_}
          |  \-[IDENT] IdentNode: 'id' {originalText=id}
          \-[IN_LIST] SqlNode: 'inList'
             \-[SELECT] QueryNode: 'SELECT'  querySpaces (address,Person)
                +-[SELECT_CLAUSE] SelectClause: '{select clause}'
                |  \-[DOT] DotNode: 'person1_.addressId' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=address.id,path=p.address.id,tableAlias=person1_,className=model.entities.Person,classAlias=p}
                |     +-[DOT] DotNode: 'person1_.addressId' {propertyName=id,dereferenceType=UNKNOWN,getPropertyPath=address.id,path=p.address,tableAlias=person1_,className=model.entities.Person,classAlias=p}
                |     |  +-[ALIAS_REF] IdentNode: 'person1_.id' {alias=p, className=model.entities.Person, tableAlias=person1_}
                |     |  \-[IDENT] IdentNode: 'address' {originalText=address}
                |     \-[IDENT] IdentNode: 'id' {originalText=id}
                \-[FROM] FromClause: 'FROM' FromClause{level=2, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[p], fromElementByTableAlias=[person1_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
                   \-[FROM_FRAGMENT] FromElement: 'Person person1_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=p,role=null,tableName=Person,tableAlias=person1_,origin=null,columns={,className=model.entities.Person}}

2017-12-29 21:40:04,138 +0100 [main] DEBUG (ErrorCounter.java:95) - throwQueryException() : no errors
2017-12-29 21:40:04,142 +0100 [main] DEBUG (QueryTranslatorImpl.java:251) - HQL: SELECT a FROM model.entities.Address a WHERE a.id NOT IN (SELECT p.address.id FROM model.entities.Person p)
2017-12-29 21:40:04,142 +0100 [main] DEBUG (QueryTranslatorImpl.java:252) - SQL: select address0_.id as id1_0_, address0_.city as city2_0_, address0_.country as country3_0_, address0_.mailBox as mailBox4_0_, address0_.nr as nr5_0_, address0_.postalCode as postalCo6_0_, address0_.street as street7_0_ from address address0_ where address0_.id not in  (select person1_.addressId from Person person1_)
2017-12-29 21:40:04,142 +0100 [main] DEBUG (ErrorCounter.java:95) - throwQueryException() : no errors
2017-12-29 21:40:04,145 +0100 [main] DEBUG (NamedQueryRepository.java:167) - Checking 0 named SQL queries
2017-12-29 21:40:04,146 +0100 [main] DEBUG (SessionFactoryRegistry.java:52) - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@4baf352a
2017-12-29 21:40:04,147 +0100 [main] DEBUG (SessionFactoryRegistry.java:74) - Registering SessionFactory: d03110ed-89f7-43ba-be3f-651915a5be59 (<unnamed>)
2017-12-29 21:40:04,147 +0100 [main] DEBUG (SessionFactoryRegistry.java:81) - Not binding SessionFactory to JNDI, no JNDI name configured
2017-12-29 21:40:04,216 +0100 [main] DEBUG (StatisticsInitiator.java:82) - Statistics initialized [enabled=false]
2017-12-29 21:40:04,230 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:04,232 +0100 [main] DEBUG (DefaultMergeEventListener.java:93) - EntityCopyObserver strategy: disallow
2017-12-29 21:40:04,242 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:04,245 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:40:04,258 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 1
2017-12-29 21:40:04,258 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:04,260 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:04,261 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:40:04,263 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 1
2017-12-29 21:40:04,263 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:04,264 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:04,264 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:40:04,268 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 1
2017-12-29 21:40:04,268 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:04,268 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:04,269 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:04,270 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:04,272 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:40:04,272 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:04,273 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:04,274 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=1, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=1}
2017-12-29 21:40:04,274 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=952edcfe-4bbb-47e1-b785-09ecc8d1d80a, id=1, isActive=true, frequency=736307}
2017-12-29 21:40:04,274 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Lindsey, address=model.entities.Address#1, id=1, remote=model.entities.Remote#1, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Craft}
2017-12-29 21:40:04,325 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:04,326 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:04,327 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:04,327 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:04,328 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:40:04,328 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 2
2017-12-29 21:40:04,329 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:04,329 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:04,329 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:40:04,330 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 2
2017-12-29 21:40:04,330 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:04,331 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:04,331 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:40:04,381 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 2
2017-12-29 21:40:04,381 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:04,381 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:04,381 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:04,381 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:04,382 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:40:04,382 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:04,382 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:04,382 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=2, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=2}
2017-12-29 21:40:04,382 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=8cd4435a-addb-4554-817e-e6b012e962da, id=2, isActive=true, frequency=666969}
2017-12-29 21:40:04,382 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Erica, address=model.entities.Address#2, id=2, remote=model.entities.Remote#2, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Larsen}
2017-12-29 21:40:04,448 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:04,448 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:04,449 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:04,449 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:04,450 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:40:04,450 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 3
2017-12-29 21:40:04,450 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:04,451 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:04,451 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:40:04,452 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 3
2017-12-29 21:40:04,452 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:04,452 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:04,452 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:40:04,482 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 3
2017-12-29 21:40:04,482 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:04,482 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:04,483 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:04,483 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:04,483 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:40:04,483 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:04,483 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:04,483 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=1cb03426-898a-4aa7-97a5-6b3adc574d3f, id=3, isActive=true, frequency=313461}
2017-12-29 21:40:04,483 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Ryan, address=model.entities.Address#3, id=3, remote=model.entities.Remote#3, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Levine}
2017-12-29 21:40:04,483 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=3, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=3}
2017-12-29 21:40:04,554 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:04,554 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:04,554 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:04,555 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:04,555 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:40:04,556 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 4
2017-12-29 21:40:04,556 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:04,556 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:04,557 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:40:04,557 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 4
2017-12-29 21:40:04,557 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:04,558 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:04,558 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:40:04,659 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 4
2017-12-29 21:40:04,659 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:04,660 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:04,660 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:04,660 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:04,660 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:40:04,661 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:04,661 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:04,661 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=ec346828-d250-4f0d-8173-fe0c9e7b94fb, id=4, isActive=true, frequency=440838}
2017-12-29 21:40:04,661 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=4, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=4}
2017-12-29 21:40:04,661 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Erika, address=model.entities.Address#4, id=4, remote=model.entities.Remote#4, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Smith}
2017-12-29 21:40:04,727 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:04,727 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:04,727 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:04,727 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:04,728 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:40:04,729 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 5
2017-12-29 21:40:04,729 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:04,729 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:04,729 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:40:04,730 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 5
2017-12-29 21:40:04,730 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:04,731 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:04,731 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:40:04,733 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 5
2017-12-29 21:40:04,733 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:04,734 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:04,734 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:04,734 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:04,735 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:40:04,735 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:04,735 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:04,735 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=5, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=5}
2017-12-29 21:40:04,735 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=2d6e45f5-b698-4ec7-a3a4-235bbae745c6, id=5, isActive=true, frequency=411760}
2017-12-29 21:40:04,735 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Brooklyn, address=model.entities.Address#5, id=5, remote=model.entities.Remote#5, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Sloan}
2017-12-29 21:40:04,957 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:04,959 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:04,960 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:04,962 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:04,962 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:40:04,965 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 6
2017-12-29 21:40:04,966 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:04,967 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:04,967 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:40:04,969 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 6
2017-12-29 21:40:04,970 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:04,971 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:04,971 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:40:04,974 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 6
2017-12-29 21:40:04,974 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:04,975 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:04,975 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:04,975 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:04,976 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:40:04,976 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:04,976 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:04,976 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Karen, address=model.entities.Address#6, id=6, remote=model.entities.Remote#6, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Mayer}
2017-12-29 21:40:04,976 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=6, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=6}
2017-12-29 21:40:04,977 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=cc3597be-5540-4600-8ced-a185523f7ad9, id=6, isActive=true, frequency=723336}
2017-12-29 21:40:05,068 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:05,069 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:05,069 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:05,070 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,070 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:40:05,071 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 7
2017-12-29 21:40:05,072 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,072 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,072 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:40:05,073 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 7
2017-12-29 21:40:05,073 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,073 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,074 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:40:05,075 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 7
2017-12-29 21:40:05,075 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,075 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:05,075 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:05,076 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:05,076 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:40:05,076 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:05,077 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:05,077 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Eddie, address=model.entities.Address#7, id=7, remote=model.entities.Remote#7, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=O'neill}
2017-12-29 21:40:05,077 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=7, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=7}
2017-12-29 21:40:05,077 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=a3abd251-ae0f-4cdd-9c43-bf46196b8852, id=7, isActive=true, frequency=85063}
2017-12-29 21:40:05,132 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:05,132 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:05,132 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:05,133 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,133 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:40:05,134 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 8
2017-12-29 21:40:05,135 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,135 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,135 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:40:05,136 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 8
2017-12-29 21:40:05,137 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,137 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,137 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:40:05,138 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 8
2017-12-29 21:40:05,139 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,139 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:05,139 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:05,139 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:05,140 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:40:05,140 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:05,140 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:05,140 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=8, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=8}
2017-12-29 21:40:05,140 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Nancy, address=model.entities.Address#8, id=8, remote=model.entities.Remote#8, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Stevens}
2017-12-29 21:40:05,140 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=afcfbd4c-73d6-4846-90ab-e31e8d640c98, id=8, isActive=true, frequency=370014}
2017-12-29 21:40:05,314 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:05,315 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:05,316 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:05,317 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,317 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:40:05,318 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 9
2017-12-29 21:40:05,319 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,319 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,319 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:40:05,321 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 9
2017-12-29 21:40:05,321 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,321 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,322 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:40:05,323 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 9
2017-12-29 21:40:05,323 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,323 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:05,324 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:05,324 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:05,324 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:40:05,324 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:05,325 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:05,325 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=9, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=9}
2017-12-29 21:40:05,325 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=6af634a8-785f-49f1-a0cd-ee9b11676fcd, id=9, isActive=true, frequency=878906}
2017-12-29 21:40:05,325 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Chasity, address=model.entities.Address#9, id=9, remote=model.entities.Remote#9, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Conway}
2017-12-29 21:40:05,405 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:05,406 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:05,406 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:05,407 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,407 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:40:05,407 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 10
2017-12-29 21:40:05,408 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,408 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,408 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:40:05,409 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 10
2017-12-29 21:40:05,409 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,409 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,409 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:40:05,410 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 10
2017-12-29 21:40:05,410 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,410 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:05,410 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:05,410 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:05,410 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:40:05,410 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:05,410 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:05,411 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=10, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=10}
2017-12-29 21:40:05,411 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=4774cba2-65f1-4fb4-9a85-e83afc098682, id=10, isActive=true, frequency=335250}
2017-12-29 21:40:05,411 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Aaron, address=model.entities.Address#10, id=10, remote=model.entities.Remote#10, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=McCray}
2017-12-29 21:40:05,436 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:05,436 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:05,437 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:05,437 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,437 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:40:05,438 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 11
2017-12-29 21:40:05,438 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,438 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,439 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:40:05,439 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 11
2017-12-29 21:40:05,439 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,440 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,440 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:40:05,440 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 11
2017-12-29 21:40:05,440 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,441 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:05,441 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:05,441 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:05,441 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:40:05,441 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:05,441 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:05,441 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=b1e2c41e-8326-4c1a-ab79-04578138892d, id=11, isActive=true, frequency=446800}
2017-12-29 21:40:05,441 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Kendra, address=model.entities.Address#11, id=11, remote=model.entities.Remote#11, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Allen}
2017-12-29 21:40:05,441 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=11, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=11}
2017-12-29 21:40:05,470 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:05,470 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:05,470 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:05,471 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,471 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:40:05,472 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 12
2017-12-29 21:40:05,472 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,472 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,472 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:40:05,473 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 12
2017-12-29 21:40:05,473 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,473 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,473 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:40:05,474 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 12
2017-12-29 21:40:05,474 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,474 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:05,474 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:05,475 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:05,475 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:40:05,475 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:05,475 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:05,475 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=62fb3c33-8f0f-4cf4-8876-fb0daba09799, id=12, isActive=true, frequency=670279}
2017-12-29 21:40:05,475 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=12, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=12}
2017-12-29 21:40:05,475 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Jenna, address=model.entities.Address#12, id=12, remote=model.entities.Remote#12, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Burns}
2017-12-29 21:40:05,499 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:05,499 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:05,499 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:05,499 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,499 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:40:05,500 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 13
2017-12-29 21:40:05,500 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,501 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,501 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:40:05,501 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 13
2017-12-29 21:40:05,501 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,502 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,502 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:40:05,504 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 13
2017-12-29 21:40:05,504 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,505 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:05,505 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:05,505 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:05,505 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:40:05,505 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:05,505 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:05,505 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=13, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=13}
2017-12-29 21:40:05,505 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=a8b1a91f-6121-491e-8c0c-d839243bcee7, id=13, isActive=true, frequency=746699}
2017-12-29 21:40:05,505 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Jane, address=model.entities.Address#13, id=13, remote=model.entities.Remote#13, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Mayo}
2017-12-29 21:40:05,526 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:05,527 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:05,527 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:05,528 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,528 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:40:05,529 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 14
2017-12-29 21:40:05,529 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,529 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,529 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:40:05,530 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 14
2017-12-29 21:40:05,530 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,530 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,530 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:40:05,531 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 14
2017-12-29 21:40:05,531 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,531 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:05,531 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:05,531 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:05,531 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:40:05,531 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:05,531 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:05,532 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=George, address=model.entities.Address#14, id=14, remote=model.entities.Remote#14, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Suarez}
2017-12-29 21:40:05,532 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=14, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=14}
2017-12-29 21:40:05,532 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=5cb55aef-5606-4d0f-8aa4-7917f9216ff9, id=14, isActive=true, frequency=578407}
2017-12-29 21:40:05,559 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:05,559 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:05,560 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:05,561 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,561 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:40:05,603 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 15
2017-12-29 21:40:05,604 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,604 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,604 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:40:05,605 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 15
2017-12-29 21:40:05,605 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,605 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,605 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:40:05,606 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 15
2017-12-29 21:40:05,606 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,606 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:05,606 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:05,607 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:05,607 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:40:05,607 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:05,607 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:05,607 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Janet, address=model.entities.Address#15, id=15, remote=model.entities.Remote#15, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Abbott}
2017-12-29 21:40:05,607 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=15, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=15}
2017-12-29 21:40:05,607 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=84305f91-79cc-429d-b23b-447c3d21d303, id=15, isActive=true, frequency=879130}
2017-12-29 21:40:05,637 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:05,637 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:05,638 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:05,638 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,639 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:40:05,639 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 16
2017-12-29 21:40:05,640 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,640 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,640 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:40:05,641 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 16
2017-12-29 21:40:05,641 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,642 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,642 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:40:05,643 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 16
2017-12-29 21:40:05,643 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,643 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:05,644 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:05,644 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:05,644 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:40:05,644 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:05,644 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:05,644 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=16, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=16}
2017-12-29 21:40:05,645 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Steven, address=model.entities.Address#16, id=16, remote=model.entities.Remote#16, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Marshall}
2017-12-29 21:40:05,645 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=93b590ef-20d7-4866-af8b-24d067d01c98, id=16, isActive=true, frequency=328219}
2017-12-29 21:40:05,681 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:05,681 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:05,681 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:05,682 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,682 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:40:05,683 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 17
2017-12-29 21:40:05,683 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,683 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,683 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:40:05,684 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 17
2017-12-29 21:40:05,684 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,684 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,684 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:40:05,685 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 17
2017-12-29 21:40:05,685 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,686 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:05,686 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:05,686 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:05,686 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:40:05,686 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:05,686 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:05,686 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=17, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=17}
2017-12-29 21:40:05,686 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=e6185158-de0b-4ec0-8c6b-a6142383f9a3, id=17, isActive=true, frequency=485727}
2017-12-29 21:40:05,686 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Shane, address=model.entities.Address#17, id=17, remote=model.entities.Remote#17, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Heath}
2017-12-29 21:40:05,715 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:05,715 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:05,715 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:05,716 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,716 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:40:05,717 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 18
2017-12-29 21:40:05,717 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,717 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,717 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:40:05,718 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 18
2017-12-29 21:40:05,718 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,718 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,718 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:40:05,719 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 18
2017-12-29 21:40:05,719 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,719 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:05,719 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:05,719 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:05,720 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:40:05,720 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:05,720 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:05,720 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=18, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=18}
2017-12-29 21:40:05,720 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=292b14c3-935a-42de-8f2d-07180dd5d19d, id=18, isActive=true, frequency=740988}
2017-12-29 21:40:05,720 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Unborn, address=model.entities.Address#18, id=18, remote=model.entities.Remote#18, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Vega}
2017-12-29 21:40:05,748 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:05,748 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:05,748 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:05,749 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,749 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:40:05,750 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 19
2017-12-29 21:40:05,750 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,750 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,750 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:40:05,751 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 19
2017-12-29 21:40:05,751 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,751 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,751 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:40:05,752 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 19
2017-12-29 21:40:05,752 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,753 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:05,753 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:05,753 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:05,753 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:40:05,753 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:05,753 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:05,753 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=48007696-df43-49a2-a0fb-6d47e5dcc990, id=19, isActive=true, frequency=153810}
2017-12-29 21:40:05,753 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Kaitlyn, address=model.entities.Address#19, id=19, remote=model.entities.Remote#19, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Wilder}
2017-12-29 21:40:05,753 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=19, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=19}
2017-12-29 21:40:05,781 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:05,781 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:05,782 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:05,782 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,782 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:40:05,783 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 20
2017-12-29 21:40:05,783 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,783 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,783 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:40:05,783 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 20
2017-12-29 21:40:05,784 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,784 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,784 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:40:05,785 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 20
2017-12-29 21:40:05,785 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,785 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:05,785 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:05,785 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:05,785 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:40:05,786 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:05,786 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:05,786 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=e5917439-216c-40eb-8000-c9de3249ea80, id=20, isActive=true, frequency=269764}
2017-12-29 21:40:05,786 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=20, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=20}
2017-12-29 21:40:05,786 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Donald, address=model.entities.Address#20, id=20, remote=model.entities.Remote#20, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Morgan}
2017-12-29 21:40:05,810 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:05,810 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:05,810 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:05,811 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,811 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:40:05,812 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 21
2017-12-29 21:40:05,812 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,812 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,812 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:40:05,813 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 21
2017-12-29 21:40:05,813 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,813 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,813 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:40:05,814 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 21
2017-12-29 21:40:05,815 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,815 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:05,815 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:05,815 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:05,815 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:40:05,815 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:05,815 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:05,815 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=21, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=21}
2017-12-29 21:40:05,815 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=ee0a0b81-6f75-490e-905f-9577f73e6d0e, id=21, isActive=true, frequency=103043}
2017-12-29 21:40:05,816 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Alisha, address=model.entities.Address#21, id=21, remote=model.entities.Remote#21, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Dunn}
2017-12-29 21:40:05,907 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:05,909 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:05,910 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:05,912 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,913 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:40:05,915 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 22
2017-12-29 21:40:05,916 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,917 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,918 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:40:05,921 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 22
2017-12-29 21:40:05,921 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,923 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,924 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:40:05,926 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 22
2017-12-29 21:40:05,927 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,928 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:05,928 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:05,928 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:05,929 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:40:05,930 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:05,930 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:05,930 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Marty, address=model.entities.Address#22, id=22, remote=model.entities.Remote#22, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Franco}
2017-12-29 21:40:05,930 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=22, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=22}
2017-12-29 21:40:05,930 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=a010f893-e243-4d10-952e-53eedbdf4ba5, id=22, isActive=true, frequency=468139}
2017-12-29 21:40:05,959 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:05,960 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:05,960 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:05,961 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,961 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:40:05,962 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 23
2017-12-29 21:40:05,962 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,962 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,962 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:40:05,963 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 23
2017-12-29 21:40:05,963 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,963 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,963 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:40:05,964 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 23
2017-12-29 21:40:05,964 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,964 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:05,964 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:05,964 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:05,965 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:40:05,965 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:05,965 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:05,965 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Sam, address=model.entities.Address#23, id=23, remote=model.entities.Remote#23, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Jackson}
2017-12-29 21:40:05,965 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=23, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=23}
2017-12-29 21:40:05,965 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=ee548871-793e-44ba-a2fb-16ef6c899c1d, id=23, isActive=true, frequency=189290}
2017-12-29 21:40:05,993 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:05,993 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:05,994 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:05,995 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,995 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:40:05,995 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 24
2017-12-29 21:40:05,996 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,996 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,996 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:40:05,997 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 24
2017-12-29 21:40:05,997 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,997 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:05,997 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:40:05,998 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 24
2017-12-29 21:40:05,998 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:05,998 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:05,998 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:05,998 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:05,999 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:40:05,999 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:05,999 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:05,999 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=24, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=24}
2017-12-29 21:40:05,999 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Jeffrey, address=model.entities.Address#24, id=24, remote=model.entities.Remote#24, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Suarez}
2017-12-29 21:40:05,999 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=770379b5-e8b7-4d0f-8c80-dc9a5f85cb1e, id=24, isActive=true, frequency=874025}
2017-12-29 21:40:06,036 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,037 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,037 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:06,038 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:06,038 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:40:06,039 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 25
2017-12-29 21:40:06,040 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:06,040 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:06,040 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:40:06,041 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 25
2017-12-29 21:40:06,041 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:06,041 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:06,041 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:40:06,042 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 25
2017-12-29 21:40:06,042 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:06,043 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:06,043 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:06,043 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:06,043 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:40:06,044 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:06,044 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:06,044 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=25, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=25}
2017-12-29 21:40:06,044 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=a5feb4d8-db74-4cb5-af3c-f043d885ab28, id=25, isActive=true, frequency=157896}
2017-12-29 21:40:06,044 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Thomas, address=model.entities.Address#25, id=25, remote=model.entities.Remote#25, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Dotson}
2017-12-29 21:40:06,081 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,082 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,082 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:06,083 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:06,083 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:40:06,084 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 26
2017-12-29 21:40:06,084 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:06,084 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:06,084 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:40:06,085 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 26
2017-12-29 21:40:06,085 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:06,085 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:06,086 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:40:06,087 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 26
2017-12-29 21:40:06,087 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:06,087 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:06,087 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:06,087 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:06,088 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:40:06,088 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:06,088 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:06,088 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=26, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=26}
2017-12-29 21:40:06,088 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=f88c95da-f07d-4175-a091-db970e6182a1, id=26, isActive=true, frequency=919447}
2017-12-29 21:40:06,088 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Mickey, address=model.entities.Address#26, id=26, remote=model.entities.Remote#26, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Cruz}
2017-12-29 21:40:06,148 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,148 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,149 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:06,150 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:06,150 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:40:06,150 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 27
2017-12-29 21:40:06,151 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:06,151 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:06,151 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:40:06,152 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 27
2017-12-29 21:40:06,152 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:06,152 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:06,152 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:40:06,153 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 27
2017-12-29 21:40:06,154 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:06,154 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:06,154 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:06,154 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:06,154 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:40:06,154 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:06,154 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:06,155 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=44236742-2395-46d9-b5f7-45aae0d282c1, id=27, isActive=true, frequency=714351}
2017-12-29 21:40:06,155 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Chuck, address=model.entities.Address#27, id=27, remote=model.entities.Remote#27, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Castillo}
2017-12-29 21:40:06,155 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=27, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=27}
2017-12-29 21:40:06,192 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,192 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,193 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:06,194 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:06,194 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:40:06,195 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 28
2017-12-29 21:40:06,195 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:06,195 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:06,195 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:40:06,196 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 28
2017-12-29 21:40:06,196 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:06,197 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:06,197 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:40:06,198 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 28
2017-12-29 21:40:06,198 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:06,199 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:06,199 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:06,199 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:06,199 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:40:06,199 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:06,199 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:06,199 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=6bbfb2ba-536f-40ff-9a18-335eaa310377, id=28, isActive=true, frequency=786313}
2017-12-29 21:40:06,200 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=28, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=28}
2017-12-29 21:40:06,200 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Sierra, address=model.entities.Address#28, id=28, remote=model.entities.Remote#28, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Schneider}
2017-12-29 21:40:06,236 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,237 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,237 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:06,238 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:06,238 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:40:06,239 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 29
2017-12-29 21:40:06,239 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:06,239 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:06,239 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:40:06,240 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 29
2017-12-29 21:40:06,240 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:06,241 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:06,241 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:40:06,242 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 29
2017-12-29 21:40:06,242 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:06,242 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:06,242 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:06,243 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:06,243 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:40:06,243 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:06,243 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:06,243 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=29, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=29}
2017-12-29 21:40:06,244 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=56a31262-df29-4744-850b-08708061482c, id=29, isActive=true, frequency=537613}
2017-12-29 21:40:06,244 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Michael, address=model.entities.Address#29, id=29, remote=model.entities.Remote#29, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Gross}
2017-12-29 21:40:06,281 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,282 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,282 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:06,282 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:06,282 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:40:06,283 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 30
2017-12-29 21:40:06,283 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:06,283 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:06,283 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:40:06,284 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 30
2017-12-29 21:40:06,284 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:06,284 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:06,284 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:40:06,285 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 30
2017-12-29 21:40:06,285 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:06,285 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:06,285 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:06,285 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:06,285 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:40:06,285 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:06,285 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:06,285 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Richard, address=model.entities.Address#30, id=30, remote=model.entities.Remote#30, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Wheeler}
2017-12-29 21:40:06,285 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=30, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=30}
2017-12-29 21:40:06,285 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=e4284191-851b-436e-ac9c-74c5a432554d, id=30, isActive=true, frequency=307987}
2017-12-29 21:40:06,315 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,315 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,316 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:06,316 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:06,316 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:40:06,317 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 31
2017-12-29 21:40:06,317 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:06,317 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:06,317 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:06,317 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:06,317 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 21:40:06,317 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:06,317 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:06,317 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=1bec1375-9a8d-4c73-a774-1285277a4315, id=31, isActive=false, frequency=624638}
2017-12-29 21:40:06,348 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,348 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,348 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:06,349 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:06,349 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:40:06,350 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 32
2017-12-29 21:40:06,350 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:06,350 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:06,350 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:06,350 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:06,350 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 21:40:06,351 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:06,351 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:06,351 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=eb668619-cafc-49c3-ae4b-4e1e6c2a37e0, id=32, isActive=false, frequency=34576}
2017-12-29 21:40:06,382 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,382 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,383 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:06,383 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:06,383 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:40:06,384 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 33
2017-12-29 21:40:06,384 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:06,384 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:06,384 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:06,384 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:06,384 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 21:40:06,384 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:06,384 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:06,384 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=93a13b55-1df7-4c12-a7a8-e2be610995c9, id=33, isActive=false, frequency=887896}
2017-12-29 21:40:06,415 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,415 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,415 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:06,416 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:06,416 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:40:06,417 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 34
2017-12-29 21:40:06,417 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:06,417 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:06,417 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:06,417 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:06,417 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 21:40:06,417 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:06,417 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:06,417 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=f57ae028-4cb9-4554-919b-df0bb4a51356, id=34, isActive=false, frequency=836649}
2017-12-29 21:40:06,448 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,449 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,449 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:06,449 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:06,449 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:40:06,450 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 35
2017-12-29 21:40:06,450 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:06,450 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:06,450 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:06,450 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:06,451 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 21:40:06,451 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:06,451 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:06,451 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=105e79cf-ce93-433b-aea8-9ea12b5c87a9, id=35, isActive=false, frequency=40853}
2017-12-29 21:40:06,481 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,481 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,482 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:06,482 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:06,482 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:40:06,483 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 36
2017-12-29 21:40:06,483 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:06,483 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:06,483 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:06,483 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:06,483 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 21:40:06,483 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:06,483 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:06,483 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=a237ed6a-b454-4870-a14e-ff0c5324c6f7, id=36, isActive=false, frequency=187933}
2017-12-29 21:40:06,515 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,515 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,515 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:06,516 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:06,516 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:40:06,516 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 37
2017-12-29 21:40:06,516 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:06,517 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:06,517 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:06,517 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:06,517 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 21:40:06,517 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:06,517 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:06,517 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=b2adbe71-b691-4c6e-9c9c-9ac22409fdeb, id=37, isActive=false, frequency=333469}
2017-12-29 21:40:06,543 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,543 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,543 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:06,544 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:06,544 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:40:06,545 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 38
2017-12-29 21:40:06,545 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:06,545 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:06,545 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:06,545 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:06,545 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 21:40:06,545 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:06,545 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:06,545 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=3539769b-d826-4bf1-8319-81d6648d552e, id=38, isActive=false, frequency=454636}
2017-12-29 21:40:06,623 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,623 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,623 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:06,624 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:06,624 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:40:06,625 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 39
2017-12-29 21:40:06,625 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:06,625 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:06,625 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:06,625 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:06,626 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 21:40:06,626 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:06,626 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:06,626 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=f7515c67-1d95-4ad9-ac2b-8868ed34f17e, id=39, isActive=false, frequency=529417}
2017-12-29 21:40:06,671 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,671 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,671 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:06,672 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:06,672 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:40:06,672 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 40
2017-12-29 21:40:06,673 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:06,673 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:06,673 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:06,673 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:06,673 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 21:40:06,673 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:06,673 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:06,673 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=6f96ee30-9dad-4740-8ae5-eb5458095ade, id=40, isActive=false, frequency=131688}
2017-12-29 21:40:06,704 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,704 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,704 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:06,705 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:06,705 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:40:06,705 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 31
2017-12-29 21:40:06,706 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:06,706 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:06,706 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:06,706 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:06,706 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 21:40:06,706 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:06,706 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:06,706 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=België, mailBox=31, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=31}
2017-12-29 21:40:06,737 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,737 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,738 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:06,738 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:06,738 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:40:06,739 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 32
2017-12-29 21:40:06,739 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:06,739 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:06,739 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:06,739 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:06,740 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 21:40:06,740 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:06,740 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:06,740 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=België, mailBox=32, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=32}
2017-12-29 21:40:06,770 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,771 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,771 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:06,771 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:06,772 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:40:06,772 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 33
2017-12-29 21:40:06,772 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:06,772 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:06,772 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:06,773 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:06,773 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 21:40:06,773 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:06,773 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:06,773 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=België, mailBox=33, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=33}
2017-12-29 21:40:06,804 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,805 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,806 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:06,808 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:06,808 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:40:06,811 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 34
2017-12-29 21:40:06,812 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:06,813 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:06,813 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:06,813 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:06,814 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 21:40:06,814 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:06,814 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:06,815 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=België, mailBox=34, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=34}
2017-12-29 21:40:06,848 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,849 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,849 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:06,850 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:06,850 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:40:06,851 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 35
2017-12-29 21:40:06,851 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:06,851 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:06,851 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:06,852 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:06,852 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 21:40:06,852 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:06,852 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:06,852 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=België, mailBox=35, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=35}
2017-12-29 21:40:06,881 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,881 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,882 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:06,883 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:06,883 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:40:06,884 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 36
2017-12-29 21:40:06,884 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:06,884 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:06,885 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:06,885 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:06,885 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 21:40:06,885 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:06,885 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:06,885 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=België, mailBox=36, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=36}
2017-12-29 21:40:06,915 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,915 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,916 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:06,916 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:06,916 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:40:06,917 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 37
2017-12-29 21:40:06,917 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:06,917 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:06,917 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:06,917 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:06,917 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 21:40:06,917 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:06,917 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:06,917 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=België, mailBox=37, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=37}
2017-12-29 21:40:06,948 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,948 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:06,948 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:06,948 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:06,949 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:40:06,949 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 38
2017-12-29 21:40:06,949 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:06,950 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:06,950 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:06,950 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:06,950 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 21:40:06,950 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:06,950 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:06,950 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=België, mailBox=38, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=38}
2017-12-29 21:40:07,003 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:07,003 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:07,003 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:07,004 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:07,004 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:40:07,005 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 39
2017-12-29 21:40:07,005 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:07,005 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:07,005 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:07,005 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:07,005 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 21:40:07,005 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:07,005 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:07,005 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=België, mailBox=39, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=39}
2017-12-29 21:40:07,038 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:07,038 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:07,039 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:40:07,039 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:40:07,039 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:40:07,040 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 40
2017-12-29 21:40:07,040 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:40:07,040 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:40:07,040 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:40:07,040 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:40:07,040 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 21:40:07,040 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:40:07,040 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:40:07,041 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=België, mailBox=40, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=40}
2017-12-29 21:40:07,070 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:07,070 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:40:24,731 +0100 [main] DEBUG (HibernatePersistenceProvider.java:38) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2017-12-29 21:40:24,818 +0100 [main] DEBUG (HibernatePersistenceProvider.java:98) - Located and parsed 1 persistence units; checking each
2017-12-29 21:40:24,820 +0100 [main] DEBUG (HibernatePersistenceProvider.java:106) - Checking persistence-unit [name=Afstandsbediening, explicit-provider=null] against incoming persistence unit name [Person]
2017-12-29 21:40:24,820 +0100 [main] DEBUG (HibernatePersistenceProvider.java:115) - Excluding from consideration due to name mis-match
2017-12-29 21:40:24,820 +0100 [main] DEBUG (HibernatePersistenceProvider.java:133) - Found no matching persistence units
2017-12-29 21:40:33,535 +0100 [pool-1-thread-1] DEBUG (PooledConnections.java:51) - Connection pool now considered primed; min-size will be maintained
2017-12-29 21:41:07,702 +0100 [main] DEBUG (HibernatePersistenceProvider.java:38) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2017-12-29 21:41:07,781 +0100 [main] DEBUG (HibernatePersistenceProvider.java:98) - Located and parsed 1 persistence units; checking each
2017-12-29 21:41:07,781 +0100 [main] DEBUG (HibernatePersistenceProvider.java:106) - Checking persistence-unit [name=Afstandsbediening, explicit-provider=null] against incoming persistence unit name [Afstandsbediening]
2017-12-29 21:41:07,781 +0100 [main] DEBUG (ProviderChecker.java:96) - No PersistenceProvider explicitly requested, assuming Hibernate
2017-12-29 21:41:07,788 +0100 [main] DEBUG (LogHelper.java:102) - PersistenceUnitInfo [
	name: Afstandsbediening
	persistence provider classname: null
	classloader: null
	excludeUnlistedClasses: false
	JTA datasource: null
	Non JTA datasource: null
	Transaction type: RESOURCE_LOCAL
	PU root URL: file:/C:/Users/BenJolien/git/2018-Januari/8-Afstandsbediening/target/classes/
	Shared Cache Mode: null
	Validation Mode: null
	Jar files URLs []
	Managed classes names [
		model.entities.Remote
		model.entities.Person
		model.entities.Address]
	Mapping files names []
	Properties [
		javax.persistence.jdbc.driver: com.mysql.jdbc.Driver
		javax.persistence.jdbc.password: userDB
		javax.persistence.jdbc.url: jdbc:mysql://localhost:3306/DbRemote
		javax.persistence.jdbc.user: userDB]
2017-12-29 21:41:07,795 +0100 [main] DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
2017-12-29 21:41:07,796 +0100 [main] DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
2017-12-29 21:41:07,805 +0100 [main] DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2017-12-29 21:41:07,806 +0100 [main] DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.jpa.event.spi.JpaIntegrator].
2017-12-29 21:41:07,861 +0100 [main] INFO  (Version.java:45) - HHH000412: Hibernate Core {5.2.12.Final}
2017-12-29 21:41:07,863 +0100 [main] INFO  (Environment.java:213) - HHH000206: hibernate.properties not found
2017-12-29 21:41:07,873 +0100 [main] DEBUG (ServiceBinding.java:68) - Overriding existing service binding [org.hibernate.secure.spi.JaccService]
2017-12-29 21:41:07,891 +0100 [main] DEBUG (RegionFactoryInitiator.java:75) - Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
2017-12-29 21:41:07,896 +0100 [main] INFO  (JavaReflectionManager.java:66) - HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
2017-12-29 21:41:07,954 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration boolean -> org.hibernate.type.BooleanType@40e6dfe1
2017-12-29 21:41:07,954 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration boolean -> org.hibernate.type.BooleanType@40e6dfe1
2017-12-29 21:41:07,956 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@40e6dfe1
2017-12-29 21:41:07,957 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@1f1c7bf6
2017-12-29 21:41:07,959 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration true_false -> org.hibernate.type.TrueFalseType@55ca8de8
2017-12-29 21:41:07,960 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration yes_no -> org.hibernate.type.YesNoType@240237d2
2017-12-29 21:41:07,962 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration byte -> org.hibernate.type.ByteType@548a102f
2017-12-29 21:41:07,962 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration byte -> org.hibernate.type.ByteType@548a102f
2017-12-29 21:41:07,962 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@548a102f
2017-12-29 21:41:07,963 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration character -> org.hibernate.type.CharacterType@1d548a08
2017-12-29 21:41:07,963 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration char -> org.hibernate.type.CharacterType@1d548a08
2017-12-29 21:41:07,968 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@1d548a08
2017-12-29 21:41:07,970 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration short -> org.hibernate.type.ShortType@2d9d4f9d
2017-12-29 21:41:07,971 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration short -> org.hibernate.type.ShortType@2d9d4f9d
2017-12-29 21:41:07,971 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Short -> org.hibernate.type.ShortType@2d9d4f9d
2017-12-29 21:41:07,972 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration integer -> org.hibernate.type.IntegerType@358c99f5
2017-12-29 21:41:07,974 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration int -> org.hibernate.type.IntegerType@358c99f5
2017-12-29 21:41:07,975 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@358c99f5
2017-12-29 21:41:07,976 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration long -> org.hibernate.type.LongType@6b419da
2017-12-29 21:41:07,976 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration long -> org.hibernate.type.LongType@6b419da
2017-12-29 21:41:07,976 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Long -> org.hibernate.type.LongType@6b419da
2017-12-29 21:41:07,977 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration float -> org.hibernate.type.FloatType@6646153
2017-12-29 21:41:07,978 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration float -> org.hibernate.type.FloatType@6646153
2017-12-29 21:41:07,978 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Float -> org.hibernate.type.FloatType@6646153
2017-12-29 21:41:07,979 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration double -> org.hibernate.type.DoubleType@f2f2cc1
2017-12-29 21:41:07,979 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration double -> org.hibernate.type.DoubleType@f2f2cc1
2017-12-29 21:41:07,979 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@f2f2cc1
2017-12-29 21:41:07,981 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@13acb0d1
2017-12-29 21:41:07,981 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@13acb0d1
2017-12-29 21:41:07,982 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration big_integer -> org.hibernate.type.BigIntegerType@6107227e
2017-12-29 21:41:07,982 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@6107227e
2017-12-29 21:41:07,983 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration string -> org.hibernate.type.StringType@45dd4eda
2017-12-29 21:41:07,983 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.String -> org.hibernate.type.StringType@45dd4eda
2017-12-29 21:41:07,984 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration nstring -> org.hibernate.type.StringNVarcharType@19d37183
2017-12-29 21:41:07,985 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@a4102b8
2017-12-29 21:41:07,985 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration url -> org.hibernate.type.UrlType@8909f18
2017-12-29 21:41:07,985 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.net.URL -> org.hibernate.type.UrlType@8909f18
2017-12-29 21:41:07,986 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration Duration -> org.hibernate.type.DurationType@6e75aa0d
2017-12-29 21:41:07,987 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.Duration -> org.hibernate.type.DurationType@6e75aa0d
2017-12-29 21:41:07,997 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration Instant -> org.hibernate.type.InstantType@2133814f
2017-12-29 21:41:07,998 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.Instant -> org.hibernate.type.InstantType@2133814f
2017-12-29 21:41:07,999 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@7d3a22a9
2017-12-29 21:41:07,999 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@7d3a22a9
2017-12-29 21:41:08,001 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration LocalDate -> org.hibernate.type.LocalDateType@7f1302d6
2017-12-29 21:41:08,001 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@7f1302d6
2017-12-29 21:41:08,002 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@5bfa9431
2017-12-29 21:41:08,002 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@5bfa9431
2017-12-29 21:41:08,003 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@78e94dcf
2017-12-29 21:41:08,003 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@78e94dcf
2017-12-29 21:41:08,004 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@60dcc9fe
2017-12-29 21:41:08,004 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@60dcc9fe
2017-12-29 21:41:08,007 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@27ae2fd0
2017-12-29 21:41:08,007 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@27ae2fd0
2017-12-29 21:41:08,008 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration date -> org.hibernate.type.DateType@15b204a1
2017-12-29 21:41:08,008 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.sql.Date -> org.hibernate.type.DateType@15b204a1
2017-12-29 21:41:08,009 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration time -> org.hibernate.type.TimeType@2ddc8ecb
2017-12-29 21:41:08,009 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.sql.Time -> org.hibernate.type.TimeType@2ddc8ecb
2017-12-29 21:41:08,010 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration timestamp -> org.hibernate.type.TimestampType@309e345f
2017-12-29 21:41:08,010 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@309e345f
2017-12-29 21:41:08,010 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.Date -> org.hibernate.type.TimestampType@309e345f
2017-12-29 21:41:08,012 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@4445629
2017-12-29 21:41:08,013 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration calendar -> org.hibernate.type.CalendarType@63a65a25
2017-12-29 21:41:08,013 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@63a65a25
2017-12-29 21:41:08,014 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@63a65a25
2017-12-29 21:41:08,015 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@6dbb137d
2017-12-29 21:41:08,016 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration locale -> org.hibernate.type.LocaleType@4e91d63f
2017-12-29 21:41:08,016 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@4e91d63f
2017-12-29 21:41:08,017 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration currency -> org.hibernate.type.CurrencyType@419c5f1a
2017-12-29 21:41:08,017 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@419c5f1a
2017-12-29 21:41:08,017 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration timezone -> org.hibernate.type.TimeZoneType@6193932a
2017-12-29 21:41:08,018 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@6193932a
2017-12-29 21:41:08,018 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration class -> org.hibernate.type.ClassType@1ffe63b9
2017-12-29 21:41:08,018 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Class -> org.hibernate.type.ClassType@1ffe63b9
2017-12-29 21:41:08,019 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@6d2a209c
2017-12-29 21:41:08,020 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@6d2a209c
2017-12-29 21:41:08,020 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@4313f5bc
2017-12-29 21:41:08,021 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration binary -> org.hibernate.type.BinaryType@670002
2017-12-29 21:41:08,021 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration byte[] -> org.hibernate.type.BinaryType@670002
2017-12-29 21:41:08,021 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration [B -> org.hibernate.type.BinaryType@670002
2017-12-29 21:41:08,022 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@96def03
2017-12-29 21:41:08,022 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@96def03
2017-12-29 21:41:08,022 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@96def03
2017-12-29 21:41:08,023 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration row_version -> org.hibernate.type.RowVersionType@4b5a5ed1
2017-12-29 21:41:08,023 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration image -> org.hibernate.type.ImageType@60d8c9b7
2017-12-29 21:41:08,024 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration characters -> org.hibernate.type.CharArrayType@433d61fb
2017-12-29 21:41:08,024 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration char[] -> org.hibernate.type.CharArrayType@433d61fb
2017-12-29 21:41:08,024 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration [C -> org.hibernate.type.CharArrayType@433d61fb
2017-12-29 21:41:08,025 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@1534f01b
2017-12-29 21:41:08,025 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@1534f01b
2017-12-29 21:41:08,025 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@1534f01b
2017-12-29 21:41:08,026 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration text -> org.hibernate.type.TextType@4690b489
2017-12-29 21:41:08,026 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration ntext -> org.hibernate.type.NTextType@460d0a57
2017-12-29 21:41:08,028 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration blob -> org.hibernate.type.BlobType@49b0b76
2017-12-29 21:41:08,028 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@49b0b76
2017-12-29 21:41:08,029 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@5ae50ce6
2017-12-29 21:41:08,031 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration clob -> org.hibernate.type.ClobType@29626d54
2017-12-29 21:41:08,031 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@29626d54
2017-12-29 21:41:08,032 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration nclob -> org.hibernate.type.NClobType@9353778
2017-12-29 21:41:08,033 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@9353778
2017-12-29 21:41:08,033 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@1700915
2017-12-29 21:41:08,033 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@30ee2816
2017-12-29 21:41:08,034 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration serializable -> org.hibernate.type.SerializableType@5e82df6a
2017-12-29 21:41:08,036 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration object -> org.hibernate.type.ObjectType@3d74bf60
2017-12-29 21:41:08,036 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@3d74bf60
2017-12-29 21:41:08,037 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@2145b572
2017-12-29 21:41:08,037 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@39529185
2017-12-29 21:41:08,037 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@72f926e6
2017-12-29 21:41:08,037 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@3daa422a
2017-12-29 21:41:08,038 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@31c88ec8
2017-12-29 21:41:08,038 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@1cbbffcd
2017-12-29 21:41:08,038 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@27ce24aa
2017-12-29 21:41:08,038 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@481a996b
2017-12-29 21:41:08,045 +0100 [main] WARN  (DriverManagerConnectionProviderImpl.java:70) - HHH10001002: Using Hibernate built-in connection pool (not for production use!)
2017-12-29 21:41:08,055 +0100 [main] INFO  (DriverManagerConnectionProviderImpl.java:126) - HHH10001005: using driver [com.mysql.jdbc.Driver] at URL [jdbc:mysql://localhost:3306/DbRemote]
2017-12-29 21:41:08,056 +0100 [main] INFO  (DriverManagerConnectionProviderImpl.java:132) - HHH10001001: Connection properties: {user=userDB, password=userDB}
2017-12-29 21:41:08,056 +0100 [main] INFO  (DriverManagerConnectionProviderImpl.java:140) - HHH10001003: Autocommit mode: false
2017-12-29 21:41:08,059 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Initializing Connection pool with 1 Connections
2017-12-29 21:41:08,059 +0100 [main] INFO  (PooledConnections.java:41) - HHH000115: Hibernate connection pool size: 20 (min=1)
2017-12-29 21:41:08,300 +0100 [main] DEBUG (JdbcEnvironmentInitiator.java:72) - Database ->
       name : MySQL
    version : 5.7.20-log
      major : 5
      minor : 7
2017-12-29 21:41:08,300 +0100 [main] DEBUG (JdbcEnvironmentInitiator.java:83) - Driver ->
       name : MySQL Connector Java
    version : mysql-connector-java-5.1.45 ( Revision: 9131eefa398531c7dc98776e8a3fe839e544c5b2 )
      major : 5
      minor : 1
2017-12-29 21:41:08,300 +0100 [main] DEBUG (DelegatingBasicLogger.java:389) - JDBC version : 4.0
2017-12-29 21:41:08,310 +0100 [main] INFO  (Dialect.java:157) - HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2017-12-29 21:41:08,339 +0100 [main] DEBUG (IdentifierHelperBuilder.java:117) - JDBC driver metadata reported database stores quoted identifiers in more than one case
2017-12-29 21:41:08,341 +0100 [main] DEBUG (IdentifierHelperBuilder.java:191) - IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
2017-12-29 21:41:08,427 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2017-12-29 21:41:08,427 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2017-12-29 21:41:08,427 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2017-12-29 21:41:08,428 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2017-12-29 21:41:08,428 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2017-12-29 21:41:08,428 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2017-12-29 21:41:08,429 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2017-12-29 21:41:08,429 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2017-12-29 21:41:08,430 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
2017-12-29 21:41:08,431 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2017-12-29 21:41:08,432 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2017-12-29 21:41:08,433 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
2017-12-29 21:41:08,434 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2017-12-29 21:41:08,435 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2017-12-29 21:41:08,453 +0100 [main] DEBUG (Namespace.java:47) - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2017-12-29 21:41:08,476 +0100 [main] DEBUG (AnnotationBinder.java:511) - Binding entity from annotated class: model.entities.Address
2017-12-29 21:41:08,486 +0100 [main] DEBUG (QueryBinder.java:80) - Binding named query: findUnusedAddress => SELECT a FROM Address a WHERE a.id NOT IN (SELECT p.address.id FROM Person p)
2017-12-29 21:41:08,492 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2017-12-29 21:41:08,496 +0100 [main] DEBUG (EntityBinder.java:419) - Import with entity name Address
2017-12-29 21:41:08,498 +0100 [main] DEBUG (EntityBinder.java:695) - Bind entity model.entities.Address on table address
2017-12-29 21:41:08,515 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=id, insertable=true, updatable=true, unique=false}
2017-12-29 21:41:08,519 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property id with lazy=false
2017-12-29 21:41:08,521 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:id]
2017-12-29 21:41:08,522 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for id
2017-12-29 21:41:08,523 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property id
2017-12-29 21:41:08,527 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=city, insertable=true, updatable=true, unique=false}
2017-12-29 21:41:08,527 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property city with lazy=false
2017-12-29 21:41:08,528 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:city]
2017-12-29 21:41:08,528 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for city
2017-12-29 21:41:08,528 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property city
2017-12-29 21:41:08,529 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=country, insertable=true, updatable=true, unique=false}
2017-12-29 21:41:08,529 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property country with lazy=false
2017-12-29 21:41:08,529 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:country]
2017-12-29 21:41:08,529 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for country
2017-12-29 21:41:08,529 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property country
2017-12-29 21:41:08,529 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=mailBox, insertable=true, updatable=true, unique=false}
2017-12-29 21:41:08,529 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property mailBox with lazy=false
2017-12-29 21:41:08,530 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:mailBox]
2017-12-29 21:41:08,530 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for mailBox
2017-12-29 21:41:08,530 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property mailBox
2017-12-29 21:41:08,530 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=nr, insertable=true, updatable=true, unique=false}
2017-12-29 21:41:08,530 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property nr with lazy=false
2017-12-29 21:41:08,530 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:nr]
2017-12-29 21:41:08,530 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for nr
2017-12-29 21:41:08,531 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property nr
2017-12-29 21:41:08,531 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=postalCode, insertable=true, updatable=true, unique=false}
2017-12-29 21:41:08,531 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property postalCode with lazy=false
2017-12-29 21:41:08,531 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:postalCode]
2017-12-29 21:41:08,531 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for postalCode
2017-12-29 21:41:08,531 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property postalCode
2017-12-29 21:41:08,531 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=street, insertable=true, updatable=true, unique=false}
2017-12-29 21:41:08,531 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property street with lazy=false
2017-12-29 21:41:08,532 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:street]
2017-12-29 21:41:08,532 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for street
2017-12-29 21:41:08,532 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property street
2017-12-29 21:41:08,532 +0100 [main] DEBUG (AnnotationBinder.java:511) - Binding entity from annotated class: model.entities.Remote
2017-12-29 21:41:08,533 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2017-12-29 21:41:08,533 +0100 [main] DEBUG (EntityBinder.java:419) - Import with entity name Remote
2017-12-29 21:41:08,533 +0100 [main] DEBUG (EntityBinder.java:695) - Bind entity model.entities.Remote on table Remote
2017-12-29 21:41:08,534 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Remote), mappingColumn=id, insertable=true, updatable=true, unique=false}
2017-12-29 21:41:08,534 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property id with lazy=false
2017-12-29 21:41:08,534 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Remote:id]
2017-12-29 21:41:08,535 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for id
2017-12-29 21:41:08,535 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property id
2017-12-29 21:41:08,535 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Remote), mappingColumn=frequency, insertable=true, updatable=true, unique=false}
2017-12-29 21:41:08,535 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property frequency with lazy=false
2017-12-29 21:41:08,535 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Remote:frequency]
2017-12-29 21:41:08,535 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for frequency
2017-12-29 21:41:08,536 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property frequency
2017-12-29 21:41:08,536 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Remote), mappingColumn=isActive, insertable=true, updatable=true, unique=false}
2017-12-29 21:41:08,536 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property isActive with lazy=false
2017-12-29 21:41:08,536 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Remote:isActive]
2017-12-29 21:41:08,536 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for isActive
2017-12-29 21:41:08,536 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property isActive
2017-12-29 21:41:08,536 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Remote), mappingColumn=serialNumber, insertable=true, updatable=true, unique=false}
2017-12-29 21:41:08,536 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property serialNumber with lazy=false
2017-12-29 21:41:08,536 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Remote:serialNumber]
2017-12-29 21:41:08,537 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for serialNumber
2017-12-29 21:41:08,537 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property serialNumber
2017-12-29 21:41:08,537 +0100 [main] DEBUG (AnnotationBinder.java:511) - Binding entity from annotated class: model.entities.Person
2017-12-29 21:41:08,537 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2017-12-29 21:41:08,537 +0100 [main] DEBUG (EntityBinder.java:419) - Import with entity name Person
2017-12-29 21:41:08,537 +0100 [main] DEBUG (EntityBinder.java:695) - Bind entity model.entities.Person on table Person
2017-12-29 21:41:08,541 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Person), mappingColumn=id, insertable=true, updatable=true, unique=false}
2017-12-29 21:41:08,542 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property id with lazy=false
2017-12-29 21:41:08,542 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Person:id]
2017-12-29 21:41:08,542 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for id
2017-12-29 21:41:08,542 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property id
2017-12-29 21:41:08,543 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='addressId', referencedColumn='', mappedBy=''}
2017-12-29 21:41:08,543 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Person), mappingColumn=address, insertable=true, updatable=true, unique=false}
2017-12-29 21:41:08,545 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property address
2017-12-29 21:41:08,545 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Person), mappingColumn=endOfContract, insertable=true, updatable=true, unique=false}
2017-12-29 21:41:08,545 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property endOfContract with lazy=false
2017-12-29 21:41:08,545 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Person:endOfContract]
2017-12-29 21:41:08,545 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for endOfContract
2017-12-29 21:41:08,545 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property endOfContract
2017-12-29 21:41:08,545 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Person), mappingColumn=firstname, insertable=true, updatable=true, unique=false}
2017-12-29 21:41:08,546 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property firstname with lazy=false
2017-12-29 21:41:08,546 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Person:firstname]
2017-12-29 21:41:08,546 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for firstname
2017-12-29 21:41:08,546 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property firstname
2017-12-29 21:41:08,546 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Person), mappingColumn=lastname, insertable=true, updatable=true, unique=false}
2017-12-29 21:41:08,546 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property lastname with lazy=false
2017-12-29 21:41:08,546 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Person:lastname]
2017-12-29 21:41:08,547 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for lastname
2017-12-29 21:41:08,547 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property lastname
2017-12-29 21:41:08,547 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='remoteId', referencedColumn='', mappedBy=''}
2017-12-29 21:41:08,547 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Person), mappingColumn=remote, insertable=true, updatable=true, unique=false}
2017-12-29 21:41:08,547 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property remote
2017-12-29 21:41:08,548 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for id
2017-12-29 21:41:08,548 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for city
2017-12-29 21:41:08,548 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for country
2017-12-29 21:41:08,549 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for mailBox
2017-12-29 21:41:08,549 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for nr
2017-12-29 21:41:08,549 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for postalCode
2017-12-29 21:41:08,549 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for street
2017-12-29 21:41:08,549 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for id
2017-12-29 21:41:08,549 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for frequency
2017-12-29 21:41:08,549 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for isActive
2017-12-29 21:41:08,549 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for serialNumber
2017-12-29 21:41:08,549 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for id
2017-12-29 21:41:08,550 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for endOfContract
2017-12-29 21:41:08,550 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for firstname
2017-12-29 21:41:08,550 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for lastname
2017-12-29 21:41:08,552 +0100 [main] DEBUG (PrimaryKey.java:35) - Forcing column [id] to be non-null as it is part of the primary key for table [address]
2017-12-29 21:41:08,553 +0100 [main] DEBUG (PrimaryKey.java:35) - Forcing column [id] to be non-null as it is part of the primary key for table [remote]
2017-12-29 21:41:08,553 +0100 [main] DEBUG (PrimaryKey.java:35) - Forcing column [id] to be non-null as it is part of the primary key for table [person]
2017-12-29 21:41:08,553 +0100 [main] DEBUG (InFlightMetadataCollectorImpl.java:1798) - Resolving reference to class: model.entities.Address
2017-12-29 21:41:08,554 +0100 [main] DEBUG (InFlightMetadataCollectorImpl.java:1798) - Resolving reference to class: model.entities.Remote
2017-12-29 21:41:08,555 +0100 [main] DEBUG (InFlightMetadataCollectorImpl.java:1798) - Resolving reference to class: model.entities.Address
2017-12-29 21:41:08,556 +0100 [main] DEBUG (InFlightMetadataCollectorImpl.java:1798) - Resolving reference to class: model.entities.Remote
2017-12-29 21:41:08,580 +0100 [main] DEBUG (SessionFactoryImpl.java:200) - Building session factory
2017-12-29 21:41:08,581 +0100 [main] DEBUG (Settings.java:69) - SessionFactory name : null
2017-12-29 21:41:08,582 +0100 [main] DEBUG (Settings.java:70) - Automatic flush during beforeCompletion(): enabled
2017-12-29 21:41:08,582 +0100 [main] DEBUG (Settings.java:71) - Automatic session close at end of transaction: disabled
2017-12-29 21:41:08,582 +0100 [main] DEBUG (Settings.java:73) - Statistics: disabled
2017-12-29 21:41:08,582 +0100 [main] DEBUG (Settings.java:75) - Deleted entity synthetic identifier rollback: disabled
2017-12-29 21:41:08,582 +0100 [main] DEBUG (Settings.java:76) - Default entity-mode: pojo
2017-12-29 21:41:08,582 +0100 [main] DEBUG (Settings.java:77) - Check Nullability in Core (should be disabled when Bean Validation is on): enabled
2017-12-29 21:41:08,582 +0100 [main] DEBUG (Settings.java:78) - Allow initialization of lazy state outside session : disabled
2017-12-29 21:41:08,583 +0100 [main] DEBUG (Settings.java:80) - Using BatchFetchStyle : LEGACY
2017-12-29 21:41:08,583 +0100 [main] DEBUG (Settings.java:81) - Default batch fetch size: -1
2017-12-29 21:41:08,583 +0100 [main] DEBUG (Settings.java:82) - Maximum outer join fetch depth: 2
2017-12-29 21:41:08,583 +0100 [main] DEBUG (Settings.java:83) - Default null ordering: NONE
2017-12-29 21:41:08,583 +0100 [main] DEBUG (Settings.java:84) - Order SQL updates by primary key: disabled
2017-12-29 21:41:08,583 +0100 [main] DEBUG (Settings.java:85) - Order SQL inserts for batching: disabled
2017-12-29 21:41:08,583 +0100 [main] DEBUG (Settings.java:87) - multi-tenancy strategy : NONE
2017-12-29 21:41:08,583 +0100 [main] DEBUG (Settings.java:89) - JTA Track by Thread: enabled
2017-12-29 21:41:08,583 +0100 [main] DEBUG (Settings.java:91) - Query language substitutions: {}
2017-12-29 21:41:08,583 +0100 [main] DEBUG (Settings.java:92) - JPA query language strict compliance: disabled
2017-12-29 21:41:08,584 +0100 [main] DEBUG (Settings.java:93) - Named query checking : enabled
2017-12-29 21:41:08,584 +0100 [main] DEBUG (Settings.java:95) - Second-level cache: enabled
2017-12-29 21:41:08,584 +0100 [main] DEBUG (Settings.java:96) - Second-level query cache: disabled
2017-12-29 21:41:08,584 +0100 [main] DEBUG (Settings.java:97) - Second-level query cache factory: org.hibernate.cache.internal.StandardQueryCacheFactory@6337c201
2017-12-29 21:41:08,584 +0100 [main] DEBUG (Settings.java:98) - Second-level cache region prefix: null
2017-12-29 21:41:08,584 +0100 [main] DEBUG (Settings.java:99) - Optimize second-level cache for minimal puts: disabled
2017-12-29 21:41:08,584 +0100 [main] DEBUG (Settings.java:100) - Structured second-level cache entries: disabled
2017-12-29 21:41:08,584 +0100 [main] DEBUG (Settings.java:101) - Second-level cache direct-reference entries: disabled
2017-12-29 21:41:08,584 +0100 [main] DEBUG (Settings.java:102) - Automatic eviction of collection cache: disabled
2017-12-29 21:41:08,584 +0100 [main] DEBUG (Settings.java:104) - JDBC batch size: 15
2017-12-29 21:41:08,584 +0100 [main] DEBUG (Settings.java:105) - JDBC batch updates for versioned data: enabled
2017-12-29 21:41:08,584 +0100 [main] DEBUG (Settings.java:106) - Scrollable result sets: enabled
2017-12-29 21:41:08,584 +0100 [main] DEBUG (Settings.java:107) - Wrap result sets: disabled
2017-12-29 21:41:08,584 +0100 [main] DEBUG (Settings.java:108) - JDBC3 getGeneratedKeys(): enabled
2017-12-29 21:41:08,585 +0100 [main] DEBUG (Settings.java:109) - JDBC result set fetch size: null
2017-12-29 21:41:08,585 +0100 [main] DEBUG (Settings.java:110) - Connection release mode: AFTER_TRANSACTION
2017-12-29 21:41:08,585 +0100 [main] DEBUG (Settings.java:111) - Generate SQL with comments: disabled
2017-12-29 21:41:08,617 +0100 [main] DEBUG (SessionFactoryImpl.java:258) - Session factory constructed with filter configurations : {}
2017-12-29 21:41:08,617 +0100 [main] DEBUG (SessionFactoryImpl.java:259) - Instantiating session factory with properties: {sun.desktop=windows, awt.toolkit=sun.awt.windows.WToolkit, file.encoding.pkg=sun.io, java.specification.version=1.8, sun.cpu.isalist=amd64, sun.jnu.encoding=Cp1252, sun.awt.enableExtraMouseButtons=true, java.class.path=C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\log4j-1.2.17.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\mysql-connector-java-5.1.45-bin.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\antlr-2.7.7.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\classmate-1.3.0.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\dom4j-1.6.1.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\hibernate-commons-annotations-5.0.1.Final.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\hibernate-core-5.2.12.Final.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\hibernate-jpa-2.1-api-1.0.0.Final.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\jandex-2.0.3.Final.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\javassist-3.20.0-GA.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\jboss-logging-3.3.0.Final.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\jboss-transaction-api_1.2_spec-1.0.1.Final.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\eclipselink.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\javax.persistence-3.0-prelude-embedded-m2-sources.jar;C:\Users\BenJolien\Desktop\eclipse\plugins\org.junit_4.12.0.v201504281640\junit.jar;C:\Users\BenJolien\Desktop\eclipse\plugins\org.hamcrest.core_1.3.0.v201303031735.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\jcalendar-1.4.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\target\classes;C:\Users\BenJolien\.m2\repository\org\apache\maven\plugins\maven-compiler-plugin\3.7.0\maven-compiler-plugin-3.7.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-plugin-api\3.0\maven-plugin-api-3.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-model\3.0\maven-model-3.0.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\sisu\sisu-inject-plexus\1.4.2\sisu-inject-plexus-1.4.2.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\sisu\sisu-inject-bean\1.4.2\sisu-inject-bean-1.4.2.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\sisu\sisu-guice\2.1.7\sisu-guice-2.1.7-noaop.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-artifact\3.0\maven-artifact-3.0.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-utils\2.0.4\plexus-utils-2.0.4.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-core\3.0\maven-core-3.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-settings\3.0\maven-settings-3.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-settings-builder\3.0\maven-settings-builder-3.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-repository-metadata\3.0\maven-repository-metadata-3.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-model-builder\3.0\maven-model-builder-3.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-aether-provider\3.0\maven-aether-provider-3.0.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\aether\aether-impl\1.7\aether-impl-1.7.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\aether\aether-spi\1.7\aether-spi-1.7.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\aether\aether-api\1.7\aether-api-1.7.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\aether\aether-util\1.7\aether-util-1.7.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-interpolation\1.14\plexus-interpolation-1.14.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-classworlds\2.2.3\plexus-classworlds-2.2.3.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-component-annotations\1.5.5\plexus-component-annotations-1.5.5.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\plexus\plexus-sec-dispatcher\1.3\plexus-sec-dispatcher-1.3.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\plexus\plexus-cipher\1.4\plexus-cipher-1.4.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\shared\maven-shared-utils\3.1.0\maven-shared-utils-3.1.0.jar;C:\Users\BenJolien\.m2\repository\commons-io\commons-io\2.5\commons-io-2.5.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\shared\maven-shared-incremental\1.1\maven-shared-incremental-1.1.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-java\0.9.2\plexus-java-0.9.2.jar;C:\Users\BenJolien\.m2\repository\org\ow2\asm\asm\6.0_BETA\asm-6.0_BETA.jar;C:\Users\BenJolien\.m2\repository\com\thoughtworks\qdox\qdox\2.0-M7\qdox-2.0-M7.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-compiler-api\2.8.2\plexus-compiler-api-2.8.2.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-compiler-manager\2.8.2\plexus-compiler-manager-2.8.2.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-compiler-javac\2.8.2\plexus-compiler-javac-2.8.2.jar;C:\Users\BenJolien\.m2\repository\org\hibernate\hibernate-core\4.2.7.SP1\hibernate-core-4.2.7.SP1.jar;C:\Users\BenJolien\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\BenJolien\.m2\repository\org\jboss\logging\jboss-logging\3.1.0.GA\jboss-logging-3.1.0.GA.jar;C:\Users\BenJolien\.m2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;C:\Users\BenJolien\.m2\repository\org\javassist\javassist\3.18.1-GA\javassist-3.18.1-GA.jar;C:\Users\BenJolien\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.1_spec\1.0.1.Final\jboss-transaction-api_1.1_spec-1.0.1.Final.jar;C:\Users\BenJolien\.m2\repository\org\hibernate\common\hibernate-commons-annotations\4.0.2.Final\hibernate-commons-annotations-4.0.2.Final.jar;C:\Users\BenJolien\.m2\repository\mysql\mysql-connector-java\6.0.6\mysql-connector-java-6.0.6.jar;C:\Users\BenJolien\.m2\repository\org\fluttercode\datafactory\datafactory\0.8\datafactory-0.8.jar;C:\Users\BenJolien\.m2\repository\org\hibernate\javax\persistence\hibernate-jpa-2.0-api\1.0.1.Final\hibernate-jpa-2.0-api-1.0.1.Final.jar;C:\Users\BenJolien\.m2\repository\org\hibernate\hibernate-entitymanager\5.2.12.Final\hibernate-entitymanager-5.2.12.Final.jar;C:\Users\BenJolien\.m2\repository\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar;C:\Users\BenJolien\.m2\repository\net\bytebuddy\byte-buddy\1.6.14\byte-buddy-1.6.14.jar;C:\Users\BenJolien\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.0.1.Final\jboss-transaction-api_1.2_spec-1.0.1.Final.jar, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=http://java.oracle.com/, user.timezone=Europe/Berlin, javax.persistence.jdbc.user=****, javax.persistence.jdbc.url=jdbc:mysql://localhost:3306/DbRemote, os.name=Windows 10, java.vm.specification.version=1.8, user.country=BE, sun.java.launcher=SUN_STANDARD, sun.boot.library.path=C:\Program Files\Java\jre1.8.0_144\bin, sun.java.command=controller.ControllerRunnerApp, sun.cpu.endian=little, user.home=C:\Users\BenJolien, user.language=nl, java.specification.vendor=Oracle Corporation, java.home=C:\Program Files\Java\jre1.8.0_144, file.separator=\, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, hibernate.transaction.coordinator_class=class org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorBuilderImpl, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, javax.persistence.jdbc.driver=com.mysql.jdbc.Driver, sun.boot.class.path=C:\Program Files\Java\jre1.8.0_144\lib\resources.jar;C:\Program Files\Java\jre1.8.0_144\lib\rt.jar;C:\Program Files\Java\jre1.8.0_144\lib\sunrsasign.jar;C:\Program Files\Java\jre1.8.0_144\lib\jsse.jar;C:\Program Files\Java\jre1.8.0_144\lib\jce.jar;C:\Program Files\Java\jre1.8.0_144\lib\charsets.jar;C:\Program Files\Java\jre1.8.0_144\lib\jfr.jar;C:\Program Files\Java\jre1.8.0_144\classes, user.script=, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=1.8.0_144-b01, user.name=BenJolien, path.separator=;, hibernate.connection.username=userDB, os.version=10.0, java.endorsed.dirs=C:\Program Files\Java\jre1.8.0_144\lib\endorsed, java.runtime.name=Java(TM) SE Runtime Environment, hibernate.connection.url=jdbc:mysql://localhost:3306/DbRemote, hibernate.ejb.persistenceUnitName=Afstandsbediening, file.encoding=UTF-8, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.connection.driver_class=com.mysql.jdbc.Driver, java.vendor.url.bug=http://bugreport.sun.com/bugreport/, java.io.tmpdir=C:\Users\BENJOL~1\AppData\Local\Temp\, java.version=1.8.0_144, user.dir=C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, hibernate.connection.password=****, java.awt.printerjob=sun.awt.windows.WPrinterJob, sun.os.patch.level=, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@4716be8b, java.library.path=C:\Program Files\Java\jre1.8.0_144\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:/Program Files/Java/jre1.8.0_151/bin/server;C:/Program Files/Java/jre1.8.0_151/bin;C:/Program Files/Java/jre1.8.0_151/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Program Files\Microsoft MPI\Bin\;C:\Program Files (x86)\Intel\iCLS Client\;C:\Program Files\Intel\iCLS Client\;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files (x86)\Windows Kits\10\Windows Performance Toolkit\;C:\Program Files\dotnet\;C:\Program Files\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files (x86)\GtkSharp\2.12\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\nodejs\;C:\Program Files\Microsoft\Web Platform Installer\;C:\Program Files\Microsoft SQL Server\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\110\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\110\DTS\Binn\;C:\Program Files\Microsoft SQL Server\110\DTS\Binn\;C:\Program Files (x86)\Microsoft SQL Server\Client SDK\ODBC\130\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\130\DTS\Binn\;C:\Program Files (x86)\Microsoft SQL Server\130\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files (x86)\scala\bin;C:\Program Files\ibm\gsk8\lib64;C:\Program Files (x86)\ibm\gsk8\lib;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Brackets\command;C:\Program Files\Git\cmd;C:\Program Files\MySQL\MySQL Utilities 1.6\;C:\Users\BenJolien\AppData\Local\Microsoft\WindowsApps;C:\Users\BenJolien\AppData\Roaming\npm;;C:\Users\BenJolien\Desktop\eclipse;;., java.vm.info=mixed mode, java.vendor=Oracle Corporation, java.vm.version=25.144-b01, hibernate.bytecode.use_reflection_optimizer=false, java.ext.dirs=C:\Program Files\Java\jre1.8.0_144\lib\ext;C:\WINDOWS\Sun\Java\lib\ext, sun.io.unicode.encoding=UnicodeLittle, javax.persistence.jdbc.password=userDB, java.class.version=52.0}
2017-12-29 21:41:08,625 +0100 [main] DEBUG (JaccIntegrator.java:80) - Skipping JACC integration as it was not enabled
2017-12-29 21:41:08,627 +0100 [main] DEBUG (CascadeStyles.java:268) - External cascade style registration [persist : STYLE_PERSIST_SKIPLAZY] overrode base registration [STYLE_PERSIST]
2017-12-29 21:41:08,636 +0100 [main] DEBUG (SessionFactoryImpl.java:298) - Instantiated session factory
2017-12-29 21:41:08,656 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:55) - Not known whether passed class name [model.entities.Address] is safe
2017-12-29 21:41:08,656 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:57) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.entities.Address
2017-12-29 21:41:08,663 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:55) - Not known whether passed class name [model.entities.Address] is safe
2017-12-29 21:41:08,663 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:57) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.entities.Address
2017-12-29 21:41:08,690 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:55) - Not known whether passed class name [model.entities.Remote] is safe
2017-12-29 21:41:08,690 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:57) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.entities.Remote
2017-12-29 21:41:08,690 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:55) - Not known whether passed class name [model.entities.Remote] is safe
2017-12-29 21:41:08,690 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:57) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.entities.Remote
2017-12-29 21:41:08,693 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:55) - Not known whether passed class name [model.entities.Person] is safe
2017-12-29 21:41:08,693 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:57) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.entities.Person
2017-12-29 21:41:08,695 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:55) - Not known whether passed class name [model.entities.Person] is safe
2017-12-29 21:41:08,695 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:57) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.entities.Person
2017-12-29 21:41:08,704 +0100 [main] DEBUG (AbstractEntityPersister.java:3608) - Static SQL for entity: model.entities.Address
2017-12-29 21:41:08,704 +0100 [main] DEBUG (AbstractEntityPersister.java:3613) -  Version select: select id from address where id =?
2017-12-29 21:41:08,704 +0100 [main] DEBUG (AbstractEntityPersister.java:3616) -  Snapshot select: select address_.id, address_.city as city2_0_, address_.country as country3_0_, address_.mailBox as mailBox4_0_, address_.nr as nr5_0_, address_.postalCode as postalCo6_0_, address_.street as street7_0_ from address address_ where address_.id=?
2017-12-29 21:41:08,704 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into address (city, country, mailBox, nr, postalCode, street, id) values (?, ?, ?, ?, ?, ?, ?)
2017-12-29 21:41:08,704 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update address set city=?, country=?, mailBox=?, nr=?, postalCode=?, street=? where id=?
2017-12-29 21:41:08,704 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from address where id=?
2017-12-29 21:41:08,705 +0100 [main] DEBUG (AbstractEntityPersister.java:3624) -  Identity insert: insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:41:08,717 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7e8dcdaa]
2017-12-29 21:41:08,719 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:41:08,719 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:41:08,719 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:41:08,719 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:41:08,719 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:41:08,719 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:41:08,719 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:41:08,726 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:41:08,754 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:41:08,772 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [NONE]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:41:08,772 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7ac2e39b]
2017-12-29 21:41:08,772 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:41:08,772 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:41:08,772 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:41:08,772 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:41:08,773 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:41:08,773 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:41:08,773 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:41:08,773 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:41:08,773 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:41:08,773 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [READ]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:41:08,773 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@64a8c844]
2017-12-29 21:41:08,774 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:41:08,774 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:41:08,774 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:41:08,774 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:41:08,774 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:41:08,774 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:41:08,774 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:41:08,774 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:41:08,775 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:41:08,775 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [UPGRADE]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? for update
2017-12-29 21:41:08,775 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@52de51b6]
2017-12-29 21:41:08,775 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:41:08,775 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:41:08,775 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:41:08,775 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:41:08,775 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:41:08,775 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:41:08,775 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:41:08,776 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:41:08,776 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:41:08,776 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [UPGRADE_NOWAIT]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? for update
2017-12-29 21:41:08,776 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3a0d172f]
2017-12-29 21:41:08,776 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:41:08,776 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:41:08,776 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:41:08,776 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:41:08,776 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:41:08,776 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:41:08,777 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:41:08,777 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:41:08,777 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:41:08,777 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [UPGRADE_SKIPLOCKED]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? for update
2017-12-29 21:41:08,777 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@485e36bc]
2017-12-29 21:41:08,777 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:41:08,777 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:41:08,777 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:41:08,777 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:41:08,778 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:41:08,778 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:41:08,778 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:41:08,778 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:41:08,778 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:41:08,778 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [FORCE]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? for update
2017-12-29 21:41:08,778 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2a79d4b1]
2017-12-29 21:41:08,778 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:41:08,778 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:41:08,779 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:41:08,779 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:41:08,779 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:41:08,779 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:41:08,779 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:41:08,779 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:41:08,779 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:41:08,779 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [PESSIMISTIC_READ]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? lock in share mode
2017-12-29 21:41:08,779 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@17cdf2d0]
2017-12-29 21:41:08,779 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:41:08,779 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:41:08,780 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:41:08,780 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:41:08,780 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:41:08,780 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:41:08,780 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:41:08,780 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:41:08,780 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:41:08,781 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [PESSIMISTIC_WRITE]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? for update
2017-12-29 21:41:08,781 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@736d6a5c]
2017-12-29 21:41:08,781 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:41:08,781 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:41:08,781 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:41:08,781 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:41:08,781 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:41:08,781 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:41:08,781 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:41:08,781 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:41:08,782 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:41:08,782 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [PESSIMISTIC_FORCE_INCREMENT]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? for update
2017-12-29 21:41:08,782 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5b529706]
2017-12-29 21:41:08,782 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:41:08,782 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:41:08,782 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:41:08,782 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:41:08,782 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:41:08,782 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:41:08,782 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:41:08,782 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:41:08,783 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:41:08,783 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [OPTIMISTIC]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:41:08,783 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7b5a12ae]
2017-12-29 21:41:08,783 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:41:08,783 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:41:08,783 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:41:08,783 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:41:08,783 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:41:08,783 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:41:08,783 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:41:08,783 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:41:08,784 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:41:08,784 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [OPTIMISTIC_FORCE_INCREMENT]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:41:08,791 +0100 [main] DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity model.entities.Address: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:41:08,791 +0100 [main] DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity model.entities.Address: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:41:08,792 +0100 [main] DEBUG (AbstractEntityPersister.java:3608) - Static SQL for entity: model.entities.Remote
2017-12-29 21:41:08,792 +0100 [main] DEBUG (AbstractEntityPersister.java:3613) -  Version select: select id from Remote where id =?
2017-12-29 21:41:08,792 +0100 [main] DEBUG (AbstractEntityPersister.java:3616) -  Snapshot select: select remote_.id, remote_.frequency as frequenc2_2_, remote_.isActive as isActive3_2_, remote_.serialNumber as serialNu4_2_ from Remote remote_ where remote_.id=?
2017-12-29 21:41:08,792 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into Remote (frequency, isActive, serialNumber, id) values (?, ?, ?, ?)
2017-12-29 21:41:08,792 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update Remote set frequency=?, isActive=?, serialNumber=? where id=?
2017-12-29 21:41:08,792 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from Remote where id=?
2017-12-29 21:41:08,792 +0100 [main] DEBUG (AbstractEntityPersister.java:3624) -  Identity insert: insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:41:08,792 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6475472c]
2017-12-29 21:41:08,792 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:41:08,792 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:41:08,792 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:41:08,792 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:41:08,792 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:41:08,793 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:41:08,793 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [NONE]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:41:08,793 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4bd1f8dd]
2017-12-29 21:41:08,793 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:41:08,793 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:41:08,793 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:41:08,793 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:41:08,793 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:41:08,793 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:41:08,793 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [READ]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:41:08,794 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3e14c16d]
2017-12-29 21:41:08,794 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:41:08,794 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:41:08,794 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:41:08,794 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:41:08,794 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:41:08,794 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:41:08,794 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [UPGRADE]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? for update
2017-12-29 21:41:08,794 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@784b990c]
2017-12-29 21:41:08,794 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:41:08,794 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:41:08,795 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:41:08,795 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:41:08,795 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:41:08,795 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:41:08,795 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [UPGRADE_NOWAIT]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? for update
2017-12-29 21:41:08,795 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@25bc0606]
2017-12-29 21:41:08,795 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:41:08,795 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:41:08,795 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:41:08,796 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:41:08,796 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:41:08,796 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:41:08,796 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [UPGRADE_SKIPLOCKED]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? for update
2017-12-29 21:41:08,796 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1951b871]
2017-12-29 21:41:08,797 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:41:08,797 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:41:08,797 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:41:08,797 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:41:08,797 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:41:08,797 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:41:08,797 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [FORCE]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? for update
2017-12-29 21:41:08,797 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@33aeca0b]
2017-12-29 21:41:08,797 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:41:08,798 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:41:08,798 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:41:08,798 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:41:08,798 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:41:08,798 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:41:08,798 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [PESSIMISTIC_READ]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? lock in share mode
2017-12-29 21:41:08,798 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@57ac5227]
2017-12-29 21:41:08,799 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:41:08,799 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:41:08,799 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:41:08,799 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:41:08,799 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:41:08,799 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:41:08,799 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [PESSIMISTIC_WRITE]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? for update
2017-12-29 21:41:08,799 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@e98770d]
2017-12-29 21:41:08,799 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:41:08,800 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:41:08,800 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:41:08,800 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:41:08,800 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:41:08,800 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:41:08,800 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [PESSIMISTIC_FORCE_INCREMENT]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? for update
2017-12-29 21:41:08,801 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2f6e28bc]
2017-12-29 21:41:08,801 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:41:08,801 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:41:08,801 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:41:08,801 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:41:08,801 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:41:08,802 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:41:08,802 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [OPTIMISTIC]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:41:08,802 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@31e4bb20]
2017-12-29 21:41:08,802 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:41:08,802 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:41:08,802 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:41:08,803 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:41:08,803 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:41:08,803 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:41:08,803 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [OPTIMISTIC_FORCE_INCREMENT]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:41:08,804 +0100 [main] DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity model.entities.Remote: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:41:08,804 +0100 [main] DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity model.entities.Remote: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:41:08,804 +0100 [main] DEBUG (AbstractEntityPersister.java:3608) - Static SQL for entity: model.entities.Person
2017-12-29 21:41:08,804 +0100 [main] DEBUG (AbstractEntityPersister.java:3613) -  Version select: select id from Person where id =?
2017-12-29 21:41:08,804 +0100 [main] DEBUG (AbstractEntityPersister.java:3616) -  Snapshot select: select person_.id, person_.addressId as addressI5_1_, person_.endOfContract as endOfCon2_1_, person_.firstname as firstnam3_1_, person_.lastname as lastname4_1_, person_.remoteId as remoteId6_1_ from Person person_ where person_.id=?
2017-12-29 21:41:08,805 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into Person (addressId, endOfContract, firstname, lastname, remoteId, id) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:41:08,805 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update Person set addressId=?, endOfContract=?, firstname=?, lastname=?, remoteId=? where id=?
2017-12-29 21:41:08,805 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from Person where id=?
2017-12-29 21:41:08,805 +0100 [main] DEBUG (AbstractEntityPersister.java:3624) -  Identity insert: insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:41:08,805 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@463b4ac8]
2017-12-29 21:41:08,805 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:41:08,808 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5b1f29fa]
2017-12-29 21:41:08,810 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.city
2017-12-29 21:41:08,810 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.country
2017-12-29 21:41:08,810 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.mailBox
2017-12-29 21:41:08,810 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.nr
2017-12-29 21:41:08,810 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.postalCode
2017-12-29 21:41:08,810 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.street
2017-12-29 21:41:08,810 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:41:08,810 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:41:08,811 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:41:08,811 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:41:08,811 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@b6b1987]
2017-12-29 21:41:08,811 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote.frequency
2017-12-29 21:41:08,811 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote.isActive
2017-12-29 21:41:08,811 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote.serialNumber
2017-12-29 21:41:08,811 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:41:08,811 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:41:08,812 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}
          - JOIN (JoinDefinedByMetadata(address)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=model.entities.Address)
                - SQL table alias mapping - address1_
                - alias suffix - 1_
                - suffixed key columns - {id1_0_1_}
          - JOIN (JoinDefinedByMetadata(remote)) : <gen:0> -> <gen:2>
             - EntityQuerySpaceImpl(uid=<gen:2>, entity=model.entities.Remote)
                - SQL table alias mapping - remote2_
                - alias suffix - 2_
                - suffixed key columns - {id1_2_2_}

2017-12-29 21:41:08,812 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [NONE]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.mailBox as mailBox4_0_1_, address1_.nr as nr5_0_1_, address1_.postalCode as postalCo6_0_1_, address1_.street as street7_0_1_, remote2_.id as id1_2_2_, remote2_.frequency as frequenc2_2_2_, remote2_.isActive as isActive3_2_2_, remote2_.serialNumber as serialNu4_2_2_ from Person person0_ left outer join address address1_ on person0_.addressId=address1_.id left outer join Remote remote2_ on person0_.remoteId=remote2_.id where person0_.id=?
2017-12-29 21:41:08,813 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3543df7d]
2017-12-29 21:41:08,813 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:41:08,813 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3542162a]
2017-12-29 21:41:08,813 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.city
2017-12-29 21:41:08,813 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.country
2017-12-29 21:41:08,813 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.mailBox
2017-12-29 21:41:08,813 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.nr
2017-12-29 21:41:08,813 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.postalCode
2017-12-29 21:41:08,814 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.street
2017-12-29 21:41:08,814 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:41:08,814 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:41:08,814 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:41:08,814 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:41:08,814 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4212a0c8]
2017-12-29 21:41:08,814 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote.frequency
2017-12-29 21:41:08,814 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote.isActive
2017-12-29 21:41:08,814 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote.serialNumber
2017-12-29 21:41:08,815 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:41:08,815 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:41:08,815 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}
          - JOIN (JoinDefinedByMetadata(address)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=model.entities.Address)
                - SQL table alias mapping - address1_
                - alias suffix - 1_
                - suffixed key columns - {id1_0_1_}
          - JOIN (JoinDefinedByMetadata(remote)) : <gen:0> -> <gen:2>
             - EntityQuerySpaceImpl(uid=<gen:2>, entity=model.entities.Remote)
                - SQL table alias mapping - remote2_
                - alias suffix - 2_
                - suffixed key columns - {id1_2_2_}

2017-12-29 21:41:08,816 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [READ]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.mailBox as mailBox4_0_1_, address1_.nr as nr5_0_1_, address1_.postalCode as postalCo6_0_1_, address1_.street as street7_0_1_, remote2_.id as id1_2_2_, remote2_.frequency as frequenc2_2_2_, remote2_.isActive as isActive3_2_2_, remote2_.serialNumber as serialNu4_2_2_ from Person person0_ left outer join address address1_ on person0_.addressId=address1_.id left outer join Remote remote2_ on person0_.remoteId=remote2_.id where person0_.id=?
2017-12-29 21:41:08,816 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3b2c0e88]
2017-12-29 21:41:08,816 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:41:08,816 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@c1bd0be]
2017-12-29 21:41:08,816 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:41:08,816 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:41:08,816 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:41:08,816 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:41:08,817 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@476b0ae6]
2017-12-29 21:41:08,817 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:41:08,817 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:41:08,817 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 21:41:08,817 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [UPGRADE]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? for update
2017-12-29 21:41:08,818 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1c6804cd]
2017-12-29 21:41:08,818 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:41:08,818 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@549949be]
2017-12-29 21:41:08,818 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:41:08,818 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:41:08,818 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:41:08,818 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:41:08,819 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4b3a45f1]
2017-12-29 21:41:08,819 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:41:08,819 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:41:08,819 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 21:41:08,820 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [UPGRADE_NOWAIT]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? for update
2017-12-29 21:41:08,820 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@17a87e37]
2017-12-29 21:41:08,820 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:41:08,820 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@20a14b55]
2017-12-29 21:41:08,820 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:41:08,820 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:41:08,820 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:41:08,820 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:41:08,821 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@39ad977d]
2017-12-29 21:41:08,821 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:41:08,821 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:41:08,821 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 21:41:08,821 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [UPGRADE_SKIPLOCKED]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? for update
2017-12-29 21:41:08,821 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6da00fb9]
2017-12-29 21:41:08,822 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:41:08,822 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@20f12539]
2017-12-29 21:41:08,822 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:41:08,822 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:41:08,822 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:41:08,822 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:41:08,822 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@75b25825]
2017-12-29 21:41:08,822 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:41:08,823 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:41:08,823 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 21:41:08,823 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [FORCE]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? for update
2017-12-29 21:41:08,823 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@18025ced]
2017-12-29 21:41:08,823 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:41:08,823 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3a3e4aff]
2017-12-29 21:41:08,823 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:41:08,823 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:41:08,824 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:41:08,824 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:41:08,824 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5d2a4eed]
2017-12-29 21:41:08,824 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:41:08,824 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:41:08,824 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 21:41:08,824 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [PESSIMISTIC_READ]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? lock in share mode
2017-12-29 21:41:08,824 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@57459491]
2017-12-29 21:41:08,824 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:41:08,824 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@77a98a6a]
2017-12-29 21:41:08,824 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:41:08,824 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:41:08,825 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:41:08,825 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:41:08,825 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@78fbff54]
2017-12-29 21:41:08,825 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:41:08,825 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:41:08,825 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 21:41:08,825 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [PESSIMISTIC_WRITE]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? for update
2017-12-29 21:41:08,825 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3e10dc6]
2017-12-29 21:41:08,825 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:41:08,825 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@45e37a7e]
2017-12-29 21:41:08,825 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:41:08,825 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:41:08,826 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:41:08,826 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:41:08,826 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@62452cc9]
2017-12-29 21:41:08,826 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:41:08,826 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:41:08,826 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 21:41:08,826 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [PESSIMISTIC_FORCE_INCREMENT]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? for update
2017-12-29 21:41:08,826 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6941827a]
2017-12-29 21:41:08,826 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:41:08,826 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5bc9ba1d]
2017-12-29 21:41:08,826 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:41:08,826 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:41:08,827 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:41:08,827 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:41:08,827 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1021f6c9]
2017-12-29 21:41:08,827 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:41:08,827 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:41:08,827 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 21:41:08,827 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [OPTIMISTIC]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=?
2017-12-29 21:41:08,827 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7516e4e5]
2017-12-29 21:41:08,827 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:41:08,827 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5e81e5ac]
2017-12-29 21:41:08,827 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:41:08,827 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:41:08,828 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:41:08,828 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:41:08,828 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4189d70b]
2017-12-29 21:41:08,828 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:41:08,828 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:41:08,828 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 21:41:08,828 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [OPTIMISTIC_FORCE_INCREMENT]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=?
2017-12-29 21:41:08,829 +0100 [main] DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity model.entities.Person: select person0_.id as id1_1_2_, person0_.addressId as addressI5_1_2_, person0_.endOfContract as endOfCon2_1_2_, person0_.firstname as firstnam3_1_2_, person0_.lastname as lastname4_1_2_, person0_.remoteId as remoteId6_1_2_, address1_.id as id1_0_0_, address1_.city as city2_0_0_, address1_.country as country3_0_0_, address1_.mailBox as mailBox4_0_0_, address1_.nr as nr5_0_0_, address1_.postalCode as postalCo6_0_0_, address1_.street as street7_0_0_, remote2_.id as id1_2_1_, remote2_.frequency as frequenc2_2_1_, remote2_.isActive as isActive3_2_1_, remote2_.serialNumber as serialNu4_2_1_ from Person person0_ left outer join address address1_ on person0_.addressId=address1_.id left outer join Remote remote2_ on person0_.remoteId=remote2_.id where person0_.id=?
2017-12-29 21:41:08,829 +0100 [main] DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity model.entities.Person: select person0_.id as id1_1_2_, person0_.addressId as addressI5_1_2_, person0_.endOfContract as endOfCon2_1_2_, person0_.firstname as firstnam3_1_2_, person0_.lastname as lastname4_1_2_, person0_.remoteId as remoteId6_1_2_, address1_.id as id1_0_0_, address1_.city as city2_0_0_, address1_.country as country3_0_0_, address1_.mailBox as mailBox4_0_0_, address1_.nr as nr5_0_0_, address1_.postalCode as postalCo6_0_0_, address1_.street as street7_0_0_, remote2_.id as id1_2_1_, remote2_.frequency as frequenc2_2_1_, remote2_.isActive as isActive3_2_1_, remote2_.serialNumber as serialNu4_2_1_ from Person person0_ left outer join address address1_ on person0_.addressId=address1_.id left outer join Remote remote2_ on person0_.remoteId=remote2_.id where person0_.id=?
2017-12-29 21:41:08,842 +0100 [main] DEBUG (SchemaManagementToolCoordinator.java:56) - No actions specified; doing nothing
2017-12-29 21:41:08,842 +0100 [main] DEBUG (JtaPlatformInitiator.java:42) - No JtaPlatform was specified, checking resolver
2017-12-29 21:41:08,842 +0100 [main] DEBUG (JtaPlatformResolverInitiator.java:33) - No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
2017-12-29 21:41:08,862 +0100 [main] DEBUG (StandardJtaPlatformResolver.java:102) - Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2017-12-29 21:41:08,862 +0100 [main] DEBUG (NamedQueryRepository.java:151) - Checking 1 named HQL queries
2017-12-29 21:41:08,863 +0100 [main] DEBUG (NamedQueryRepository.java:155) - Checking named query: findUnusedAddress
2017-12-29 21:41:08,868 +0100 [main] DEBUG (QueryTranslatorFactoryInitiator.java:45) - QueryTranslatorFactory : org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory@58ebfd03
2017-12-29 21:41:08,868 +0100 [main] INFO  (QueryTranslatorFactoryInitiator.java:47) - HHH000397: Using ASTQueryTranslatorFactory
2017-12-29 21:41:08,891 +0100 [main] DEBUG (QueryTranslatorImpl.java:282) - parse() - HQL: SELECT a FROM model.entities.Address a WHERE a.id NOT IN (SELECT p.address.id FROM model.entities.Person p)
2017-12-29 21:41:08,895 +0100 [main] DEBUG (ErrorCounter.java:95) - throwQueryException() : no errors
2017-12-29 21:41:08,896 +0100 [main] DEBUG (QueryTranslatorImpl.java:305) - --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'FROM'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[IDENT] Node: 'model'
    |  |     |  |  \-[IDENT] Node: 'entities'
    |  |     |  \-[IDENT] Node: 'Address'
    |  |     \-[ALIAS] Node: 'a'
    |  \-[SELECT] Node: 'SELECT'
    |     \-[IDENT] Node: 'a'
    \-[WHERE] Node: 'WHERE'
       \-[NOT_IN] Node: 'not in'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'a'
          |  \-[IDENT] Node: 'id'
          \-[IN_LIST] Node: 'inList'
             \-[QUERY] Node: 'query'
                \-[SELECT_FROM] Node: 'SELECT_FROM'
                   +-[FROM] Node: 'FROM'
                   |  \-[RANGE] Node: 'RANGE'
                   |     +-[DOT] Node: '.'
                   |     |  +-[DOT] Node: '.'
                   |     |  |  +-[IDENT] Node: 'model'
                   |     |  |  \-[IDENT] Node: 'entities'
                   |     |  \-[IDENT] Node: 'Person'
                   |     \-[ALIAS] Node: 'p'
                   \-[SELECT] Node: 'SELECT'
                      \-[DOT] Node: '.'
                         +-[DOT] Node: '.'
                         |  +-[IDENT] Node: 'p'
                         |  \-[IDENT] Node: 'address'
                         \-[IDENT] Node: 'id'

2017-12-29 21:41:08,911 +0100 [main] DEBUG (HqlSqlBaseWalker.java:124) - select << begin [level=1, statement=select]
2017-12-29 21:41:08,918 +0100 [main] DEBUG (FromElement.java:147) - FromClause{level=1} : model.entities.Address (a) -> address0_
2017-12-29 21:41:08,919 +0100 [main] DEBUG (FromReferenceNode.java:60) - Resolved : a -> address0_.id
2017-12-29 21:41:08,921 +0100 [main] DEBUG (FromReferenceNode.java:60) - Resolved : a -> address0_.id
2017-12-29 21:41:08,921 +0100 [main] DEBUG (DotNode.java:666) - getDataType() : id -> org.hibernate.type.IntegerType@358c99f5
2017-12-29 21:41:08,922 +0100 [main] DEBUG (FromReferenceNode.java:60) - Resolved : a.id -> address0_.id
2017-12-29 21:41:08,922 +0100 [main] DEBUG (HqlSqlBaseWalker.java:124) - select << begin [level=2, statement=select]
2017-12-29 21:41:08,922 +0100 [main] DEBUG (FromElement.java:147) - FromClause{level=2} : model.entities.Person (p) -> person1_
2017-12-29 21:41:08,923 +0100 [main] DEBUG (FromReferenceNode.java:60) - Resolved : p -> person1_.id
2017-12-29 21:41:08,923 +0100 [main] DEBUG (DotNode.java:666) - getDataType() : address -> org.hibernate.type.ManyToOneType(model.entities.Address)
2017-12-29 21:41:08,923 +0100 [main] DEBUG (DotNode.java:625) - dereferenceShortcut() : property id in model.entities.Person does not require a join.
2017-12-29 21:41:08,923 +0100 [main] DEBUG (DotNode.java:650) - Unresolved property path is now 'address.id'
2017-12-29 21:41:08,923 +0100 [main] DEBUG (FromReferenceNode.java:60) - Resolved : p.address -> person1_.addressId
2017-12-29 21:41:08,923 +0100 [main] DEBUG (DotNode.java:666) - getDataType() : address.id -> org.hibernate.type.IntegerType@358c99f5
2017-12-29 21:41:08,923 +0100 [main] DEBUG (FromReferenceNode.java:60) - Resolved : p.address.id -> person1_.addressId
2017-12-29 21:41:08,923 +0100 [main] DEBUG (HqlSqlBaseWalker.java:128) - select : finishing up [level=2, statement=select]
2017-12-29 21:41:08,923 +0100 [main] DEBUG (HqlSqlWalker.java:747) - processQuery() :  ( SELECT ( {select clause} ( person1_.addressId ( person1_.addressId person1_.id address ) id ) ) ( FromClause{level=2} Person person1_ ) )
2017-12-29 21:41:08,927 +0100 [main] DEBUG (JoinProcessor.java:192) - Using FROM fragment [Person person1_]
2017-12-29 21:41:08,927 +0100 [main] DEBUG (HqlSqlBaseWalker.java:132) - select >> end [level=2, statement=select]
2017-12-29 21:41:08,928 +0100 [main] DEBUG (HqlSqlBaseWalker.java:128) - select : finishing up [level=1, statement=select]
2017-12-29 21:41:08,928 +0100 [main] DEBUG (HqlSqlWalker.java:747) - processQuery() :  ( SELECT ( {select clause} address0_.id ) ( FromClause{level=1} address address0_ ) ( WHERE ( not in ( address0_.id address0_.id id ) ( inList ( SELECT ( {select clause} ( person1_.addressId ( person1_.addressId person1_.id address ) id ) ) ( FromClause{level=2} Person person1_ ) ) ) ) ) )
2017-12-29 21:41:08,930 +0100 [main] DEBUG (JoinProcessor.java:192) - Using FROM fragment [address address0_]
2017-12-29 21:41:08,930 +0100 [main] DEBUG (HqlSqlBaseWalker.java:132) - select >> end [level=1, statement=select]
2017-12-29 21:41:08,930 +0100 [main] DEBUG (QueryTranslatorImpl.java:269) - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (address,Person)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'address0_.id as id1_0_' {alias=a, className=model.entities.Address, tableAlias=address0_}
    |  \-[SQL_TOKEN] SqlFragment: 'address0_.city as city2_0_, address0_.country as country3_0_, address0_.mailBox as mailBox4_0_, address0_.nr as nr5_0_, address0_.postalCode as postalCo6_0_, address0_.street as street7_0_'
    +-[FROM] FromClause: 'FROM' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[a], fromElementByTableAlias=[address0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'address address0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=a,role=null,tableName=address,tableAlias=address0_,origin=null,columns={,className=model.entities.Address}}
    \-[WHERE] SqlNode: 'WHERE'
       \-[NOT_IN] InLogicOperatorNode: 'not in'
          +-[DOT] DotNode: 'address0_.id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=id,path=a.id,tableAlias=address0_,className=model.entities.Address,classAlias=a}
          |  +-[ALIAS_REF] IdentNode: 'address0_.id' {alias=a, className=model.entities.Address, tableAlias=address0_}
          |  \-[IDENT] IdentNode: 'id' {originalText=id}
          \-[IN_LIST] SqlNode: 'inList'
             \-[SELECT] QueryNode: 'SELECT'  querySpaces (address,Person)
                +-[SELECT_CLAUSE] SelectClause: '{select clause}'
                |  \-[DOT] DotNode: 'person1_.addressId' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=address.id,path=p.address.id,tableAlias=person1_,className=model.entities.Person,classAlias=p}
                |     +-[DOT] DotNode: 'person1_.addressId' {propertyName=id,dereferenceType=UNKNOWN,getPropertyPath=address.id,path=p.address,tableAlias=person1_,className=model.entities.Person,classAlias=p}
                |     |  +-[ALIAS_REF] IdentNode: 'person1_.id' {alias=p, className=model.entities.Person, tableAlias=person1_}
                |     |  \-[IDENT] IdentNode: 'address' {originalText=address}
                |     \-[IDENT] IdentNode: 'id' {originalText=id}
                \-[FROM] FromClause: 'FROM' FromClause{level=2, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[p], fromElementByTableAlias=[person1_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
                   \-[FROM_FRAGMENT] FromElement: 'Person person1_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=p,role=null,tableName=Person,tableAlias=person1_,origin=null,columns={,className=model.entities.Person}}

2017-12-29 21:41:08,930 +0100 [main] DEBUG (ErrorCounter.java:95) - throwQueryException() : no errors
2017-12-29 21:41:08,934 +0100 [main] DEBUG (QueryTranslatorImpl.java:251) - HQL: SELECT a FROM model.entities.Address a WHERE a.id NOT IN (SELECT p.address.id FROM model.entities.Person p)
2017-12-29 21:41:08,934 +0100 [main] DEBUG (QueryTranslatorImpl.java:252) - SQL: select address0_.id as id1_0_, address0_.city as city2_0_, address0_.country as country3_0_, address0_.mailBox as mailBox4_0_, address0_.nr as nr5_0_, address0_.postalCode as postalCo6_0_, address0_.street as street7_0_ from address address0_ where address0_.id not in  (select person1_.addressId from Person person1_)
2017-12-29 21:41:08,934 +0100 [main] DEBUG (ErrorCounter.java:95) - throwQueryException() : no errors
2017-12-29 21:41:08,937 +0100 [main] DEBUG (NamedQueryRepository.java:167) - Checking 0 named SQL queries
2017-12-29 21:41:08,938 +0100 [main] DEBUG (SessionFactoryRegistry.java:52) - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@631e06ab
2017-12-29 21:41:08,939 +0100 [main] DEBUG (SessionFactoryRegistry.java:74) - Registering SessionFactory: 3023be3d-8341-4fe3-84b3-a83ad925d97e (<unnamed>)
2017-12-29 21:41:08,939 +0100 [main] DEBUG (SessionFactoryRegistry.java:81) - Not binding SessionFactory to JNDI, no JNDI name configured
2017-12-29 21:41:08,989 +0100 [main] DEBUG (StatisticsInitiator.java:82) - Statistics initialized [enabled=false]
2017-12-29 21:41:08,995 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:41:09,005 +0100 [main] DEBUG (QueryTranslatorImpl.java:282) - parse() - HQL: FROM model.entities.Remote
2017-12-29 21:41:09,006 +0100 [main] DEBUG (ErrorCounter.java:95) - throwQueryException() : no errors
2017-12-29 21:41:09,006 +0100 [main] DEBUG (QueryTranslatorImpl.java:305) - --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'FROM'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[IDENT] Node: 'model'
                |  \-[IDENT] Node: 'entities'
                \-[IDENT] Node: 'Remote'

2017-12-29 21:41:09,006 +0100 [main] DEBUG (HqlSqlBaseWalker.java:124) - select << begin [level=1, statement=select]
2017-12-29 21:41:09,007 +0100 [main] DEBUG (FromElement.java:147) - FromClause{level=1} : model.entities.Remote (<no alias>) -> remote0_
2017-12-29 21:41:09,007 +0100 [main] DEBUG (HqlSqlBaseWalker.java:128) - select : finishing up [level=1, statement=select]
2017-12-29 21:41:09,007 +0100 [main] DEBUG (HqlSqlWalker.java:747) - processQuery() :  ( SELECT ( FromClause{level=1} Remote remote0_ ) )
2017-12-29 21:41:09,008 +0100 [main] DEBUG (HqlSqlWalker.java:1023) - Derived SELECT clause created.
2017-12-29 21:41:09,008 +0100 [main] DEBUG (JoinProcessor.java:192) - Using FROM fragment [Remote remote0_]
2017-12-29 21:41:09,008 +0100 [main] DEBUG (HqlSqlBaseWalker.java:132) - select >> end [level=1, statement=select]
2017-12-29 21:41:09,008 +0100 [main] DEBUG (QueryTranslatorImpl.java:269) - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Remote)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'remote0_.id as id1_2_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Remote,tableAlias=remote0_,origin=null,columns={,className=model.entities.Remote}}}
    |  \-[SQL_TOKEN] SqlFragment: 'remote0_.frequency as frequenc2_2_, remote0_.isActive as isActive3_2_, remote0_.serialNumber as serialNu4_2_'
    \-[FROM] FromClause: 'FROM' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[remote0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'Remote remote0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Remote,tableAlias=remote0_,origin=null,columns={,className=model.entities.Remote}}

2017-12-29 21:41:09,008 +0100 [main] DEBUG (ErrorCounter.java:95) - throwQueryException() : no errors
2017-12-29 21:41:09,008 +0100 [main] DEBUG (QueryTranslatorImpl.java:251) - HQL: FROM model.entities.Remote
2017-12-29 21:41:09,009 +0100 [main] DEBUG (QueryTranslatorImpl.java:252) - SQL: select remote0_.id as id1_2_, remote0_.frequency as frequenc2_2_, remote0_.isActive as isActive3_2_, remote0_.serialNumber as serialNu4_2_ from Remote remote0_
2017-12-29 21:41:09,009 +0100 [main] DEBUG (ErrorCounter.java:95) - throwQueryException() : no errors
2017-12-29 21:41:09,015 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_, remote0_.frequency as frequenc2_2_, remote0_.isActive as isActive3_2_, remote0_.serialNumber as serialNu4_2_ from Remote remote0_
2017-12-29 21:41:09,031 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 0
2017-12-29 21:41:09,034 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#1]
2017-12-29 21:41:09,040 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 1
2017-12-29 21:41:09,040 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#2]
2017-12-29 21:41:09,041 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 2
2017-12-29 21:41:09,041 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#3]
2017-12-29 21:41:09,041 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 3
2017-12-29 21:41:09,041 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#4]
2017-12-29 21:41:09,041 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 4
2017-12-29 21:41:09,041 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#5]
2017-12-29 21:41:09,041 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 5
2017-12-29 21:41:09,042 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#6]
2017-12-29 21:41:09,042 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 6
2017-12-29 21:41:09,042 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#7]
2017-12-29 21:41:09,042 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 7
2017-12-29 21:41:09,042 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#8]
2017-12-29 21:41:09,042 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 8
2017-12-29 21:41:09,043 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#9]
2017-12-29 21:41:09,043 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 9
2017-12-29 21:41:09,043 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#10]
2017-12-29 21:41:09,043 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 10
2017-12-29 21:41:09,043 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#11]
2017-12-29 21:41:09,043 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 11
2017-12-29 21:41:09,044 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#12]
2017-12-29 21:41:09,044 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 12
2017-12-29 21:41:09,044 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#13]
2017-12-29 21:41:09,044 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 13
2017-12-29 21:41:09,044 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#14]
2017-12-29 21:41:09,044 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 14
2017-12-29 21:41:09,044 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#15]
2017-12-29 21:41:09,045 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 15
2017-12-29 21:41:09,045 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#16]
2017-12-29 21:41:09,045 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 16
2017-12-29 21:41:09,046 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#17]
2017-12-29 21:41:09,046 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 17
2017-12-29 21:41:09,046 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#18]
2017-12-29 21:41:09,046 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 18
2017-12-29 21:41:09,046 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#19]
2017-12-29 21:41:09,046 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 19
2017-12-29 21:41:09,047 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#20]
2017-12-29 21:41:09,047 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 20
2017-12-29 21:41:09,047 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#21]
2017-12-29 21:41:09,047 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 21
2017-12-29 21:41:09,047 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#22]
2017-12-29 21:41:09,047 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 22
2017-12-29 21:41:09,047 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#23]
2017-12-29 21:41:09,048 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 23
2017-12-29 21:41:09,048 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#24]
2017-12-29 21:41:09,048 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 24
2017-12-29 21:41:09,048 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#25]
2017-12-29 21:41:09,048 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 25
2017-12-29 21:41:09,048 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#26]
2017-12-29 21:41:09,049 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 26
2017-12-29 21:41:09,049 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#27]
2017-12-29 21:41:09,049 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 27
2017-12-29 21:41:09,049 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#28]
2017-12-29 21:41:09,049 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 28
2017-12-29 21:41:09,049 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#29]
2017-12-29 21:41:09,050 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 29
2017-12-29 21:41:09,050 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#30]
2017-12-29 21:41:09,050 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 30
2017-12-29 21:41:09,050 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#31]
2017-12-29 21:41:09,050 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 31
2017-12-29 21:41:09,050 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#32]
2017-12-29 21:41:09,050 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 32
2017-12-29 21:41:09,051 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#33]
2017-12-29 21:41:09,051 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 33
2017-12-29 21:41:09,051 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#34]
2017-12-29 21:41:09,051 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 34
2017-12-29 21:41:09,051 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#35]
2017-12-29 21:41:09,051 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 35
2017-12-29 21:41:09,051 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#36]
2017-12-29 21:41:09,052 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 36
2017-12-29 21:41:09,052 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#37]
2017-12-29 21:41:09,052 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 37
2017-12-29 21:41:09,052 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#38]
2017-12-29 21:41:09,052 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 38
2017-12-29 21:41:09,052 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#39]
2017-12-29 21:41:09,052 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 39
2017-12-29 21:41:09,053 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#40]
2017-12-29 21:41:09,054 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#1]
2017-12-29 21:41:09,055 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#1]
2017-12-29 21:41:09,056 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#2]
2017-12-29 21:41:09,056 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#2]
2017-12-29 21:41:09,056 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#3]
2017-12-29 21:41:09,056 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#3]
2017-12-29 21:41:09,056 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#4]
2017-12-29 21:41:09,056 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#4]
2017-12-29 21:41:09,056 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#5]
2017-12-29 21:41:09,056 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#5]
2017-12-29 21:41:09,057 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#6]
2017-12-29 21:41:09,057 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#6]
2017-12-29 21:41:09,057 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#7]
2017-12-29 21:41:09,057 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#7]
2017-12-29 21:41:09,057 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#8]
2017-12-29 21:41:09,057 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#8]
2017-12-29 21:41:09,057 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#9]
2017-12-29 21:41:09,057 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#9]
2017-12-29 21:41:09,057 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#10]
2017-12-29 21:41:09,057 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#10]
2017-12-29 21:41:09,058 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#11]
2017-12-29 21:41:09,058 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#11]
2017-12-29 21:41:09,058 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#12]
2017-12-29 21:41:09,058 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#12]
2017-12-29 21:41:09,058 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#13]
2017-12-29 21:41:09,058 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#13]
2017-12-29 21:41:09,058 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#14]
2017-12-29 21:41:09,058 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#14]
2017-12-29 21:41:09,059 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#15]
2017-12-29 21:41:09,059 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#15]
2017-12-29 21:41:09,059 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#16]
2017-12-29 21:41:09,059 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#16]
2017-12-29 21:41:09,059 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#17]
2017-12-29 21:41:09,059 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#17]
2017-12-29 21:41:09,059 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#18]
2017-12-29 21:41:09,059 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#18]
2017-12-29 21:41:09,059 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#19]
2017-12-29 21:41:09,059 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#19]
2017-12-29 21:41:09,060 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#20]
2017-12-29 21:41:09,060 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#20]
2017-12-29 21:41:09,060 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#21]
2017-12-29 21:41:09,060 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#21]
2017-12-29 21:41:09,060 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#22]
2017-12-29 21:41:09,060 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#22]
2017-12-29 21:41:09,060 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#23]
2017-12-29 21:41:09,060 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#23]
2017-12-29 21:41:09,060 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#24]
2017-12-29 21:41:09,060 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#24]
2017-12-29 21:41:09,061 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#25]
2017-12-29 21:41:09,061 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#25]
2017-12-29 21:41:09,061 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#26]
2017-12-29 21:41:09,061 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#26]
2017-12-29 21:41:09,061 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#27]
2017-12-29 21:41:09,061 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#27]
2017-12-29 21:41:09,061 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#28]
2017-12-29 21:41:09,061 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#28]
2017-12-29 21:41:09,061 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#29]
2017-12-29 21:41:09,062 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#29]
2017-12-29 21:41:09,062 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#30]
2017-12-29 21:41:09,062 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#30]
2017-12-29 21:41:09,062 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#31]
2017-12-29 21:41:09,062 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#31]
2017-12-29 21:41:09,062 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#32]
2017-12-29 21:41:09,062 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#32]
2017-12-29 21:41:09,062 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#33]
2017-12-29 21:41:09,062 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#33]
2017-12-29 21:41:09,062 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#34]
2017-12-29 21:41:09,062 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#34]
2017-12-29 21:41:09,062 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#35]
2017-12-29 21:41:09,063 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#35]
2017-12-29 21:41:09,063 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#36]
2017-12-29 21:41:09,063 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#36]
2017-12-29 21:41:09,063 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#37]
2017-12-29 21:41:09,063 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#37]
2017-12-29 21:41:09,063 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#38]
2017-12-29 21:41:09,063 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#38]
2017-12-29 21:41:09,063 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#39]
2017-12-29 21:41:09,063 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#39]
2017-12-29 21:41:09,063 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#40]
2017-12-29 21:41:09,063 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#40]
2017-12-29 21:41:09,065 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:41:09,066 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:41:09,068 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:41:09,076 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 40 objects
2017-12-29 21:41:09,076 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:41:09,077 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:41:09,078 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=44236742-2395-46d9-b5f7-45aae0d282c1, id=27, isActive=true, frequency=714351}
2017-12-29 21:41:09,078 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=6bbfb2ba-536f-40ff-9a18-335eaa310377, id=28, isActive=true, frequency=786313}
2017-12-29 21:41:09,078 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=a5feb4d8-db74-4cb5-af3c-f043d885ab28, id=25, isActive=true, frequency=157896}
2017-12-29 21:41:09,078 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=f88c95da-f07d-4175-a091-db970e6182a1, id=26, isActive=true, frequency=919447}
2017-12-29 21:41:09,079 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=1bec1375-9a8d-4c73-a774-1285277a4315, id=31, isActive=false, frequency=624638}
2017-12-29 21:41:09,079 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=eb668619-cafc-49c3-ae4b-4e1e6c2a37e0, id=32, isActive=false, frequency=34576}
2017-12-29 21:41:09,079 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=56a31262-df29-4744-850b-08708061482c, id=29, isActive=true, frequency=537613}
2017-12-29 21:41:09,079 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=e4284191-851b-436e-ac9c-74c5a432554d, id=30, isActive=true, frequency=307987}
2017-12-29 21:41:09,079 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=48007696-df43-49a2-a0fb-6d47e5dcc990, id=19, isActive=true, frequency=153810}
2017-12-29 21:41:09,079 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=e5917439-216c-40eb-8000-c9de3249ea80, id=20, isActive=true, frequency=269764}
2017-12-29 21:41:09,080 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=e6185158-de0b-4ec0-8c6b-a6142383f9a3, id=17, isActive=true, frequency=485727}
2017-12-29 21:41:09,080 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=292b14c3-935a-42de-8f2d-07180dd5d19d, id=18, isActive=true, frequency=740988}
2017-12-29 21:41:09,080 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=ee548871-793e-44ba-a2fb-16ef6c899c1d, id=23, isActive=true, frequency=189290}
2017-12-29 21:41:09,080 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=770379b5-e8b7-4d0f-8c80-dc9a5f85cb1e, id=24, isActive=true, frequency=874025}
2017-12-29 21:41:09,080 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=ee0a0b81-6f75-490e-905f-9577f73e6d0e, id=21, isActive=true, frequency=103043}
2017-12-29 21:41:09,080 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=a010f893-e243-4d10-952e-53eedbdf4ba5, id=22, isActive=true, frequency=468139}
2017-12-29 21:41:09,081 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=105e79cf-ce93-433b-aea8-9ea12b5c87a9, id=35, isActive=false, frequency=40853}
2017-12-29 21:41:09,081 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=a237ed6a-b454-4870-a14e-ff0c5324c6f7, id=36, isActive=false, frequency=187933}
2017-12-29 21:41:09,081 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=93a13b55-1df7-4c12-a7a8-e2be610995c9, id=33, isActive=false, frequency=887896}
2017-12-29 21:41:09,081 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=f57ae028-4cb9-4554-919b-df0bb4a51356, id=34, isActive=false, frequency=836649}
2017-12-29 21:41:09,081 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=f7515c67-1d95-4ad9-ac2b-8868ed34f17e, id=39, isActive=false, frequency=529417}
2017-12-29 21:41:09,081 +0100 [main] DEBUG (EntityPrinter.java:106) - More......
2017-12-29 21:41:09,083 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:41:09,083 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:41:09,086 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_, address0_.city as city2_0_, address0_.country as country3_0_, address0_.mailBox as mailBox4_0_, address0_.nr as nr5_0_, address0_.postalCode as postalCo6_0_, address0_.street as street7_0_ from address address0_ where address0_.id not in  (select person1_.addressId from Person person1_)
2017-12-29 21:41:09,127 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 0
2017-12-29 21:41:09,127 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Address#31]
2017-12-29 21:41:09,127 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 1
2017-12-29 21:41:09,127 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Address#32]
2017-12-29 21:41:09,127 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 2
2017-12-29 21:41:09,128 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Address#33]
2017-12-29 21:41:09,128 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 3
2017-12-29 21:41:09,128 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Address#34]
2017-12-29 21:41:09,128 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 4
2017-12-29 21:41:09,128 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Address#35]
2017-12-29 21:41:09,128 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 5
2017-12-29 21:41:09,128 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Address#36]
2017-12-29 21:41:09,129 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 6
2017-12-29 21:41:09,129 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Address#37]
2017-12-29 21:41:09,129 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 7
2017-12-29 21:41:09,129 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Address#38]
2017-12-29 21:41:09,129 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 8
2017-12-29 21:41:09,129 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Address#39]
2017-12-29 21:41:09,130 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 9
2017-12-29 21:41:09,130 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Address#40]
2017-12-29 21:41:09,130 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#31]
2017-12-29 21:41:09,130 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#31]
2017-12-29 21:41:09,130 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#32]
2017-12-29 21:41:09,130 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#32]
2017-12-29 21:41:09,130 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#33]
2017-12-29 21:41:09,130 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#33]
2017-12-29 21:41:09,130 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#34]
2017-12-29 21:41:09,131 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#34]
2017-12-29 21:41:09,131 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#35]
2017-12-29 21:41:09,131 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#35]
2017-12-29 21:41:09,131 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#36]
2017-12-29 21:41:09,131 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#36]
2017-12-29 21:41:09,131 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#37]
2017-12-29 21:41:09,131 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#37]
2017-12-29 21:41:09,131 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#38]
2017-12-29 21:41:09,131 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#38]
2017-12-29 21:41:09,131 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#39]
2017-12-29 21:41:09,132 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#39]
2017-12-29 21:41:09,132 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#40]
2017-12-29 21:41:09,132 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#40]
2017-12-29 21:41:09,132 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:41:09,133 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:41:09,134 +0100 [main] DEBUG (QueryTranslatorImpl.java:282) - parse() - HQL: FROM model.entities.Person
2017-12-29 21:41:09,134 +0100 [main] DEBUG (ErrorCounter.java:95) - throwQueryException() : no errors
2017-12-29 21:41:09,134 +0100 [main] DEBUG (QueryTranslatorImpl.java:305) - --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'FROM'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[IDENT] Node: 'model'
                |  \-[IDENT] Node: 'entities'
                \-[IDENT] Node: 'Person'

2017-12-29 21:41:09,134 +0100 [main] DEBUG (HqlSqlBaseWalker.java:124) - select << begin [level=1, statement=select]
2017-12-29 21:41:09,135 +0100 [main] DEBUG (FromElement.java:147) - FromClause{level=1} : model.entities.Person (<no alias>) -> person0_
2017-12-29 21:41:09,135 +0100 [main] DEBUG (HqlSqlBaseWalker.java:128) - select : finishing up [level=1, statement=select]
2017-12-29 21:41:09,135 +0100 [main] DEBUG (HqlSqlWalker.java:747) - processQuery() :  ( SELECT ( FromClause{level=1} Person person0_ ) )
2017-12-29 21:41:09,135 +0100 [main] DEBUG (HqlSqlWalker.java:1023) - Derived SELECT clause created.
2017-12-29 21:41:09,135 +0100 [main] DEBUG (JoinProcessor.java:192) - Using FROM fragment [Person person0_]
2017-12-29 21:41:09,135 +0100 [main] DEBUG (HqlSqlBaseWalker.java:132) - select >> end [level=1, statement=select]
2017-12-29 21:41:09,136 +0100 [main] DEBUG (QueryTranslatorImpl.java:269) - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Person)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'person0_.id as id1_1_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Person,tableAlias=person0_,origin=null,columns={,className=model.entities.Person}}}
    |  \-[SQL_TOKEN] SqlFragment: 'person0_.addressId as addressI5_1_, person0_.endOfContract as endOfCon2_1_, person0_.firstname as firstnam3_1_, person0_.lastname as lastname4_1_, person0_.remoteId as remoteId6_1_'
    \-[FROM] FromClause: 'FROM' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[person0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'Person person0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Person,tableAlias=person0_,origin=null,columns={,className=model.entities.Person}}

2017-12-29 21:41:09,136 +0100 [main] DEBUG (ErrorCounter.java:95) - throwQueryException() : no errors
2017-12-29 21:41:09,136 +0100 [main] DEBUG (QueryTranslatorImpl.java:251) - HQL: FROM model.entities.Person
2017-12-29 21:41:09,136 +0100 [main] DEBUG (QueryTranslatorImpl.java:252) - SQL: select person0_.id as id1_1_, person0_.addressId as addressI5_1_, person0_.endOfContract as endOfCon2_1_, person0_.firstname as firstnam3_1_, person0_.lastname as lastname4_1_, person0_.remoteId as remoteId6_1_ from Person person0_
2017-12-29 21:41:09,136 +0100 [main] DEBUG (ErrorCounter.java:95) - throwQueryException() : no errors
2017-12-29 21:41:09,136 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select person0_.id as id1_1_, person0_.addressId as addressI5_1_, person0_.endOfContract as endOfCon2_1_, person0_.firstname as firstnam3_1_, person0_.lastname as lastname4_1_, person0_.remoteId as remoteId6_1_ from Person person0_
2017-12-29 21:41:09,137 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 0
2017-12-29 21:41:09,138 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#1]
2017-12-29 21:41:09,139 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 1
2017-12-29 21:41:09,139 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#2]
2017-12-29 21:41:09,140 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 2
2017-12-29 21:41:09,140 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#3]
2017-12-29 21:41:09,140 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 3
2017-12-29 21:41:09,141 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#4]
2017-12-29 21:41:09,141 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 4
2017-12-29 21:41:09,141 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#5]
2017-12-29 21:41:09,141 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 5
2017-12-29 21:41:09,141 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#6]
2017-12-29 21:41:09,141 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 6
2017-12-29 21:41:09,142 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#7]
2017-12-29 21:41:09,142 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 7
2017-12-29 21:41:09,142 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#8]
2017-12-29 21:41:09,142 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 8
2017-12-29 21:41:09,142 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#9]
2017-12-29 21:41:09,142 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 9
2017-12-29 21:41:09,143 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#10]
2017-12-29 21:41:09,143 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 10
2017-12-29 21:41:09,143 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#11]
2017-12-29 21:41:09,143 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 11
2017-12-29 21:41:09,143 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#12]
2017-12-29 21:41:09,144 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 12
2017-12-29 21:41:09,144 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#13]
2017-12-29 21:41:09,144 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 13
2017-12-29 21:41:09,144 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#14]
2017-12-29 21:41:09,144 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 14
2017-12-29 21:41:09,144 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#15]
2017-12-29 21:41:09,145 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 15
2017-12-29 21:41:09,146 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#16]
2017-12-29 21:41:09,146 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 16
2017-12-29 21:41:09,146 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#17]
2017-12-29 21:41:09,146 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 17
2017-12-29 21:41:09,146 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#18]
2017-12-29 21:41:09,147 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 18
2017-12-29 21:41:09,147 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#19]
2017-12-29 21:41:09,148 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 19
2017-12-29 21:41:09,148 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#20]
2017-12-29 21:41:09,148 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 20
2017-12-29 21:41:09,149 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#21]
2017-12-29 21:41:09,149 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 21
2017-12-29 21:41:09,150 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#22]
2017-12-29 21:41:09,150 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 22
2017-12-29 21:41:09,150 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#23]
2017-12-29 21:41:09,151 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 23
2017-12-29 21:41:09,151 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#24]
2017-12-29 21:41:09,151 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 24
2017-12-29 21:41:09,151 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#25]
2017-12-29 21:41:09,151 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 25
2017-12-29 21:41:09,152 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#26]
2017-12-29 21:41:09,152 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 26
2017-12-29 21:41:09,152 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#27]
2017-12-29 21:41:09,152 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 27
2017-12-29 21:41:09,152 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#28]
2017-12-29 21:41:09,152 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 28
2017-12-29 21:41:09,153 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#29]
2017-12-29 21:41:09,153 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 29
2017-12-29 21:41:09,153 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#30]
2017-12-29 21:41:09,153 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#1]
2017-12-29 21:41:09,155 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:41:09,158 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,159 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,160 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#1]
2017-12-29 21:41:09,160 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#1]
2017-12-29 21:41:09,160 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,161 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#1
2017-12-29 21:41:09,161 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:41:09,162 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,162 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,162 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#1]
2017-12-29 21:41:09,163 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#1]
2017-12-29 21:41:09,163 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,164 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#1
2017-12-29 21:41:09,164 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#1]
2017-12-29 21:41:09,164 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#2]
2017-12-29 21:41:09,164 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:41:09,165 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,165 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,166 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#2]
2017-12-29 21:41:09,166 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#2]
2017-12-29 21:41:09,166 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,166 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#2
2017-12-29 21:41:09,166 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:41:09,167 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,167 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,168 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#2]
2017-12-29 21:41:09,168 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#2]
2017-12-29 21:41:09,168 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,168 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#2
2017-12-29 21:41:09,168 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#2]
2017-12-29 21:41:09,168 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#3]
2017-12-29 21:41:09,168 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:41:09,169 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,169 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,169 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#3]
2017-12-29 21:41:09,169 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#3]
2017-12-29 21:41:09,170 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,170 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#3
2017-12-29 21:41:09,170 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:41:09,170 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,171 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,171 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#3]
2017-12-29 21:41:09,171 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#3]
2017-12-29 21:41:09,171 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,171 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#3
2017-12-29 21:41:09,171 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#3]
2017-12-29 21:41:09,171 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#4]
2017-12-29 21:41:09,172 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:41:09,172 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,173 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,173 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#4]
2017-12-29 21:41:09,173 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#4]
2017-12-29 21:41:09,173 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,174 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#4
2017-12-29 21:41:09,174 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:41:09,175 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,175 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,176 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#4]
2017-12-29 21:41:09,176 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#4]
2017-12-29 21:41:09,176 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,176 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#4
2017-12-29 21:41:09,176 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#4]
2017-12-29 21:41:09,176 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#5]
2017-12-29 21:41:09,176 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:41:09,178 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,178 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,179 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#5]
2017-12-29 21:41:09,179 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#5]
2017-12-29 21:41:09,179 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,179 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#5
2017-12-29 21:41:09,179 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:41:09,180 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,180 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,181 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#5]
2017-12-29 21:41:09,181 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#5]
2017-12-29 21:41:09,181 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,181 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#5
2017-12-29 21:41:09,181 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#5]
2017-12-29 21:41:09,181 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#6]
2017-12-29 21:41:09,182 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:41:09,182 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,183 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,183 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#6]
2017-12-29 21:41:09,183 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#6]
2017-12-29 21:41:09,183 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,184 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#6
2017-12-29 21:41:09,184 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:41:09,184 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,185 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,185 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#6]
2017-12-29 21:41:09,185 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#6]
2017-12-29 21:41:09,185 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,185 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#6
2017-12-29 21:41:09,185 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#6]
2017-12-29 21:41:09,185 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#7]
2017-12-29 21:41:09,185 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:41:09,186 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,186 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,187 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#7]
2017-12-29 21:41:09,187 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#7]
2017-12-29 21:41:09,187 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,187 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#7
2017-12-29 21:41:09,188 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:41:09,188 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,188 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,189 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#7]
2017-12-29 21:41:09,189 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#7]
2017-12-29 21:41:09,189 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,189 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#7
2017-12-29 21:41:09,190 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#7]
2017-12-29 21:41:09,190 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#8]
2017-12-29 21:41:09,190 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:41:09,190 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,191 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,191 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#8]
2017-12-29 21:41:09,191 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#8]
2017-12-29 21:41:09,191 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,191 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#8
2017-12-29 21:41:09,191 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:41:09,192 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,192 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,193 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#8]
2017-12-29 21:41:09,193 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#8]
2017-12-29 21:41:09,193 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,193 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#8
2017-12-29 21:41:09,193 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#8]
2017-12-29 21:41:09,193 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#9]
2017-12-29 21:41:09,193 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:41:09,194 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,194 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,194 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#9]
2017-12-29 21:41:09,194 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#9]
2017-12-29 21:41:09,195 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,195 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#9
2017-12-29 21:41:09,195 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:41:09,195 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,195 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,196 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#9]
2017-12-29 21:41:09,196 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#9]
2017-12-29 21:41:09,196 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,196 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#9
2017-12-29 21:41:09,196 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#9]
2017-12-29 21:41:09,196 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#10]
2017-12-29 21:41:09,196 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:41:09,197 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,197 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,198 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#10]
2017-12-29 21:41:09,198 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#10]
2017-12-29 21:41:09,198 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,198 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#10
2017-12-29 21:41:09,198 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:41:09,199 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,199 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,200 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#10]
2017-12-29 21:41:09,200 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#10]
2017-12-29 21:41:09,200 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,200 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#10
2017-12-29 21:41:09,200 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#10]
2017-12-29 21:41:09,200 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#11]
2017-12-29 21:41:09,201 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:41:09,201 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,202 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,202 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#11]
2017-12-29 21:41:09,202 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#11]
2017-12-29 21:41:09,202 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,202 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#11
2017-12-29 21:41:09,203 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:41:09,203 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,204 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,204 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#11]
2017-12-29 21:41:09,204 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#11]
2017-12-29 21:41:09,204 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,204 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#11
2017-12-29 21:41:09,205 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#11]
2017-12-29 21:41:09,205 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#12]
2017-12-29 21:41:09,205 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:41:09,206 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,206 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,206 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#12]
2017-12-29 21:41:09,206 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#12]
2017-12-29 21:41:09,206 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,207 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#12
2017-12-29 21:41:09,207 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:41:09,207 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,208 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,208 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#12]
2017-12-29 21:41:09,208 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#12]
2017-12-29 21:41:09,208 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,208 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#12
2017-12-29 21:41:09,208 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#12]
2017-12-29 21:41:09,208 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#13]
2017-12-29 21:41:09,209 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:41:09,209 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,210 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,210 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#13]
2017-12-29 21:41:09,210 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#13]
2017-12-29 21:41:09,210 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,210 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#13
2017-12-29 21:41:09,210 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:41:09,211 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,211 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,211 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#13]
2017-12-29 21:41:09,212 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#13]
2017-12-29 21:41:09,212 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,212 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#13
2017-12-29 21:41:09,212 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#13]
2017-12-29 21:41:09,212 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#14]
2017-12-29 21:41:09,212 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:41:09,213 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,213 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,214 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#14]
2017-12-29 21:41:09,214 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#14]
2017-12-29 21:41:09,214 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,214 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#14
2017-12-29 21:41:09,214 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:41:09,215 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,215 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,216 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#14]
2017-12-29 21:41:09,216 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#14]
2017-12-29 21:41:09,216 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,216 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#14
2017-12-29 21:41:09,216 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#14]
2017-12-29 21:41:09,216 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#15]
2017-12-29 21:41:09,216 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:41:09,217 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,217 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,218 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#15]
2017-12-29 21:41:09,218 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#15]
2017-12-29 21:41:09,218 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,218 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#15
2017-12-29 21:41:09,218 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:41:09,219 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,219 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,220 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#15]
2017-12-29 21:41:09,220 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#15]
2017-12-29 21:41:09,220 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,220 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#15
2017-12-29 21:41:09,220 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#15]
2017-12-29 21:41:09,220 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#16]
2017-12-29 21:41:09,221 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:41:09,222 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,222 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,222 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#16]
2017-12-29 21:41:09,222 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#16]
2017-12-29 21:41:09,223 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,223 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#16
2017-12-29 21:41:09,223 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:41:09,224 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,224 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,224 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#16]
2017-12-29 21:41:09,224 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#16]
2017-12-29 21:41:09,224 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,224 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#16
2017-12-29 21:41:09,225 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#16]
2017-12-29 21:41:09,225 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#17]
2017-12-29 21:41:09,225 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:41:09,226 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,226 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,226 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#17]
2017-12-29 21:41:09,226 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#17]
2017-12-29 21:41:09,226 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,226 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#17
2017-12-29 21:41:09,227 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:41:09,227 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,228 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,228 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#17]
2017-12-29 21:41:09,228 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#17]
2017-12-29 21:41:09,228 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,228 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#17
2017-12-29 21:41:09,229 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#17]
2017-12-29 21:41:09,229 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#18]
2017-12-29 21:41:09,229 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:41:09,230 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,230 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,230 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#18]
2017-12-29 21:41:09,230 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#18]
2017-12-29 21:41:09,231 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,231 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#18
2017-12-29 21:41:09,231 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:41:09,232 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,232 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,232 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#18]
2017-12-29 21:41:09,232 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#18]
2017-12-29 21:41:09,233 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,233 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#18
2017-12-29 21:41:09,233 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#18]
2017-12-29 21:41:09,233 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#19]
2017-12-29 21:41:09,233 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:41:09,234 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,234 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,234 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#19]
2017-12-29 21:41:09,235 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#19]
2017-12-29 21:41:09,235 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,235 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#19
2017-12-29 21:41:09,235 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:41:09,236 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,236 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,236 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#19]
2017-12-29 21:41:09,237 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#19]
2017-12-29 21:41:09,237 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,237 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#19
2017-12-29 21:41:09,237 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#19]
2017-12-29 21:41:09,237 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#20]
2017-12-29 21:41:09,237 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:41:09,238 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,238 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,239 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#20]
2017-12-29 21:41:09,239 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#20]
2017-12-29 21:41:09,239 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,239 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#20
2017-12-29 21:41:09,239 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:41:09,240 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,240 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,240 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#20]
2017-12-29 21:41:09,241 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#20]
2017-12-29 21:41:09,241 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,241 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#20
2017-12-29 21:41:09,241 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#20]
2017-12-29 21:41:09,241 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#21]
2017-12-29 21:41:09,241 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:41:09,242 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,242 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,242 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#21]
2017-12-29 21:41:09,243 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#21]
2017-12-29 21:41:09,243 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,243 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#21
2017-12-29 21:41:09,243 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:41:09,244 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,244 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,244 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#21]
2017-12-29 21:41:09,244 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#21]
2017-12-29 21:41:09,244 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,244 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#21
2017-12-29 21:41:09,244 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#21]
2017-12-29 21:41:09,245 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#22]
2017-12-29 21:41:09,245 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:41:09,245 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,245 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,246 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#22]
2017-12-29 21:41:09,246 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#22]
2017-12-29 21:41:09,246 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,246 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#22
2017-12-29 21:41:09,246 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:41:09,247 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,247 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,247 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#22]
2017-12-29 21:41:09,248 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#22]
2017-12-29 21:41:09,248 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,248 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#22
2017-12-29 21:41:09,248 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#22]
2017-12-29 21:41:09,248 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#23]
2017-12-29 21:41:09,248 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:41:09,249 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,249 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,250 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#23]
2017-12-29 21:41:09,250 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#23]
2017-12-29 21:41:09,250 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,250 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#23
2017-12-29 21:41:09,250 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:41:09,253 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,254 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,254 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#23]
2017-12-29 21:41:09,254 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#23]
2017-12-29 21:41:09,254 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,254 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#23
2017-12-29 21:41:09,254 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#23]
2017-12-29 21:41:09,254 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#24]
2017-12-29 21:41:09,255 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:41:09,255 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,256 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,256 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#24]
2017-12-29 21:41:09,256 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#24]
2017-12-29 21:41:09,256 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,256 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#24
2017-12-29 21:41:09,256 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:41:09,260 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,260 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,262 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#24]
2017-12-29 21:41:09,262 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#24]
2017-12-29 21:41:09,262 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,263 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#24
2017-12-29 21:41:09,263 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#24]
2017-12-29 21:41:09,263 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#25]
2017-12-29 21:41:09,263 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:41:09,264 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,264 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,264 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#25]
2017-12-29 21:41:09,264 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#25]
2017-12-29 21:41:09,264 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,265 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#25
2017-12-29 21:41:09,265 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:41:09,266 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,266 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,266 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#25]
2017-12-29 21:41:09,266 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#25]
2017-12-29 21:41:09,267 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,267 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#25
2017-12-29 21:41:09,267 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#25]
2017-12-29 21:41:09,267 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#26]
2017-12-29 21:41:09,267 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:41:09,268 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,268 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,268 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#26]
2017-12-29 21:41:09,269 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#26]
2017-12-29 21:41:09,269 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,269 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#26
2017-12-29 21:41:09,269 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:41:09,270 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,270 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,270 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#26]
2017-12-29 21:41:09,271 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#26]
2017-12-29 21:41:09,271 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,271 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#26
2017-12-29 21:41:09,272 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#26]
2017-12-29 21:41:09,272 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#27]
2017-12-29 21:41:09,272 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:41:09,273 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,273 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,279 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#27]
2017-12-29 21:41:09,280 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#27]
2017-12-29 21:41:09,280 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,280 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#27
2017-12-29 21:41:09,280 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:41:09,281 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,281 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,282 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#27]
2017-12-29 21:41:09,282 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#27]
2017-12-29 21:41:09,282 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,282 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#27
2017-12-29 21:41:09,282 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#27]
2017-12-29 21:41:09,282 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#28]
2017-12-29 21:41:09,283 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:41:09,283 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,284 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,284 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#28]
2017-12-29 21:41:09,284 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#28]
2017-12-29 21:41:09,285 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,285 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#28
2017-12-29 21:41:09,285 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:41:09,286 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,286 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,287 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#28]
2017-12-29 21:41:09,287 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#28]
2017-12-29 21:41:09,287 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,287 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#28
2017-12-29 21:41:09,288 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#28]
2017-12-29 21:41:09,288 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#29]
2017-12-29 21:41:09,288 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:41:09,289 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,289 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,291 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#29]
2017-12-29 21:41:09,292 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#29]
2017-12-29 21:41:09,292 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,292 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#29
2017-12-29 21:41:09,292 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:41:09,293 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,293 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,294 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#29]
2017-12-29 21:41:09,294 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#29]
2017-12-29 21:41:09,294 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,295 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#29
2017-12-29 21:41:09,295 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#29]
2017-12-29 21:41:09,295 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#30]
2017-12-29 21:41:09,295 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:41:09,296 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,297 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,299 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#30]
2017-12-29 21:41:09,299 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#30]
2017-12-29 21:41:09,300 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,300 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#30
2017-12-29 21:41:09,300 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:41:09,302 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:41:09,302 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:41:09,302 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#30]
2017-12-29 21:41:09,303 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#30]
2017-12-29 21:41:09,303 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:41:09,303 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#30
2017-12-29 21:41:09,303 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#30]
2017-12-29 21:41:09,303 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:41:09,304 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:41:09,308 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:41:09,310 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 90 objects
2017-12-29 21:41:09,310 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:41:09,310 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:41:09,310 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=29, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=29}
2017-12-29 21:41:09,310 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=30, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=30}
2017-12-29 21:41:09,311 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=27, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=27}
2017-12-29 21:41:09,311 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=28, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=28}
2017-12-29 21:41:09,311 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Richard, address=model.entities.Address#30, id=30, remote=model.entities.Remote#30, endOfContract=2017-12-29 00:00:00.0, lastname=Wheeler}
2017-12-29 21:41:09,311 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Sam, address=model.entities.Address#23, id=23, remote=model.entities.Remote#23, endOfContract=2017-12-29 00:00:00.0, lastname=Jackson}
2017-12-29 21:41:09,311 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Marty, address=model.entities.Address#22, id=22, remote=model.entities.Remote#22, endOfContract=2017-12-29 00:00:00.0, lastname=Franco}
2017-12-29 21:41:09,311 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Thomas, address=model.entities.Address#25, id=25, remote=model.entities.Remote#25, endOfContract=2017-12-29 00:00:00.0, lastname=Dotson}
2017-12-29 21:41:09,312 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Jeffrey, address=model.entities.Address#24, id=24, remote=model.entities.Remote#24, endOfContract=2017-12-29 00:00:00.0, lastname=Suarez}
2017-12-29 21:41:09,312 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Chuck, address=model.entities.Address#27, id=27, remote=model.entities.Remote#27, endOfContract=2017-12-29 00:00:00.0, lastname=Castillo}
2017-12-29 21:41:09,312 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Mickey, address=model.entities.Address#26, id=26, remote=model.entities.Remote#26, endOfContract=2017-12-29 00:00:00.0, lastname=Cruz}
2017-12-29 21:41:09,312 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Michael, address=model.entities.Address#29, id=29, remote=model.entities.Remote#29, endOfContract=2017-12-29 00:00:00.0, lastname=Gross}
2017-12-29 21:41:09,312 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Sierra, address=model.entities.Address#28, id=28, remote=model.entities.Remote#28, endOfContract=2017-12-29 00:00:00.0, lastname=Schneider}
2017-12-29 21:41:09,312 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Janet, address=model.entities.Address#15, id=15, remote=model.entities.Remote#15, endOfContract=2017-12-29 00:00:00.0, lastname=Abbott}
2017-12-29 21:41:09,312 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=George, address=model.entities.Address#14, id=14, remote=model.entities.Remote#14, endOfContract=2017-12-29 00:00:00.0, lastname=Suarez}
2017-12-29 21:41:09,312 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Shane, address=model.entities.Address#17, id=17, remote=model.entities.Remote#17, endOfContract=2017-12-29 00:00:00.0, lastname=Heath}
2017-12-29 21:41:09,313 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Steven, address=model.entities.Address#16, id=16, remote=model.entities.Remote#16, endOfContract=2017-12-29 00:00:00.0, lastname=Marshall}
2017-12-29 21:41:09,313 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Kaitlyn, address=model.entities.Address#19, id=19, remote=model.entities.Remote#19, endOfContract=2017-12-29 00:00:00.0, lastname=Wilder}
2017-12-29 21:41:09,313 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Unborn, address=model.entities.Address#18, id=18, remote=model.entities.Remote#18, endOfContract=2017-12-29 00:00:00.0, lastname=Vega}
2017-12-29 21:41:09,313 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Alisha, address=model.entities.Address#21, id=21, remote=model.entities.Remote#21, endOfContract=2017-12-29 00:00:00.0, lastname=Dunn}
2017-12-29 21:41:09,313 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Donald, address=model.entities.Address#20, id=20, remote=model.entities.Remote#20, endOfContract=2017-12-29 00:00:00.0, lastname=Morgan}
2017-12-29 21:41:09,313 +0100 [main] DEBUG (EntityPrinter.java:106) - More......
2017-12-29 21:41:09,313 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:41:09,313 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:43:03,366 +0100 [main] DEBUG (HibernatePersistenceProvider.java:38) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2017-12-29 21:43:03,431 +0100 [main] DEBUG (HibernatePersistenceProvider.java:98) - Located and parsed 1 persistence units; checking each
2017-12-29 21:43:03,431 +0100 [main] DEBUG (HibernatePersistenceProvider.java:106) - Checking persistence-unit [name=Afstandsbediening, explicit-provider=null] against incoming persistence unit name [Afstandsbediening]
2017-12-29 21:43:03,432 +0100 [main] DEBUG (ProviderChecker.java:96) - No PersistenceProvider explicitly requested, assuming Hibernate
2017-12-29 21:43:03,437 +0100 [main] DEBUG (LogHelper.java:102) - PersistenceUnitInfo [
	name: Afstandsbediening
	persistence provider classname: null
	classloader: null
	excludeUnlistedClasses: false
	JTA datasource: null
	Non JTA datasource: null
	Transaction type: RESOURCE_LOCAL
	PU root URL: file:/C:/Users/BenJolien/git/2018-Januari/8-Afstandsbediening/target/classes/
	Shared Cache Mode: null
	Validation Mode: null
	Jar files URLs []
	Managed classes names [
		model.entities.Remote
		model.entities.Person
		model.entities.Address]
	Mapping files names []
	Properties [
		javax.persistence.jdbc.driver: com.mysql.jdbc.Driver
		javax.persistence.jdbc.password: userDB
		javax.persistence.jdbc.url: jdbc:mysql://localhost:3306/DbRemote
		javax.persistence.jdbc.user: userDB]
2017-12-29 21:43:03,443 +0100 [main] DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
2017-12-29 21:43:03,444 +0100 [main] DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
2017-12-29 21:43:03,451 +0100 [main] DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2017-12-29 21:43:03,451 +0100 [main] DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.jpa.event.spi.JpaIntegrator].
2017-12-29 21:43:03,495 +0100 [main] INFO  (Version.java:45) - HHH000412: Hibernate Core {5.2.12.Final}
2017-12-29 21:43:03,496 +0100 [main] INFO  (Environment.java:213) - HHH000206: hibernate.properties not found
2017-12-29 21:43:03,503 +0100 [main] DEBUG (ServiceBinding.java:68) - Overriding existing service binding [org.hibernate.secure.spi.JaccService]
2017-12-29 21:43:03,518 +0100 [main] DEBUG (RegionFactoryInitiator.java:75) - Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
2017-12-29 21:43:03,522 +0100 [main] INFO  (JavaReflectionManager.java:66) - HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
2017-12-29 21:43:03,568 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration boolean -> org.hibernate.type.BooleanType@40e6dfe1
2017-12-29 21:43:03,568 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration boolean -> org.hibernate.type.BooleanType@40e6dfe1
2017-12-29 21:43:03,569 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@40e6dfe1
2017-12-29 21:43:03,570 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@1f1c7bf6
2017-12-29 21:43:03,571 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration true_false -> org.hibernate.type.TrueFalseType@55ca8de8
2017-12-29 21:43:03,572 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration yes_no -> org.hibernate.type.YesNoType@240237d2
2017-12-29 21:43:03,574 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration byte -> org.hibernate.type.ByteType@548a102f
2017-12-29 21:43:03,575 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration byte -> org.hibernate.type.ByteType@548a102f
2017-12-29 21:43:03,575 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@548a102f
2017-12-29 21:43:03,576 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration character -> org.hibernate.type.CharacterType@1d548a08
2017-12-29 21:43:03,577 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration char -> org.hibernate.type.CharacterType@1d548a08
2017-12-29 21:43:03,577 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@1d548a08
2017-12-29 21:43:03,578 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration short -> org.hibernate.type.ShortType@2d9d4f9d
2017-12-29 21:43:03,579 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration short -> org.hibernate.type.ShortType@2d9d4f9d
2017-12-29 21:43:03,580 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Short -> org.hibernate.type.ShortType@2d9d4f9d
2017-12-29 21:43:03,581 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration integer -> org.hibernate.type.IntegerType@358c99f5
2017-12-29 21:43:03,581 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration int -> org.hibernate.type.IntegerType@358c99f5
2017-12-29 21:43:03,582 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@358c99f5
2017-12-29 21:43:03,583 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration long -> org.hibernate.type.LongType@6b419da
2017-12-29 21:43:03,583 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration long -> org.hibernate.type.LongType@6b419da
2017-12-29 21:43:03,583 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Long -> org.hibernate.type.LongType@6b419da
2017-12-29 21:43:03,585 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration float -> org.hibernate.type.FloatType@6646153
2017-12-29 21:43:03,585 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration float -> org.hibernate.type.FloatType@6646153
2017-12-29 21:43:03,585 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Float -> org.hibernate.type.FloatType@6646153
2017-12-29 21:43:03,586 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration double -> org.hibernate.type.DoubleType@f2f2cc1
2017-12-29 21:43:03,586 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration double -> org.hibernate.type.DoubleType@f2f2cc1
2017-12-29 21:43:03,587 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@f2f2cc1
2017-12-29 21:43:03,588 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@13acb0d1
2017-12-29 21:43:03,588 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@13acb0d1
2017-12-29 21:43:03,589 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration big_integer -> org.hibernate.type.BigIntegerType@6107227e
2017-12-29 21:43:03,589 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@6107227e
2017-12-29 21:43:03,590 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration string -> org.hibernate.type.StringType@45dd4eda
2017-12-29 21:43:03,590 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.String -> org.hibernate.type.StringType@45dd4eda
2017-12-29 21:43:03,590 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration nstring -> org.hibernate.type.StringNVarcharType@19d37183
2017-12-29 21:43:03,591 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@a4102b8
2017-12-29 21:43:03,592 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration url -> org.hibernate.type.UrlType@8909f18
2017-12-29 21:43:03,592 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.net.URL -> org.hibernate.type.UrlType@8909f18
2017-12-29 21:43:03,593 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration Duration -> org.hibernate.type.DurationType@6e75aa0d
2017-12-29 21:43:03,593 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.Duration -> org.hibernate.type.DurationType@6e75aa0d
2017-12-29 21:43:03,604 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration Instant -> org.hibernate.type.InstantType@2133814f
2017-12-29 21:43:03,604 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.Instant -> org.hibernate.type.InstantType@2133814f
2017-12-29 21:43:03,605 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@7d3a22a9
2017-12-29 21:43:03,605 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@7d3a22a9
2017-12-29 21:43:03,606 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration LocalDate -> org.hibernate.type.LocalDateType@7f1302d6
2017-12-29 21:43:03,606 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@7f1302d6
2017-12-29 21:43:03,607 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@5bfa9431
2017-12-29 21:43:03,607 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@5bfa9431
2017-12-29 21:43:03,608 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@78e94dcf
2017-12-29 21:43:03,608 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@78e94dcf
2017-12-29 21:43:03,609 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@60dcc9fe
2017-12-29 21:43:03,609 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@60dcc9fe
2017-12-29 21:43:03,611 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@27ae2fd0
2017-12-29 21:43:03,612 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@27ae2fd0
2017-12-29 21:43:03,613 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration date -> org.hibernate.type.DateType@15b204a1
2017-12-29 21:43:03,613 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.sql.Date -> org.hibernate.type.DateType@15b204a1
2017-12-29 21:43:03,614 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration time -> org.hibernate.type.TimeType@2ddc8ecb
2017-12-29 21:43:03,614 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.sql.Time -> org.hibernate.type.TimeType@2ddc8ecb
2017-12-29 21:43:03,614 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration timestamp -> org.hibernate.type.TimestampType@309e345f
2017-12-29 21:43:03,615 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@309e345f
2017-12-29 21:43:03,615 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.Date -> org.hibernate.type.TimestampType@309e345f
2017-12-29 21:43:03,616 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@4445629
2017-12-29 21:43:03,617 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration calendar -> org.hibernate.type.CalendarType@63a65a25
2017-12-29 21:43:03,617 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@63a65a25
2017-12-29 21:43:03,617 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@63a65a25
2017-12-29 21:43:03,618 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@6dbb137d
2017-12-29 21:43:03,618 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration locale -> org.hibernate.type.LocaleType@4e91d63f
2017-12-29 21:43:03,619 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@4e91d63f
2017-12-29 21:43:03,619 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration currency -> org.hibernate.type.CurrencyType@419c5f1a
2017-12-29 21:43:03,619 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@419c5f1a
2017-12-29 21:43:03,620 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration timezone -> org.hibernate.type.TimeZoneType@6193932a
2017-12-29 21:43:03,620 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@6193932a
2017-12-29 21:43:03,620 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration class -> org.hibernate.type.ClassType@1ffe63b9
2017-12-29 21:43:03,620 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Class -> org.hibernate.type.ClassType@1ffe63b9
2017-12-29 21:43:03,621 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@6d2a209c
2017-12-29 21:43:03,621 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@6d2a209c
2017-12-29 21:43:03,622 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@4313f5bc
2017-12-29 21:43:03,622 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration binary -> org.hibernate.type.BinaryType@670002
2017-12-29 21:43:03,622 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration byte[] -> org.hibernate.type.BinaryType@670002
2017-12-29 21:43:03,622 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration [B -> org.hibernate.type.BinaryType@670002
2017-12-29 21:43:03,623 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@96def03
2017-12-29 21:43:03,623 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@96def03
2017-12-29 21:43:03,623 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@96def03
2017-12-29 21:43:03,624 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration row_version -> org.hibernate.type.RowVersionType@4b5a5ed1
2017-12-29 21:43:03,625 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration image -> org.hibernate.type.ImageType@60d8c9b7
2017-12-29 21:43:03,625 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration characters -> org.hibernate.type.CharArrayType@433d61fb
2017-12-29 21:43:03,625 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration char[] -> org.hibernate.type.CharArrayType@433d61fb
2017-12-29 21:43:03,625 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration [C -> org.hibernate.type.CharArrayType@433d61fb
2017-12-29 21:43:03,626 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@1534f01b
2017-12-29 21:43:03,626 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@1534f01b
2017-12-29 21:43:03,626 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@1534f01b
2017-12-29 21:43:03,626 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration text -> org.hibernate.type.TextType@4690b489
2017-12-29 21:43:03,627 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration ntext -> org.hibernate.type.NTextType@460d0a57
2017-12-29 21:43:03,629 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration blob -> org.hibernate.type.BlobType@49b0b76
2017-12-29 21:43:03,629 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@49b0b76
2017-12-29 21:43:03,629 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@5ae50ce6
2017-12-29 21:43:03,631 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration clob -> org.hibernate.type.ClobType@29626d54
2017-12-29 21:43:03,631 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@29626d54
2017-12-29 21:43:03,633 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration nclob -> org.hibernate.type.NClobType@9353778
2017-12-29 21:43:03,633 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@9353778
2017-12-29 21:43:03,633 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@1700915
2017-12-29 21:43:03,633 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@30ee2816
2017-12-29 21:43:03,634 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration serializable -> org.hibernate.type.SerializableType@5e82df6a
2017-12-29 21:43:03,636 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration object -> org.hibernate.type.ObjectType@3d74bf60
2017-12-29 21:43:03,636 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@3d74bf60
2017-12-29 21:43:03,636 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@2145b572
2017-12-29 21:43:03,636 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@39529185
2017-12-29 21:43:03,636 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@72f926e6
2017-12-29 21:43:03,637 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@3daa422a
2017-12-29 21:43:03,637 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@31c88ec8
2017-12-29 21:43:03,637 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@1cbbffcd
2017-12-29 21:43:03,637 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@27ce24aa
2017-12-29 21:43:03,637 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@481a996b
2017-12-29 21:43:03,643 +0100 [main] WARN  (DriverManagerConnectionProviderImpl.java:70) - HHH10001002: Using Hibernate built-in connection pool (not for production use!)
2017-12-29 21:43:03,655 +0100 [main] INFO  (DriverManagerConnectionProviderImpl.java:126) - HHH10001005: using driver [com.mysql.jdbc.Driver] at URL [jdbc:mysql://localhost:3306/DbRemote]
2017-12-29 21:43:03,655 +0100 [main] INFO  (DriverManagerConnectionProviderImpl.java:132) - HHH10001001: Connection properties: {user=userDB, password=userDB}
2017-12-29 21:43:03,655 +0100 [main] INFO  (DriverManagerConnectionProviderImpl.java:140) - HHH10001003: Autocommit mode: false
2017-12-29 21:43:03,657 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Initializing Connection pool with 1 Connections
2017-12-29 21:43:03,657 +0100 [main] INFO  (PooledConnections.java:41) - HHH000115: Hibernate connection pool size: 20 (min=1)
2017-12-29 21:43:03,898 +0100 [main] DEBUG (JdbcEnvironmentInitiator.java:72) - Database ->
       name : MySQL
    version : 5.7.20-log
      major : 5
      minor : 7
2017-12-29 21:43:03,898 +0100 [main] DEBUG (JdbcEnvironmentInitiator.java:83) - Driver ->
       name : MySQL Connector Java
    version : mysql-connector-java-5.1.45 ( Revision: 9131eefa398531c7dc98776e8a3fe839e544c5b2 )
      major : 5
      minor : 1
2017-12-29 21:43:03,898 +0100 [main] DEBUG (DelegatingBasicLogger.java:389) - JDBC version : 4.0
2017-12-29 21:43:03,905 +0100 [main] INFO  (Dialect.java:157) - HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2017-12-29 21:43:03,930 +0100 [main] DEBUG (IdentifierHelperBuilder.java:117) - JDBC driver metadata reported database stores quoted identifiers in more than one case
2017-12-29 21:43:03,932 +0100 [main] DEBUG (IdentifierHelperBuilder.java:191) - IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
2017-12-29 21:43:04,018 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2017-12-29 21:43:04,019 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2017-12-29 21:43:04,019 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2017-12-29 21:43:04,019 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2017-12-29 21:43:04,020 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2017-12-29 21:43:04,021 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2017-12-29 21:43:04,021 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2017-12-29 21:43:04,023 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2017-12-29 21:43:04,024 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
2017-12-29 21:43:04,025 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2017-12-29 21:43:04,026 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2017-12-29 21:43:04,028 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
2017-12-29 21:43:04,029 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2017-12-29 21:43:04,033 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2017-12-29 21:43:04,056 +0100 [main] DEBUG (Namespace.java:47) - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2017-12-29 21:43:04,085 +0100 [main] DEBUG (AnnotationBinder.java:511) - Binding entity from annotated class: model.entities.Address
2017-12-29 21:43:04,096 +0100 [main] DEBUG (QueryBinder.java:80) - Binding named query: findUnusedAddress => SELECT a FROM Address a WHERE a.id NOT IN (SELECT p.address.id FROM Person p)
2017-12-29 21:43:04,103 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2017-12-29 21:43:04,106 +0100 [main] DEBUG (EntityBinder.java:419) - Import with entity name Address
2017-12-29 21:43:04,108 +0100 [main] DEBUG (EntityBinder.java:695) - Bind entity model.entities.Address on table address
2017-12-29 21:43:04,123 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=id, insertable=true, updatable=true, unique=false}
2017-12-29 21:43:04,125 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property id with lazy=false
2017-12-29 21:43:04,127 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:id]
2017-12-29 21:43:04,128 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for id
2017-12-29 21:43:04,130 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property id
2017-12-29 21:43:04,133 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=city, insertable=true, updatable=true, unique=false}
2017-12-29 21:43:04,133 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property city with lazy=false
2017-12-29 21:43:04,133 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:city]
2017-12-29 21:43:04,134 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for city
2017-12-29 21:43:04,134 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property city
2017-12-29 21:43:04,134 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=country, insertable=true, updatable=true, unique=false}
2017-12-29 21:43:04,134 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property country with lazy=false
2017-12-29 21:43:04,135 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:country]
2017-12-29 21:43:04,135 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for country
2017-12-29 21:43:04,135 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property country
2017-12-29 21:43:04,135 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=mailBox, insertable=true, updatable=true, unique=false}
2017-12-29 21:43:04,135 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property mailBox with lazy=false
2017-12-29 21:43:04,135 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:mailBox]
2017-12-29 21:43:04,135 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for mailBox
2017-12-29 21:43:04,135 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property mailBox
2017-12-29 21:43:04,136 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=nr, insertable=true, updatable=true, unique=false}
2017-12-29 21:43:04,136 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property nr with lazy=false
2017-12-29 21:43:04,136 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:nr]
2017-12-29 21:43:04,136 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for nr
2017-12-29 21:43:04,136 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property nr
2017-12-29 21:43:04,136 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=postalCode, insertable=true, updatable=true, unique=false}
2017-12-29 21:43:04,136 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property postalCode with lazy=false
2017-12-29 21:43:04,136 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:postalCode]
2017-12-29 21:43:04,136 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for postalCode
2017-12-29 21:43:04,137 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property postalCode
2017-12-29 21:43:04,137 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=street, insertable=true, updatable=true, unique=false}
2017-12-29 21:43:04,137 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property street with lazy=false
2017-12-29 21:43:04,137 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:street]
2017-12-29 21:43:04,137 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for street
2017-12-29 21:43:04,137 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property street
2017-12-29 21:43:04,138 +0100 [main] DEBUG (AnnotationBinder.java:511) - Binding entity from annotated class: model.entities.Remote
2017-12-29 21:43:04,138 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2017-12-29 21:43:04,138 +0100 [main] DEBUG (EntityBinder.java:419) - Import with entity name Remote
2017-12-29 21:43:04,138 +0100 [main] DEBUG (EntityBinder.java:695) - Bind entity model.entities.Remote on table Remote
2017-12-29 21:43:04,139 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Remote), mappingColumn=id, insertable=true, updatable=true, unique=false}
2017-12-29 21:43:04,139 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property id with lazy=false
2017-12-29 21:43:04,139 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Remote:id]
2017-12-29 21:43:04,139 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for id
2017-12-29 21:43:04,139 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property id
2017-12-29 21:43:04,140 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Remote), mappingColumn=frequency, insertable=true, updatable=true, unique=false}
2017-12-29 21:43:04,140 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property frequency with lazy=false
2017-12-29 21:43:04,140 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Remote:frequency]
2017-12-29 21:43:04,140 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for frequency
2017-12-29 21:43:04,140 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property frequency
2017-12-29 21:43:04,140 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Remote), mappingColumn=isActive, insertable=true, updatable=true, unique=false}
2017-12-29 21:43:04,140 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property isActive with lazy=false
2017-12-29 21:43:04,140 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Remote:isActive]
2017-12-29 21:43:04,140 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for isActive
2017-12-29 21:43:04,140 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property isActive
2017-12-29 21:43:04,141 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Remote), mappingColumn=serialNumber, insertable=true, updatable=true, unique=false}
2017-12-29 21:43:04,141 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property serialNumber with lazy=false
2017-12-29 21:43:04,141 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Remote:serialNumber]
2017-12-29 21:43:04,141 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for serialNumber
2017-12-29 21:43:04,141 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property serialNumber
2017-12-29 21:43:04,141 +0100 [main] DEBUG (AnnotationBinder.java:511) - Binding entity from annotated class: model.entities.Person
2017-12-29 21:43:04,141 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2017-12-29 21:43:04,141 +0100 [main] DEBUG (EntityBinder.java:419) - Import with entity name Person
2017-12-29 21:43:04,141 +0100 [main] DEBUG (EntityBinder.java:695) - Bind entity model.entities.Person on table Person
2017-12-29 21:43:04,145 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Person), mappingColumn=id, insertable=true, updatable=true, unique=false}
2017-12-29 21:43:04,145 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property id with lazy=false
2017-12-29 21:43:04,146 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Person:id]
2017-12-29 21:43:04,146 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for id
2017-12-29 21:43:04,146 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property id
2017-12-29 21:43:04,147 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='addressId', referencedColumn='', mappedBy=''}
2017-12-29 21:43:04,148 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Person), mappingColumn=address, insertable=true, updatable=true, unique=false}
2017-12-29 21:43:04,150 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property address
2017-12-29 21:43:04,151 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Person), mappingColumn=endOfContract, insertable=true, updatable=true, unique=false}
2017-12-29 21:43:04,151 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property endOfContract with lazy=false
2017-12-29 21:43:04,151 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Person:endOfContract]
2017-12-29 21:43:04,151 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for endOfContract
2017-12-29 21:43:04,151 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property endOfContract
2017-12-29 21:43:04,151 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Person), mappingColumn=firstname, insertable=true, updatable=true, unique=false}
2017-12-29 21:43:04,151 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property firstname with lazy=false
2017-12-29 21:43:04,152 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Person:firstname]
2017-12-29 21:43:04,152 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for firstname
2017-12-29 21:43:04,152 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property firstname
2017-12-29 21:43:04,152 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Person), mappingColumn=lastname, insertable=true, updatable=true, unique=false}
2017-12-29 21:43:04,152 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property lastname with lazy=false
2017-12-29 21:43:04,152 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Person:lastname]
2017-12-29 21:43:04,152 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for lastname
2017-12-29 21:43:04,152 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property lastname
2017-12-29 21:43:04,152 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='remoteId', referencedColumn='', mappedBy=''}
2017-12-29 21:43:04,153 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Person), mappingColumn=remote, insertable=true, updatable=true, unique=false}
2017-12-29 21:43:04,153 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property remote
2017-12-29 21:43:04,153 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for id
2017-12-29 21:43:04,153 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for city
2017-12-29 21:43:04,154 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for country
2017-12-29 21:43:04,154 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for mailBox
2017-12-29 21:43:04,154 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for nr
2017-12-29 21:43:04,154 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for postalCode
2017-12-29 21:43:04,154 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for street
2017-12-29 21:43:04,154 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for id
2017-12-29 21:43:04,154 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for frequency
2017-12-29 21:43:04,154 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for isActive
2017-12-29 21:43:04,154 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for serialNumber
2017-12-29 21:43:04,155 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for id
2017-12-29 21:43:04,155 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for endOfContract
2017-12-29 21:43:04,155 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for firstname
2017-12-29 21:43:04,155 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for lastname
2017-12-29 21:43:04,158 +0100 [main] DEBUG (PrimaryKey.java:35) - Forcing column [id] to be non-null as it is part of the primary key for table [address]
2017-12-29 21:43:04,159 +0100 [main] DEBUG (PrimaryKey.java:35) - Forcing column [id] to be non-null as it is part of the primary key for table [remote]
2017-12-29 21:43:04,159 +0100 [main] DEBUG (PrimaryKey.java:35) - Forcing column [id] to be non-null as it is part of the primary key for table [person]
2017-12-29 21:43:04,159 +0100 [main] DEBUG (InFlightMetadataCollectorImpl.java:1798) - Resolving reference to class: model.entities.Address
2017-12-29 21:43:04,161 +0100 [main] DEBUG (InFlightMetadataCollectorImpl.java:1798) - Resolving reference to class: model.entities.Remote
2017-12-29 21:43:04,162 +0100 [main] DEBUG (InFlightMetadataCollectorImpl.java:1798) - Resolving reference to class: model.entities.Address
2017-12-29 21:43:04,162 +0100 [main] DEBUG (InFlightMetadataCollectorImpl.java:1798) - Resolving reference to class: model.entities.Remote
2017-12-29 21:43:04,187 +0100 [main] DEBUG (SessionFactoryImpl.java:200) - Building session factory
2017-12-29 21:43:04,187 +0100 [main] DEBUG (Settings.java:69) - SessionFactory name : null
2017-12-29 21:43:04,187 +0100 [main] DEBUG (Settings.java:70) - Automatic flush during beforeCompletion(): enabled
2017-12-29 21:43:04,188 +0100 [main] DEBUG (Settings.java:71) - Automatic session close at end of transaction: disabled
2017-12-29 21:43:04,188 +0100 [main] DEBUG (Settings.java:73) - Statistics: disabled
2017-12-29 21:43:04,188 +0100 [main] DEBUG (Settings.java:75) - Deleted entity synthetic identifier rollback: disabled
2017-12-29 21:43:04,188 +0100 [main] DEBUG (Settings.java:76) - Default entity-mode: pojo
2017-12-29 21:43:04,188 +0100 [main] DEBUG (Settings.java:77) - Check Nullability in Core (should be disabled when Bean Validation is on): enabled
2017-12-29 21:43:04,188 +0100 [main] DEBUG (Settings.java:78) - Allow initialization of lazy state outside session : disabled
2017-12-29 21:43:04,188 +0100 [main] DEBUG (Settings.java:80) - Using BatchFetchStyle : LEGACY
2017-12-29 21:43:04,188 +0100 [main] DEBUG (Settings.java:81) - Default batch fetch size: -1
2017-12-29 21:43:04,188 +0100 [main] DEBUG (Settings.java:82) - Maximum outer join fetch depth: 2
2017-12-29 21:43:04,189 +0100 [main] DEBUG (Settings.java:83) - Default null ordering: NONE
2017-12-29 21:43:04,189 +0100 [main] DEBUG (Settings.java:84) - Order SQL updates by primary key: disabled
2017-12-29 21:43:04,189 +0100 [main] DEBUG (Settings.java:85) - Order SQL inserts for batching: disabled
2017-12-29 21:43:04,189 +0100 [main] DEBUG (Settings.java:87) - multi-tenancy strategy : NONE
2017-12-29 21:43:04,189 +0100 [main] DEBUG (Settings.java:89) - JTA Track by Thread: enabled
2017-12-29 21:43:04,189 +0100 [main] DEBUG (Settings.java:91) - Query language substitutions: {}
2017-12-29 21:43:04,189 +0100 [main] DEBUG (Settings.java:92) - JPA query language strict compliance: disabled
2017-12-29 21:43:04,189 +0100 [main] DEBUG (Settings.java:93) - Named query checking : enabled
2017-12-29 21:43:04,189 +0100 [main] DEBUG (Settings.java:95) - Second-level cache: enabled
2017-12-29 21:43:04,189 +0100 [main] DEBUG (Settings.java:96) - Second-level query cache: disabled
2017-12-29 21:43:04,190 +0100 [main] DEBUG (Settings.java:97) - Second-level query cache factory: org.hibernate.cache.internal.StandardQueryCacheFactory@6337c201
2017-12-29 21:43:04,190 +0100 [main] DEBUG (Settings.java:98) - Second-level cache region prefix: null
2017-12-29 21:43:04,190 +0100 [main] DEBUG (Settings.java:99) - Optimize second-level cache for minimal puts: disabled
2017-12-29 21:43:04,190 +0100 [main] DEBUG (Settings.java:100) - Structured second-level cache entries: disabled
2017-12-29 21:43:04,190 +0100 [main] DEBUG (Settings.java:101) - Second-level cache direct-reference entries: disabled
2017-12-29 21:43:04,190 +0100 [main] DEBUG (Settings.java:102) - Automatic eviction of collection cache: disabled
2017-12-29 21:43:04,190 +0100 [main] DEBUG (Settings.java:104) - JDBC batch size: 15
2017-12-29 21:43:04,190 +0100 [main] DEBUG (Settings.java:105) - JDBC batch updates for versioned data: enabled
2017-12-29 21:43:04,190 +0100 [main] DEBUG (Settings.java:106) - Scrollable result sets: enabled
2017-12-29 21:43:04,190 +0100 [main] DEBUG (Settings.java:107) - Wrap result sets: disabled
2017-12-29 21:43:04,190 +0100 [main] DEBUG (Settings.java:108) - JDBC3 getGeneratedKeys(): enabled
2017-12-29 21:43:04,190 +0100 [main] DEBUG (Settings.java:109) - JDBC result set fetch size: null
2017-12-29 21:43:04,191 +0100 [main] DEBUG (Settings.java:110) - Connection release mode: AFTER_TRANSACTION
2017-12-29 21:43:04,191 +0100 [main] DEBUG (Settings.java:111) - Generate SQL with comments: disabled
2017-12-29 21:43:04,224 +0100 [main] DEBUG (SessionFactoryImpl.java:258) - Session factory constructed with filter configurations : {}
2017-12-29 21:43:04,224 +0100 [main] DEBUG (SessionFactoryImpl.java:259) - Instantiating session factory with properties: {sun.desktop=windows, awt.toolkit=sun.awt.windows.WToolkit, file.encoding.pkg=sun.io, java.specification.version=1.8, sun.cpu.isalist=amd64, sun.jnu.encoding=Cp1252, sun.awt.enableExtraMouseButtons=true, java.class.path=C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\log4j-1.2.17.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\mysql-connector-java-5.1.45-bin.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\antlr-2.7.7.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\classmate-1.3.0.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\dom4j-1.6.1.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\hibernate-commons-annotations-5.0.1.Final.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\hibernate-core-5.2.12.Final.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\hibernate-jpa-2.1-api-1.0.0.Final.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\jandex-2.0.3.Final.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\javassist-3.20.0-GA.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\jboss-logging-3.3.0.Final.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\jboss-transaction-api_1.2_spec-1.0.1.Final.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\eclipselink.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\javax.persistence-3.0-prelude-embedded-m2-sources.jar;C:\Users\BenJolien\Desktop\eclipse\plugins\org.junit_4.12.0.v201504281640\junit.jar;C:\Users\BenJolien\Desktop\eclipse\plugins\org.hamcrest.core_1.3.0.v201303031735.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\jcalendar-1.4.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\target\classes;C:\Users\BenJolien\.m2\repository\org\apache\maven\plugins\maven-compiler-plugin\3.7.0\maven-compiler-plugin-3.7.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-plugin-api\3.0\maven-plugin-api-3.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-model\3.0\maven-model-3.0.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\sisu\sisu-inject-plexus\1.4.2\sisu-inject-plexus-1.4.2.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\sisu\sisu-inject-bean\1.4.2\sisu-inject-bean-1.4.2.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\sisu\sisu-guice\2.1.7\sisu-guice-2.1.7-noaop.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-artifact\3.0\maven-artifact-3.0.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-utils\2.0.4\plexus-utils-2.0.4.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-core\3.0\maven-core-3.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-settings\3.0\maven-settings-3.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-settings-builder\3.0\maven-settings-builder-3.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-repository-metadata\3.0\maven-repository-metadata-3.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-model-builder\3.0\maven-model-builder-3.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-aether-provider\3.0\maven-aether-provider-3.0.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\aether\aether-impl\1.7\aether-impl-1.7.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\aether\aether-spi\1.7\aether-spi-1.7.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\aether\aether-api\1.7\aether-api-1.7.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\aether\aether-util\1.7\aether-util-1.7.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-interpolation\1.14\plexus-interpolation-1.14.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-classworlds\2.2.3\plexus-classworlds-2.2.3.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-component-annotations\1.5.5\plexus-component-annotations-1.5.5.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\plexus\plexus-sec-dispatcher\1.3\plexus-sec-dispatcher-1.3.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\plexus\plexus-cipher\1.4\plexus-cipher-1.4.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\shared\maven-shared-utils\3.1.0\maven-shared-utils-3.1.0.jar;C:\Users\BenJolien\.m2\repository\commons-io\commons-io\2.5\commons-io-2.5.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\shared\maven-shared-incremental\1.1\maven-shared-incremental-1.1.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-java\0.9.2\plexus-java-0.9.2.jar;C:\Users\BenJolien\.m2\repository\org\ow2\asm\asm\6.0_BETA\asm-6.0_BETA.jar;C:\Users\BenJolien\.m2\repository\com\thoughtworks\qdox\qdox\2.0-M7\qdox-2.0-M7.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-compiler-api\2.8.2\plexus-compiler-api-2.8.2.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-compiler-manager\2.8.2\plexus-compiler-manager-2.8.2.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-compiler-javac\2.8.2\plexus-compiler-javac-2.8.2.jar;C:\Users\BenJolien\.m2\repository\org\hibernate\hibernate-core\4.2.7.SP1\hibernate-core-4.2.7.SP1.jar;C:\Users\BenJolien\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\BenJolien\.m2\repository\org\jboss\logging\jboss-logging\3.1.0.GA\jboss-logging-3.1.0.GA.jar;C:\Users\BenJolien\.m2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;C:\Users\BenJolien\.m2\repository\org\javassist\javassist\3.18.1-GA\javassist-3.18.1-GA.jar;C:\Users\BenJolien\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.1_spec\1.0.1.Final\jboss-transaction-api_1.1_spec-1.0.1.Final.jar;C:\Users\BenJolien\.m2\repository\org\hibernate\common\hibernate-commons-annotations\4.0.2.Final\hibernate-commons-annotations-4.0.2.Final.jar;C:\Users\BenJolien\.m2\repository\mysql\mysql-connector-java\6.0.6\mysql-connector-java-6.0.6.jar;C:\Users\BenJolien\.m2\repository\org\fluttercode\datafactory\datafactory\0.8\datafactory-0.8.jar;C:\Users\BenJolien\.m2\repository\org\hibernate\javax\persistence\hibernate-jpa-2.0-api\1.0.1.Final\hibernate-jpa-2.0-api-1.0.1.Final.jar;C:\Users\BenJolien\.m2\repository\org\hibernate\hibernate-entitymanager\5.2.12.Final\hibernate-entitymanager-5.2.12.Final.jar;C:\Users\BenJolien\.m2\repository\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar;C:\Users\BenJolien\.m2\repository\net\bytebuddy\byte-buddy\1.6.14\byte-buddy-1.6.14.jar;C:\Users\BenJolien\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.0.1.Final\jboss-transaction-api_1.2_spec-1.0.1.Final.jar, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=http://java.oracle.com/, user.timezone=Europe/Berlin, javax.persistence.jdbc.user=****, javax.persistence.jdbc.url=jdbc:mysql://localhost:3306/DbRemote, os.name=Windows 10, java.vm.specification.version=1.8, user.country=BE, sun.java.launcher=SUN_STANDARD, sun.boot.library.path=C:\Program Files\Java\jre1.8.0_144\bin, sun.java.command=controller.ControllerRunnerApp, sun.cpu.endian=little, user.home=C:\Users\BenJolien, user.language=nl, java.specification.vendor=Oracle Corporation, java.home=C:\Program Files\Java\jre1.8.0_144, file.separator=\, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, hibernate.transaction.coordinator_class=class org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorBuilderImpl, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, javax.persistence.jdbc.driver=com.mysql.jdbc.Driver, sun.boot.class.path=C:\Program Files\Java\jre1.8.0_144\lib\resources.jar;C:\Program Files\Java\jre1.8.0_144\lib\rt.jar;C:\Program Files\Java\jre1.8.0_144\lib\sunrsasign.jar;C:\Program Files\Java\jre1.8.0_144\lib\jsse.jar;C:\Program Files\Java\jre1.8.0_144\lib\jce.jar;C:\Program Files\Java\jre1.8.0_144\lib\charsets.jar;C:\Program Files\Java\jre1.8.0_144\lib\jfr.jar;C:\Program Files\Java\jre1.8.0_144\classes, user.script=, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=1.8.0_144-b01, user.name=BenJolien, path.separator=;, hibernate.connection.username=userDB, os.version=10.0, java.endorsed.dirs=C:\Program Files\Java\jre1.8.0_144\lib\endorsed, java.runtime.name=Java(TM) SE Runtime Environment, hibernate.connection.url=jdbc:mysql://localhost:3306/DbRemote, hibernate.ejb.persistenceUnitName=Afstandsbediening, file.encoding=UTF-8, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.connection.driver_class=com.mysql.jdbc.Driver, java.vendor.url.bug=http://bugreport.sun.com/bugreport/, java.io.tmpdir=C:\Users\BENJOL~1\AppData\Local\Temp\, java.version=1.8.0_144, user.dir=C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, hibernate.connection.password=****, java.awt.printerjob=sun.awt.windows.WPrinterJob, sun.os.patch.level=, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@4716be8b, java.library.path=C:\Program Files\Java\jre1.8.0_144\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:/Program Files/Java/jre1.8.0_151/bin/server;C:/Program Files/Java/jre1.8.0_151/bin;C:/Program Files/Java/jre1.8.0_151/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Program Files\Microsoft MPI\Bin\;C:\Program Files (x86)\Intel\iCLS Client\;C:\Program Files\Intel\iCLS Client\;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files (x86)\Windows Kits\10\Windows Performance Toolkit\;C:\Program Files\dotnet\;C:\Program Files\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files (x86)\GtkSharp\2.12\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\nodejs\;C:\Program Files\Microsoft\Web Platform Installer\;C:\Program Files\Microsoft SQL Server\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\110\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\110\DTS\Binn\;C:\Program Files\Microsoft SQL Server\110\DTS\Binn\;C:\Program Files (x86)\Microsoft SQL Server\Client SDK\ODBC\130\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\130\DTS\Binn\;C:\Program Files (x86)\Microsoft SQL Server\130\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files (x86)\scala\bin;C:\Program Files\ibm\gsk8\lib64;C:\Program Files (x86)\ibm\gsk8\lib;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Brackets\command;C:\Program Files\Git\cmd;C:\Program Files\MySQL\MySQL Utilities 1.6\;C:\Users\BenJolien\AppData\Local\Microsoft\WindowsApps;C:\Users\BenJolien\AppData\Roaming\npm;;C:\Users\BenJolien\Desktop\eclipse;;., java.vm.info=mixed mode, java.vendor=Oracle Corporation, java.vm.version=25.144-b01, hibernate.bytecode.use_reflection_optimizer=false, java.ext.dirs=C:\Program Files\Java\jre1.8.0_144\lib\ext;C:\WINDOWS\Sun\Java\lib\ext, sun.io.unicode.encoding=UnicodeLittle, javax.persistence.jdbc.password=userDB, java.class.version=52.0}
2017-12-29 21:43:04,232 +0100 [main] DEBUG (JaccIntegrator.java:80) - Skipping JACC integration as it was not enabled
2017-12-29 21:43:04,234 +0100 [main] DEBUG (CascadeStyles.java:268) - External cascade style registration [persist : STYLE_PERSIST_SKIPLAZY] overrode base registration [STYLE_PERSIST]
2017-12-29 21:43:04,243 +0100 [main] DEBUG (SessionFactoryImpl.java:298) - Instantiated session factory
2017-12-29 21:43:04,267 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:55) - Not known whether passed class name [model.entities.Address] is safe
2017-12-29 21:43:04,267 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:57) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.entities.Address
2017-12-29 21:43:04,274 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:55) - Not known whether passed class name [model.entities.Address] is safe
2017-12-29 21:43:04,274 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:57) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.entities.Address
2017-12-29 21:43:04,299 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:55) - Not known whether passed class name [model.entities.Remote] is safe
2017-12-29 21:43:04,299 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:57) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.entities.Remote
2017-12-29 21:43:04,299 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:55) - Not known whether passed class name [model.entities.Remote] is safe
2017-12-29 21:43:04,299 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:57) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.entities.Remote
2017-12-29 21:43:04,302 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:55) - Not known whether passed class name [model.entities.Person] is safe
2017-12-29 21:43:04,303 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:57) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.entities.Person
2017-12-29 21:43:04,305 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:55) - Not known whether passed class name [model.entities.Person] is safe
2017-12-29 21:43:04,305 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:57) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.entities.Person
2017-12-29 21:43:04,314 +0100 [main] DEBUG (AbstractEntityPersister.java:3608) - Static SQL for entity: model.entities.Address
2017-12-29 21:43:04,314 +0100 [main] DEBUG (AbstractEntityPersister.java:3613) -  Version select: select id from address where id =?
2017-12-29 21:43:04,314 +0100 [main] DEBUG (AbstractEntityPersister.java:3616) -  Snapshot select: select address_.id, address_.city as city2_0_, address_.country as country3_0_, address_.mailBox as mailBox4_0_, address_.nr as nr5_0_, address_.postalCode as postalCo6_0_, address_.street as street7_0_ from address address_ where address_.id=?
2017-12-29 21:43:04,314 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into address (city, country, mailBox, nr, postalCode, street, id) values (?, ?, ?, ?, ?, ?, ?)
2017-12-29 21:43:04,315 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update address set city=?, country=?, mailBox=?, nr=?, postalCode=?, street=? where id=?
2017-12-29 21:43:04,315 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from address where id=?
2017-12-29 21:43:04,315 +0100 [main] DEBUG (AbstractEntityPersister.java:3624) -  Identity insert: insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:43:04,326 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7e8dcdaa]
2017-12-29 21:43:04,326 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:43:04,327 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:43:04,327 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:43:04,327 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:43:04,327 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:43:04,327 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:43:04,327 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:43:04,335 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:43:04,338 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:43:04,340 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [NONE]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:04,340 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7ac2e39b]
2017-12-29 21:43:04,340 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:43:04,341 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:43:04,341 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:43:04,341 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:43:04,341 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:43:04,341 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:43:04,341 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:43:04,342 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:43:04,342 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:43:04,342 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [READ]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:04,343 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@64a8c844]
2017-12-29 21:43:04,343 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:43:04,343 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:43:04,343 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:43:04,343 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:43:04,344 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:43:04,344 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:43:04,344 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:43:04,344 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:43:04,344 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:43:04,344 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [UPGRADE]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? for update
2017-12-29 21:43:04,346 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@52de51b6]
2017-12-29 21:43:04,347 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:43:04,347 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:43:04,347 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:43:04,347 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:43:04,348 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:43:04,348 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:43:04,348 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:43:04,348 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:43:04,348 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:43:04,348 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [UPGRADE_NOWAIT]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? for update
2017-12-29 21:43:04,349 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3a0d172f]
2017-12-29 21:43:04,349 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:43:04,349 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:43:04,349 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:43:04,349 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:43:04,349 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:43:04,349 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:43:04,349 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:43:04,350 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:43:04,350 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:43:04,350 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [UPGRADE_SKIPLOCKED]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? for update
2017-12-29 21:43:04,350 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@485e36bc]
2017-12-29 21:43:04,350 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:43:04,351 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:43:04,351 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:43:04,351 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:43:04,351 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:43:04,351 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:43:04,352 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:43:04,352 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:43:04,352 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:43:04,352 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [FORCE]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? for update
2017-12-29 21:43:04,352 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2a79d4b1]
2017-12-29 21:43:04,353 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:43:04,353 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:43:04,353 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:43:04,353 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:43:04,353 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:43:04,353 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:43:04,353 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:43:04,353 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:43:04,353 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:43:04,354 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [PESSIMISTIC_READ]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? lock in share mode
2017-12-29 21:43:04,354 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@17cdf2d0]
2017-12-29 21:43:04,354 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:43:04,354 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:43:04,354 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:43:04,354 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:43:04,354 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:43:04,354 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:43:04,354 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:43:04,354 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:43:04,354 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:43:04,355 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [PESSIMISTIC_WRITE]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? for update
2017-12-29 21:43:04,355 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@736d6a5c]
2017-12-29 21:43:04,355 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:43:04,355 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:43:04,355 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:43:04,355 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:43:04,355 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:43:04,355 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:43:04,355 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:43:04,355 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:43:04,356 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:43:04,356 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [PESSIMISTIC_FORCE_INCREMENT]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? for update
2017-12-29 21:43:04,356 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5b529706]
2017-12-29 21:43:04,356 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:43:04,356 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:43:04,356 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:43:04,356 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:43:04,356 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:43:04,356 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:43:04,356 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:43:04,357 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:43:04,357 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:43:04,357 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [OPTIMISTIC]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:04,357 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7b5a12ae]
2017-12-29 21:43:04,357 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:43:04,357 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:43:04,357 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:43:04,357 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:43:04,357 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:43:04,357 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:43:04,357 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:43:04,358 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:43:04,358 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:43:04,358 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [OPTIMISTIC_FORCE_INCREMENT]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:04,366 +0100 [main] DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity model.entities.Address: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:04,366 +0100 [main] DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity model.entities.Address: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:04,366 +0100 [main] DEBUG (AbstractEntityPersister.java:3608) - Static SQL for entity: model.entities.Remote
2017-12-29 21:43:04,366 +0100 [main] DEBUG (AbstractEntityPersister.java:3613) -  Version select: select id from Remote where id =?
2017-12-29 21:43:04,366 +0100 [main] DEBUG (AbstractEntityPersister.java:3616) -  Snapshot select: select remote_.id, remote_.frequency as frequenc2_2_, remote_.isActive as isActive3_2_, remote_.serialNumber as serialNu4_2_ from Remote remote_ where remote_.id=?
2017-12-29 21:43:04,366 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into Remote (frequency, isActive, serialNumber, id) values (?, ?, ?, ?)
2017-12-29 21:43:04,366 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update Remote set frequency=?, isActive=?, serialNumber=? where id=?
2017-12-29 21:43:04,366 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from Remote where id=?
2017-12-29 21:43:04,366 +0100 [main] DEBUG (AbstractEntityPersister.java:3624) -  Identity insert: insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:43:04,367 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6475472c]
2017-12-29 21:43:04,367 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:43:04,367 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:43:04,367 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:43:04,367 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:43:04,367 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:43:04,367 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:43:04,367 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [NONE]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:04,367 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4bd1f8dd]
2017-12-29 21:43:04,368 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:43:04,368 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:43:04,368 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:43:04,368 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:43:04,368 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:43:04,368 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:43:04,369 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [READ]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:04,369 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3e14c16d]
2017-12-29 21:43:04,369 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:43:04,369 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:43:04,369 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:43:04,369 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:43:04,369 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:43:04,370 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:43:04,370 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [UPGRADE]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? for update
2017-12-29 21:43:04,370 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@784b990c]
2017-12-29 21:43:04,370 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:43:04,370 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:43:04,370 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:43:04,370 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:43:04,370 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:43:04,370 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:43:04,370 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [UPGRADE_NOWAIT]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? for update
2017-12-29 21:43:04,370 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@25bc0606]
2017-12-29 21:43:04,371 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:43:04,371 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:43:04,371 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:43:04,371 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:43:04,371 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:43:04,372 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:43:04,372 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [UPGRADE_SKIPLOCKED]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? for update
2017-12-29 21:43:04,372 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1951b871]
2017-12-29 21:43:04,372 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:43:04,372 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:43:04,372 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:43:04,372 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:43:04,373 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:43:04,373 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:43:04,373 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [FORCE]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? for update
2017-12-29 21:43:04,373 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@33aeca0b]
2017-12-29 21:43:04,373 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:43:04,373 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:43:04,373 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:43:04,373 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:43:04,374 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:43:04,374 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:43:04,374 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [PESSIMISTIC_READ]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? lock in share mode
2017-12-29 21:43:04,374 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@57ac5227]
2017-12-29 21:43:04,374 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:43:04,374 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:43:04,374 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:43:04,374 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:43:04,375 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:43:04,375 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:43:04,375 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [PESSIMISTIC_WRITE]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? for update
2017-12-29 21:43:04,375 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@e98770d]
2017-12-29 21:43:04,375 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:43:04,375 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:43:04,375 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:43:04,375 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:43:04,376 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:43:04,376 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:43:04,376 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [PESSIMISTIC_FORCE_INCREMENT]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? for update
2017-12-29 21:43:04,376 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2f6e28bc]
2017-12-29 21:43:04,376 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:43:04,376 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:43:04,376 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:43:04,376 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:43:04,377 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:43:04,377 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:43:04,377 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [OPTIMISTIC]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:04,377 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@31e4bb20]
2017-12-29 21:43:04,377 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:43:04,382 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:43:04,382 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:43:04,383 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:43:04,383 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:43:04,383 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:43:04,383 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [OPTIMISTIC_FORCE_INCREMENT]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:04,384 +0100 [main] DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity model.entities.Remote: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:04,384 +0100 [main] DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity model.entities.Remote: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:04,384 +0100 [main] DEBUG (AbstractEntityPersister.java:3608) - Static SQL for entity: model.entities.Person
2017-12-29 21:43:04,384 +0100 [main] DEBUG (AbstractEntityPersister.java:3613) -  Version select: select id from Person where id =?
2017-12-29 21:43:04,385 +0100 [main] DEBUG (AbstractEntityPersister.java:3616) -  Snapshot select: select person_.id, person_.addressId as addressI5_1_, person_.endOfContract as endOfCon2_1_, person_.firstname as firstnam3_1_, person_.lastname as lastname4_1_, person_.remoteId as remoteId6_1_ from Person person_ where person_.id=?
2017-12-29 21:43:04,385 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into Person (addressId, endOfContract, firstname, lastname, remoteId, id) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:43:04,385 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update Person set addressId=?, endOfContract=?, firstname=?, lastname=?, remoteId=? where id=?
2017-12-29 21:43:04,385 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from Person where id=?
2017-12-29 21:43:04,385 +0100 [main] DEBUG (AbstractEntityPersister.java:3624) -  Identity insert: insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:43:04,385 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@463b4ac8]
2017-12-29 21:43:04,385 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:43:04,388 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5b1f29fa]
2017-12-29 21:43:04,389 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.city
2017-12-29 21:43:04,389 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.country
2017-12-29 21:43:04,389 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.mailBox
2017-12-29 21:43:04,390 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.nr
2017-12-29 21:43:04,390 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.postalCode
2017-12-29 21:43:04,390 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.street
2017-12-29 21:43:04,390 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:43:04,390 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:43:04,390 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:43:04,390 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:43:04,390 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@b6b1987]
2017-12-29 21:43:04,390 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote.frequency
2017-12-29 21:43:04,390 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote.isActive
2017-12-29 21:43:04,390 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote.serialNumber
2017-12-29 21:43:04,390 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:43:04,390 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:43:04,392 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}
          - JOIN (JoinDefinedByMetadata(address)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=model.entities.Address)
                - SQL table alias mapping - address1_
                - alias suffix - 1_
                - suffixed key columns - {id1_0_1_}
          - JOIN (JoinDefinedByMetadata(remote)) : <gen:0> -> <gen:2>
             - EntityQuerySpaceImpl(uid=<gen:2>, entity=model.entities.Remote)
                - SQL table alias mapping - remote2_
                - alias suffix - 2_
                - suffixed key columns - {id1_2_2_}

2017-12-29 21:43:04,392 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [NONE]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.mailBox as mailBox4_0_1_, address1_.nr as nr5_0_1_, address1_.postalCode as postalCo6_0_1_, address1_.street as street7_0_1_, remote2_.id as id1_2_2_, remote2_.frequency as frequenc2_2_2_, remote2_.isActive as isActive3_2_2_, remote2_.serialNumber as serialNu4_2_2_ from Person person0_ left outer join address address1_ on person0_.addressId=address1_.id left outer join Remote remote2_ on person0_.remoteId=remote2_.id where person0_.id=?
2017-12-29 21:43:04,392 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3543df7d]
2017-12-29 21:43:04,392 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:43:04,392 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3542162a]
2017-12-29 21:43:04,393 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.city
2017-12-29 21:43:04,393 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.country
2017-12-29 21:43:04,393 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.mailBox
2017-12-29 21:43:04,393 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.nr
2017-12-29 21:43:04,393 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.postalCode
2017-12-29 21:43:04,393 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.street
2017-12-29 21:43:04,393 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:43:04,393 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:43:04,393 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:43:04,393 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:43:04,393 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4212a0c8]
2017-12-29 21:43:04,393 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote.frequency
2017-12-29 21:43:04,394 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote.isActive
2017-12-29 21:43:04,394 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote.serialNumber
2017-12-29 21:43:04,394 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:43:04,394 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:43:04,394 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}
          - JOIN (JoinDefinedByMetadata(address)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=model.entities.Address)
                - SQL table alias mapping - address1_
                - alias suffix - 1_
                - suffixed key columns - {id1_0_1_}
          - JOIN (JoinDefinedByMetadata(remote)) : <gen:0> -> <gen:2>
             - EntityQuerySpaceImpl(uid=<gen:2>, entity=model.entities.Remote)
                - SQL table alias mapping - remote2_
                - alias suffix - 2_
                - suffixed key columns - {id1_2_2_}

2017-12-29 21:43:04,394 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [READ]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.mailBox as mailBox4_0_1_, address1_.nr as nr5_0_1_, address1_.postalCode as postalCo6_0_1_, address1_.street as street7_0_1_, remote2_.id as id1_2_2_, remote2_.frequency as frequenc2_2_2_, remote2_.isActive as isActive3_2_2_, remote2_.serialNumber as serialNu4_2_2_ from Person person0_ left outer join address address1_ on person0_.addressId=address1_.id left outer join Remote remote2_ on person0_.remoteId=remote2_.id where person0_.id=?
2017-12-29 21:43:04,395 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3b2c0e88]
2017-12-29 21:43:04,395 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:43:04,395 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@c1bd0be]
2017-12-29 21:43:04,395 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:43:04,395 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:43:04,395 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:43:04,395 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:43:04,395 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@476b0ae6]
2017-12-29 21:43:04,396 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:43:04,396 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:43:04,396 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 21:43:04,396 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [UPGRADE]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? for update
2017-12-29 21:43:04,396 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1c6804cd]
2017-12-29 21:43:04,397 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:43:04,397 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@549949be]
2017-12-29 21:43:04,397 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:43:04,397 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:43:04,397 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:43:04,397 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:43:04,397 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4b3a45f1]
2017-12-29 21:43:04,397 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:43:04,397 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:43:04,398 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 21:43:04,398 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [UPGRADE_NOWAIT]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? for update
2017-12-29 21:43:04,398 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@17a87e37]
2017-12-29 21:43:04,398 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:43:04,398 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@20a14b55]
2017-12-29 21:43:04,398 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:43:04,398 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:43:04,398 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:43:04,399 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:43:04,399 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@39ad977d]
2017-12-29 21:43:04,399 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:43:04,399 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:43:04,399 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 21:43:04,399 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [UPGRADE_SKIPLOCKED]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? for update
2017-12-29 21:43:04,399 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6da00fb9]
2017-12-29 21:43:04,399 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:43:04,400 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@20f12539]
2017-12-29 21:43:04,400 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:43:04,400 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:43:04,400 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:43:04,400 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:43:04,400 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@75b25825]
2017-12-29 21:43:04,400 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:43:04,400 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:43:04,400 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 21:43:04,400 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [FORCE]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? for update
2017-12-29 21:43:04,400 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@18025ced]
2017-12-29 21:43:04,401 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:43:04,401 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3a3e4aff]
2017-12-29 21:43:04,401 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:43:04,401 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:43:04,401 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:43:04,401 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:43:04,401 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5d2a4eed]
2017-12-29 21:43:04,401 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:43:04,401 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:43:04,401 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 21:43:04,401 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [PESSIMISTIC_READ]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? lock in share mode
2017-12-29 21:43:04,402 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@57459491]
2017-12-29 21:43:04,402 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:43:04,402 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@77a98a6a]
2017-12-29 21:43:04,402 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:43:04,402 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:43:04,402 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:43:04,402 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:43:04,402 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@78fbff54]
2017-12-29 21:43:04,402 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:43:04,402 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:43:04,402 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 21:43:04,402 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [PESSIMISTIC_WRITE]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? for update
2017-12-29 21:43:04,403 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3e10dc6]
2017-12-29 21:43:04,403 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:43:04,403 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@45e37a7e]
2017-12-29 21:43:04,403 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:43:04,403 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:43:04,403 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:43:04,403 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:43:04,403 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@62452cc9]
2017-12-29 21:43:04,403 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:43:04,403 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:43:04,403 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 21:43:04,403 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [PESSIMISTIC_FORCE_INCREMENT]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? for update
2017-12-29 21:43:04,404 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6941827a]
2017-12-29 21:43:04,404 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:43:04,404 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5bc9ba1d]
2017-12-29 21:43:04,404 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:43:04,404 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:43:04,404 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:43:04,404 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:43:04,404 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1021f6c9]
2017-12-29 21:43:04,404 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:43:04,404 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:43:04,405 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 21:43:04,405 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [OPTIMISTIC]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=?
2017-12-29 21:43:04,405 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7516e4e5]
2017-12-29 21:43:04,405 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:43:04,405 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5e81e5ac]
2017-12-29 21:43:04,405 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:43:04,405 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:43:04,405 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:43:04,405 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:43:04,405 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4189d70b]
2017-12-29 21:43:04,405 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:43:04,406 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:43:04,406 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 21:43:04,406 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [OPTIMISTIC_FORCE_INCREMENT]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=?
2017-12-29 21:43:04,407 +0100 [main] DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity model.entities.Person: select person0_.id as id1_1_2_, person0_.addressId as addressI5_1_2_, person0_.endOfContract as endOfCon2_1_2_, person0_.firstname as firstnam3_1_2_, person0_.lastname as lastname4_1_2_, person0_.remoteId as remoteId6_1_2_, address1_.id as id1_0_0_, address1_.city as city2_0_0_, address1_.country as country3_0_0_, address1_.mailBox as mailBox4_0_0_, address1_.nr as nr5_0_0_, address1_.postalCode as postalCo6_0_0_, address1_.street as street7_0_0_, remote2_.id as id1_2_1_, remote2_.frequency as frequenc2_2_1_, remote2_.isActive as isActive3_2_1_, remote2_.serialNumber as serialNu4_2_1_ from Person person0_ left outer join address address1_ on person0_.addressId=address1_.id left outer join Remote remote2_ on person0_.remoteId=remote2_.id where person0_.id=?
2017-12-29 21:43:04,407 +0100 [main] DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity model.entities.Person: select person0_.id as id1_1_2_, person0_.addressId as addressI5_1_2_, person0_.endOfContract as endOfCon2_1_2_, person0_.firstname as firstnam3_1_2_, person0_.lastname as lastname4_1_2_, person0_.remoteId as remoteId6_1_2_, address1_.id as id1_0_0_, address1_.city as city2_0_0_, address1_.country as country3_0_0_, address1_.mailBox as mailBox4_0_0_, address1_.nr as nr5_0_0_, address1_.postalCode as postalCo6_0_0_, address1_.street as street7_0_0_, remote2_.id as id1_2_1_, remote2_.frequency as frequenc2_2_1_, remote2_.isActive as isActive3_2_1_, remote2_.serialNumber as serialNu4_2_1_ from Person person0_ left outer join address address1_ on person0_.addressId=address1_.id left outer join Remote remote2_ on person0_.remoteId=remote2_.id where person0_.id=?
2017-12-29 21:43:04,421 +0100 [main] DEBUG (SchemaManagementToolCoordinator.java:56) - No actions specified; doing nothing
2017-12-29 21:43:04,421 +0100 [main] DEBUG (JtaPlatformInitiator.java:42) - No JtaPlatform was specified, checking resolver
2017-12-29 21:43:04,421 +0100 [main] DEBUG (JtaPlatformResolverInitiator.java:33) - No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
2017-12-29 21:43:04,424 +0100 [main] DEBUG (StandardJtaPlatformResolver.java:102) - Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2017-12-29 21:43:04,424 +0100 [main] DEBUG (NamedQueryRepository.java:151) - Checking 1 named HQL queries
2017-12-29 21:43:04,424 +0100 [main] DEBUG (NamedQueryRepository.java:155) - Checking named query: findUnusedAddress
2017-12-29 21:43:04,427 +0100 [main] DEBUG (QueryTranslatorFactoryInitiator.java:45) - QueryTranslatorFactory : org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory@58ebfd03
2017-12-29 21:43:04,427 +0100 [main] INFO  (QueryTranslatorFactoryInitiator.java:47) - HHH000397: Using ASTQueryTranslatorFactory
2017-12-29 21:43:04,456 +0100 [main] DEBUG (QueryTranslatorImpl.java:282) - parse() - HQL: SELECT a FROM model.entities.Address a WHERE a.id NOT IN (SELECT p.address.id FROM model.entities.Person p)
2017-12-29 21:43:04,461 +0100 [main] DEBUG (ErrorCounter.java:95) - throwQueryException() : no errors
2017-12-29 21:43:04,463 +0100 [main] DEBUG (QueryTranslatorImpl.java:305) - --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'FROM'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[IDENT] Node: 'model'
    |  |     |  |  \-[IDENT] Node: 'entities'
    |  |     |  \-[IDENT] Node: 'Address'
    |  |     \-[ALIAS] Node: 'a'
    |  \-[SELECT] Node: 'SELECT'
    |     \-[IDENT] Node: 'a'
    \-[WHERE] Node: 'WHERE'
       \-[NOT_IN] Node: 'not in'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'a'
          |  \-[IDENT] Node: 'id'
          \-[IN_LIST] Node: 'inList'
             \-[QUERY] Node: 'query'
                \-[SELECT_FROM] Node: 'SELECT_FROM'
                   +-[FROM] Node: 'FROM'
                   |  \-[RANGE] Node: 'RANGE'
                   |     +-[DOT] Node: '.'
                   |     |  +-[DOT] Node: '.'
                   |     |  |  +-[IDENT] Node: 'model'
                   |     |  |  \-[IDENT] Node: 'entities'
                   |     |  \-[IDENT] Node: 'Person'
                   |     \-[ALIAS] Node: 'p'
                   \-[SELECT] Node: 'SELECT'
                      \-[DOT] Node: '.'
                         +-[DOT] Node: '.'
                         |  +-[IDENT] Node: 'p'
                         |  \-[IDENT] Node: 'address'
                         \-[IDENT] Node: 'id'

2017-12-29 21:43:04,479 +0100 [main] DEBUG (HqlSqlBaseWalker.java:124) - select << begin [level=1, statement=select]
2017-12-29 21:43:04,487 +0100 [main] DEBUG (FromElement.java:147) - FromClause{level=1} : model.entities.Address (a) -> address0_
2017-12-29 21:43:04,488 +0100 [main] DEBUG (FromReferenceNode.java:60) - Resolved : a -> address0_.id
2017-12-29 21:43:04,490 +0100 [main] DEBUG (FromReferenceNode.java:60) - Resolved : a -> address0_.id
2017-12-29 21:43:04,490 +0100 [main] DEBUG (DotNode.java:666) - getDataType() : id -> org.hibernate.type.IntegerType@358c99f5
2017-12-29 21:43:04,491 +0100 [main] DEBUG (FromReferenceNode.java:60) - Resolved : a.id -> address0_.id
2017-12-29 21:43:04,491 +0100 [main] DEBUG (HqlSqlBaseWalker.java:124) - select << begin [level=2, statement=select]
2017-12-29 21:43:04,492 +0100 [main] DEBUG (FromElement.java:147) - FromClause{level=2} : model.entities.Person (p) -> person1_
2017-12-29 21:43:04,492 +0100 [main] DEBUG (FromReferenceNode.java:60) - Resolved : p -> person1_.id
2017-12-29 21:43:04,492 +0100 [main] DEBUG (DotNode.java:666) - getDataType() : address -> org.hibernate.type.ManyToOneType(model.entities.Address)
2017-12-29 21:43:04,492 +0100 [main] DEBUG (DotNode.java:625) - dereferenceShortcut() : property id in model.entities.Person does not require a join.
2017-12-29 21:43:04,493 +0100 [main] DEBUG (DotNode.java:650) - Unresolved property path is now 'address.id'
2017-12-29 21:43:04,493 +0100 [main] DEBUG (FromReferenceNode.java:60) - Resolved : p.address -> person1_.addressId
2017-12-29 21:43:04,493 +0100 [main] DEBUG (DotNode.java:666) - getDataType() : address.id -> org.hibernate.type.IntegerType@358c99f5
2017-12-29 21:43:04,493 +0100 [main] DEBUG (FromReferenceNode.java:60) - Resolved : p.address.id -> person1_.addressId
2017-12-29 21:43:04,493 +0100 [main] DEBUG (HqlSqlBaseWalker.java:128) - select : finishing up [level=2, statement=select]
2017-12-29 21:43:04,493 +0100 [main] DEBUG (HqlSqlWalker.java:747) - processQuery() :  ( SELECT ( {select clause} ( person1_.addressId ( person1_.addressId person1_.id address ) id ) ) ( FromClause{level=2} Person person1_ ) )
2017-12-29 21:43:04,497 +0100 [main] DEBUG (JoinProcessor.java:192) - Using FROM fragment [Person person1_]
2017-12-29 21:43:04,497 +0100 [main] DEBUG (HqlSqlBaseWalker.java:132) - select >> end [level=2, statement=select]
2017-12-29 21:43:04,498 +0100 [main] DEBUG (HqlSqlBaseWalker.java:128) - select : finishing up [level=1, statement=select]
2017-12-29 21:43:04,498 +0100 [main] DEBUG (HqlSqlWalker.java:747) - processQuery() :  ( SELECT ( {select clause} address0_.id ) ( FromClause{level=1} address address0_ ) ( WHERE ( not in ( address0_.id address0_.id id ) ( inList ( SELECT ( {select clause} ( person1_.addressId ( person1_.addressId person1_.id address ) id ) ) ( FromClause{level=2} Person person1_ ) ) ) ) ) )
2017-12-29 21:43:04,500 +0100 [main] DEBUG (JoinProcessor.java:192) - Using FROM fragment [address address0_]
2017-12-29 21:43:04,500 +0100 [main] DEBUG (HqlSqlBaseWalker.java:132) - select >> end [level=1, statement=select]
2017-12-29 21:43:04,500 +0100 [main] DEBUG (QueryTranslatorImpl.java:269) - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (address,Person)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'address0_.id as id1_0_' {alias=a, className=model.entities.Address, tableAlias=address0_}
    |  \-[SQL_TOKEN] SqlFragment: 'address0_.city as city2_0_, address0_.country as country3_0_, address0_.mailBox as mailBox4_0_, address0_.nr as nr5_0_, address0_.postalCode as postalCo6_0_, address0_.street as street7_0_'
    +-[FROM] FromClause: 'FROM' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[a], fromElementByTableAlias=[address0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'address address0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=a,role=null,tableName=address,tableAlias=address0_,origin=null,columns={,className=model.entities.Address}}
    \-[WHERE] SqlNode: 'WHERE'
       \-[NOT_IN] InLogicOperatorNode: 'not in'
          +-[DOT] DotNode: 'address0_.id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=id,path=a.id,tableAlias=address0_,className=model.entities.Address,classAlias=a}
          |  +-[ALIAS_REF] IdentNode: 'address0_.id' {alias=a, className=model.entities.Address, tableAlias=address0_}
          |  \-[IDENT] IdentNode: 'id' {originalText=id}
          \-[IN_LIST] SqlNode: 'inList'
             \-[SELECT] QueryNode: 'SELECT'  querySpaces (address,Person)
                +-[SELECT_CLAUSE] SelectClause: '{select clause}'
                |  \-[DOT] DotNode: 'person1_.addressId' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=address.id,path=p.address.id,tableAlias=person1_,className=model.entities.Person,classAlias=p}
                |     +-[DOT] DotNode: 'person1_.addressId' {propertyName=id,dereferenceType=UNKNOWN,getPropertyPath=address.id,path=p.address,tableAlias=person1_,className=model.entities.Person,classAlias=p}
                |     |  +-[ALIAS_REF] IdentNode: 'person1_.id' {alias=p, className=model.entities.Person, tableAlias=person1_}
                |     |  \-[IDENT] IdentNode: 'address' {originalText=address}
                |     \-[IDENT] IdentNode: 'id' {originalText=id}
                \-[FROM] FromClause: 'FROM' FromClause{level=2, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[p], fromElementByTableAlias=[person1_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
                   \-[FROM_FRAGMENT] FromElement: 'Person person1_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=p,role=null,tableName=Person,tableAlias=person1_,origin=null,columns={,className=model.entities.Person}}

2017-12-29 21:43:04,500 +0100 [main] DEBUG (ErrorCounter.java:95) - throwQueryException() : no errors
2017-12-29 21:43:04,504 +0100 [main] DEBUG (QueryTranslatorImpl.java:251) - HQL: SELECT a FROM model.entities.Address a WHERE a.id NOT IN (SELECT p.address.id FROM model.entities.Person p)
2017-12-29 21:43:04,504 +0100 [main] DEBUG (QueryTranslatorImpl.java:252) - SQL: select address0_.id as id1_0_, address0_.city as city2_0_, address0_.country as country3_0_, address0_.mailBox as mailBox4_0_, address0_.nr as nr5_0_, address0_.postalCode as postalCo6_0_, address0_.street as street7_0_ from address address0_ where address0_.id not in  (select person1_.addressId from Person person1_)
2017-12-29 21:43:04,504 +0100 [main] DEBUG (ErrorCounter.java:95) - throwQueryException() : no errors
2017-12-29 21:43:04,507 +0100 [main] DEBUG (NamedQueryRepository.java:167) - Checking 0 named SQL queries
2017-12-29 21:43:04,508 +0100 [main] DEBUG (SessionFactoryRegistry.java:52) - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@631e06ab
2017-12-29 21:43:04,509 +0100 [main] DEBUG (SessionFactoryRegistry.java:74) - Registering SessionFactory: f60864d5-76c0-40fa-b2b5-6cf359120f07 (<unnamed>)
2017-12-29 21:43:04,509 +0100 [main] DEBUG (SessionFactoryRegistry.java:81) - Not binding SessionFactory to JNDI, no JNDI name configured
2017-12-29 21:43:04,557 +0100 [main] DEBUG (StatisticsInitiator.java:82) - Statistics initialized [enabled=false]
2017-12-29 21:43:04,564 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:43:04,574 +0100 [main] DEBUG (QueryTranslatorImpl.java:282) - parse() - HQL: FROM model.entities.Remote
2017-12-29 21:43:04,574 +0100 [main] DEBUG (ErrorCounter.java:95) - throwQueryException() : no errors
2017-12-29 21:43:04,574 +0100 [main] DEBUG (QueryTranslatorImpl.java:305) - --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'FROM'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[IDENT] Node: 'model'
                |  \-[IDENT] Node: 'entities'
                \-[IDENT] Node: 'Remote'

2017-12-29 21:43:04,574 +0100 [main] DEBUG (HqlSqlBaseWalker.java:124) - select << begin [level=1, statement=select]
2017-12-29 21:43:04,575 +0100 [main] DEBUG (FromElement.java:147) - FromClause{level=1} : model.entities.Remote (<no alias>) -> remote0_
2017-12-29 21:43:04,575 +0100 [main] DEBUG (HqlSqlBaseWalker.java:128) - select : finishing up [level=1, statement=select]
2017-12-29 21:43:04,575 +0100 [main] DEBUG (HqlSqlWalker.java:747) - processQuery() :  ( SELECT ( FromClause{level=1} Remote remote0_ ) )
2017-12-29 21:43:04,575 +0100 [main] DEBUG (HqlSqlWalker.java:1023) - Derived SELECT clause created.
2017-12-29 21:43:04,576 +0100 [main] DEBUG (JoinProcessor.java:192) - Using FROM fragment [Remote remote0_]
2017-12-29 21:43:04,576 +0100 [main] DEBUG (HqlSqlBaseWalker.java:132) - select >> end [level=1, statement=select]
2017-12-29 21:43:04,576 +0100 [main] DEBUG (QueryTranslatorImpl.java:269) - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Remote)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'remote0_.id as id1_2_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Remote,tableAlias=remote0_,origin=null,columns={,className=model.entities.Remote}}}
    |  \-[SQL_TOKEN] SqlFragment: 'remote0_.frequency as frequenc2_2_, remote0_.isActive as isActive3_2_, remote0_.serialNumber as serialNu4_2_'
    \-[FROM] FromClause: 'FROM' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[remote0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'Remote remote0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Remote,tableAlias=remote0_,origin=null,columns={,className=model.entities.Remote}}

2017-12-29 21:43:04,576 +0100 [main] DEBUG (ErrorCounter.java:95) - throwQueryException() : no errors
2017-12-29 21:43:04,576 +0100 [main] DEBUG (QueryTranslatorImpl.java:251) - HQL: FROM model.entities.Remote
2017-12-29 21:43:04,576 +0100 [main] DEBUG (QueryTranslatorImpl.java:252) - SQL: select remote0_.id as id1_2_, remote0_.frequency as frequenc2_2_, remote0_.isActive as isActive3_2_, remote0_.serialNumber as serialNu4_2_ from Remote remote0_
2017-12-29 21:43:04,576 +0100 [main] DEBUG (ErrorCounter.java:95) - throwQueryException() : no errors
2017-12-29 21:43:04,586 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_, remote0_.frequency as frequenc2_2_, remote0_.isActive as isActive3_2_, remote0_.serialNumber as serialNu4_2_ from Remote remote0_
2017-12-29 21:43:04,602 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 0
2017-12-29 21:43:04,605 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#1]
2017-12-29 21:43:04,612 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 1
2017-12-29 21:43:04,612 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#2]
2017-12-29 21:43:04,612 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 2
2017-12-29 21:43:04,613 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#3]
2017-12-29 21:43:04,613 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 3
2017-12-29 21:43:04,613 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#4]
2017-12-29 21:43:04,613 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 4
2017-12-29 21:43:04,613 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#5]
2017-12-29 21:43:04,613 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 5
2017-12-29 21:43:04,613 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#6]
2017-12-29 21:43:04,614 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 6
2017-12-29 21:43:04,614 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#7]
2017-12-29 21:43:04,614 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 7
2017-12-29 21:43:04,614 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#8]
2017-12-29 21:43:04,614 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 8
2017-12-29 21:43:04,614 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#9]
2017-12-29 21:43:04,615 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 9
2017-12-29 21:43:04,615 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#10]
2017-12-29 21:43:04,615 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 10
2017-12-29 21:43:04,615 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#11]
2017-12-29 21:43:04,615 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 11
2017-12-29 21:43:04,615 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#12]
2017-12-29 21:43:04,615 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 12
2017-12-29 21:43:04,616 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#13]
2017-12-29 21:43:04,616 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 13
2017-12-29 21:43:04,616 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#14]
2017-12-29 21:43:04,616 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 14
2017-12-29 21:43:04,616 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#15]
2017-12-29 21:43:04,617 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 15
2017-12-29 21:43:04,617 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#16]
2017-12-29 21:43:04,617 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 16
2017-12-29 21:43:04,617 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#17]
2017-12-29 21:43:04,618 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 17
2017-12-29 21:43:04,618 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#18]
2017-12-29 21:43:04,618 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 18
2017-12-29 21:43:04,618 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#19]
2017-12-29 21:43:04,620 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 19
2017-12-29 21:43:04,620 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#20]
2017-12-29 21:43:04,620 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 20
2017-12-29 21:43:04,620 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#21]
2017-12-29 21:43:04,620 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 21
2017-12-29 21:43:04,621 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#22]
2017-12-29 21:43:04,621 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 22
2017-12-29 21:43:04,621 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#23]
2017-12-29 21:43:04,621 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 23
2017-12-29 21:43:04,622 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#24]
2017-12-29 21:43:04,622 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 24
2017-12-29 21:43:04,622 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#25]
2017-12-29 21:43:04,623 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 25
2017-12-29 21:43:04,623 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#26]
2017-12-29 21:43:04,623 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 26
2017-12-29 21:43:04,623 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#27]
2017-12-29 21:43:04,623 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 27
2017-12-29 21:43:04,623 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#28]
2017-12-29 21:43:04,624 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 28
2017-12-29 21:43:04,624 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#29]
2017-12-29 21:43:04,624 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 29
2017-12-29 21:43:04,624 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#30]
2017-12-29 21:43:04,624 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 30
2017-12-29 21:43:04,625 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#31]
2017-12-29 21:43:04,625 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 31
2017-12-29 21:43:04,625 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#32]
2017-12-29 21:43:04,625 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 32
2017-12-29 21:43:04,625 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#33]
2017-12-29 21:43:04,625 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 33
2017-12-29 21:43:04,626 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#34]
2017-12-29 21:43:04,626 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 34
2017-12-29 21:43:04,626 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#35]
2017-12-29 21:43:04,626 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 35
2017-12-29 21:43:04,626 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#36]
2017-12-29 21:43:04,626 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 36
2017-12-29 21:43:04,626 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#37]
2017-12-29 21:43:04,627 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 37
2017-12-29 21:43:04,627 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#38]
2017-12-29 21:43:04,627 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 38
2017-12-29 21:43:04,627 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#39]
2017-12-29 21:43:04,627 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 39
2017-12-29 21:43:04,627 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#40]
2017-12-29 21:43:04,628 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#1]
2017-12-29 21:43:04,630 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#1]
2017-12-29 21:43:04,630 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#2]
2017-12-29 21:43:04,630 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#2]
2017-12-29 21:43:04,630 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#3]
2017-12-29 21:43:04,631 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#3]
2017-12-29 21:43:04,631 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#4]
2017-12-29 21:43:04,631 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#4]
2017-12-29 21:43:04,631 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#5]
2017-12-29 21:43:04,631 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#5]
2017-12-29 21:43:04,631 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#6]
2017-12-29 21:43:04,631 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#6]
2017-12-29 21:43:04,631 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#7]
2017-12-29 21:43:04,631 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#7]
2017-12-29 21:43:04,631 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#8]
2017-12-29 21:43:04,631 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#8]
2017-12-29 21:43:04,631 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#9]
2017-12-29 21:43:04,632 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#9]
2017-12-29 21:43:04,632 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#10]
2017-12-29 21:43:04,632 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#10]
2017-12-29 21:43:04,632 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#11]
2017-12-29 21:43:04,632 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#11]
2017-12-29 21:43:04,632 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#12]
2017-12-29 21:43:04,632 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#12]
2017-12-29 21:43:04,632 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#13]
2017-12-29 21:43:04,632 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#13]
2017-12-29 21:43:04,632 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#14]
2017-12-29 21:43:04,633 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#14]
2017-12-29 21:43:04,633 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#15]
2017-12-29 21:43:04,633 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#15]
2017-12-29 21:43:04,633 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#16]
2017-12-29 21:43:04,633 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#16]
2017-12-29 21:43:04,633 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#17]
2017-12-29 21:43:04,633 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#17]
2017-12-29 21:43:04,633 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#18]
2017-12-29 21:43:04,633 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#18]
2017-12-29 21:43:04,633 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#19]
2017-12-29 21:43:04,633 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#19]
2017-12-29 21:43:04,633 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#20]
2017-12-29 21:43:04,633 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#20]
2017-12-29 21:43:04,633 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#21]
2017-12-29 21:43:04,634 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#21]
2017-12-29 21:43:04,634 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#22]
2017-12-29 21:43:04,634 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#22]
2017-12-29 21:43:04,634 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#23]
2017-12-29 21:43:04,634 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#23]
2017-12-29 21:43:04,634 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#24]
2017-12-29 21:43:04,634 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#24]
2017-12-29 21:43:04,634 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#25]
2017-12-29 21:43:04,635 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#25]
2017-12-29 21:43:04,635 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#26]
2017-12-29 21:43:04,635 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#26]
2017-12-29 21:43:04,635 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#27]
2017-12-29 21:43:04,635 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#27]
2017-12-29 21:43:04,635 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#28]
2017-12-29 21:43:04,636 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#28]
2017-12-29 21:43:04,636 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#29]
2017-12-29 21:43:04,636 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#29]
2017-12-29 21:43:04,636 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#30]
2017-12-29 21:43:04,636 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#30]
2017-12-29 21:43:04,636 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#31]
2017-12-29 21:43:04,636 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#31]
2017-12-29 21:43:04,636 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#32]
2017-12-29 21:43:04,636 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#32]
2017-12-29 21:43:04,637 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#33]
2017-12-29 21:43:04,637 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#33]
2017-12-29 21:43:04,637 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#34]
2017-12-29 21:43:04,637 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#34]
2017-12-29 21:43:04,637 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#35]
2017-12-29 21:43:04,637 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#35]
2017-12-29 21:43:04,637 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#36]
2017-12-29 21:43:04,637 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#36]
2017-12-29 21:43:04,637 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#37]
2017-12-29 21:43:04,637 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#37]
2017-12-29 21:43:04,637 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#38]
2017-12-29 21:43:04,638 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#38]
2017-12-29 21:43:04,638 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#39]
2017-12-29 21:43:04,638 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#39]
2017-12-29 21:43:04,638 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#40]
2017-12-29 21:43:04,638 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#40]
2017-12-29 21:43:04,640 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:43:04,641 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:43:04,643 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:43:04,645 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 40 objects
2017-12-29 21:43:04,647 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:43:04,649 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:43:04,649 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=44236742-2395-46d9-b5f7-45aae0d282c1, id=27, isActive=true, frequency=714351}
2017-12-29 21:43:04,649 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=6bbfb2ba-536f-40ff-9a18-335eaa310377, id=28, isActive=true, frequency=786313}
2017-12-29 21:43:04,649 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=a5feb4d8-db74-4cb5-af3c-f043d885ab28, id=25, isActive=true, frequency=157896}
2017-12-29 21:43:04,650 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=f88c95da-f07d-4175-a091-db970e6182a1, id=26, isActive=true, frequency=919447}
2017-12-29 21:43:04,650 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=1bec1375-9a8d-4c73-a774-1285277a4315, id=31, isActive=false, frequency=624638}
2017-12-29 21:43:04,650 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=eb668619-cafc-49c3-ae4b-4e1e6c2a37e0, id=32, isActive=false, frequency=34576}
2017-12-29 21:43:04,650 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=56a31262-df29-4744-850b-08708061482c, id=29, isActive=true, frequency=537613}
2017-12-29 21:43:04,650 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=e4284191-851b-436e-ac9c-74c5a432554d, id=30, isActive=true, frequency=307987}
2017-12-29 21:43:04,650 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=48007696-df43-49a2-a0fb-6d47e5dcc990, id=19, isActive=true, frequency=153810}
2017-12-29 21:43:04,650 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=e5917439-216c-40eb-8000-c9de3249ea80, id=20, isActive=true, frequency=269764}
2017-12-29 21:43:04,650 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=e6185158-de0b-4ec0-8c6b-a6142383f9a3, id=17, isActive=true, frequency=485727}
2017-12-29 21:43:04,650 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=292b14c3-935a-42de-8f2d-07180dd5d19d, id=18, isActive=true, frequency=740988}
2017-12-29 21:43:04,650 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=ee548871-793e-44ba-a2fb-16ef6c899c1d, id=23, isActive=true, frequency=189290}
2017-12-29 21:43:04,650 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=770379b5-e8b7-4d0f-8c80-dc9a5f85cb1e, id=24, isActive=true, frequency=874025}
2017-12-29 21:43:04,651 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=ee0a0b81-6f75-490e-905f-9577f73e6d0e, id=21, isActive=true, frequency=103043}
2017-12-29 21:43:04,651 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=a010f893-e243-4d10-952e-53eedbdf4ba5, id=22, isActive=true, frequency=468139}
2017-12-29 21:43:04,651 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=105e79cf-ce93-433b-aea8-9ea12b5c87a9, id=35, isActive=false, frequency=40853}
2017-12-29 21:43:04,651 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=a237ed6a-b454-4870-a14e-ff0c5324c6f7, id=36, isActive=false, frequency=187933}
2017-12-29 21:43:04,651 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=93a13b55-1df7-4c12-a7a8-e2be610995c9, id=33, isActive=false, frequency=887896}
2017-12-29 21:43:04,651 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=f57ae028-4cb9-4554-919b-df0bb4a51356, id=34, isActive=false, frequency=836649}
2017-12-29 21:43:04,651 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=f7515c67-1d95-4ad9-ac2b-8868ed34f17e, id=39, isActive=false, frequency=529417}
2017-12-29 21:43:04,651 +0100 [main] DEBUG (EntityPrinter.java:106) - More......
2017-12-29 21:43:04,653 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:43:04,653 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:43:04,656 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_, address0_.city as city2_0_, address0_.country as country3_0_, address0_.mailBox as mailBox4_0_, address0_.nr as nr5_0_, address0_.postalCode as postalCo6_0_, address0_.street as street7_0_ from address address0_ where address0_.id not in  (select person1_.addressId from Person person1_)
2017-12-29 21:43:04,659 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 0
2017-12-29 21:43:04,659 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Address#31]
2017-12-29 21:43:04,659 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 1
2017-12-29 21:43:04,659 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Address#32]
2017-12-29 21:43:04,659 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 2
2017-12-29 21:43:04,659 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Address#33]
2017-12-29 21:43:04,660 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 3
2017-12-29 21:43:04,660 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Address#34]
2017-12-29 21:43:04,660 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 4
2017-12-29 21:43:04,660 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Address#35]
2017-12-29 21:43:04,660 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 5
2017-12-29 21:43:04,660 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Address#36]
2017-12-29 21:43:04,660 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 6
2017-12-29 21:43:04,661 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Address#37]
2017-12-29 21:43:04,661 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 7
2017-12-29 21:43:04,661 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Address#38]
2017-12-29 21:43:04,661 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 8
2017-12-29 21:43:04,661 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Address#39]
2017-12-29 21:43:04,661 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 9
2017-12-29 21:43:04,662 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Address#40]
2017-12-29 21:43:04,662 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#31]
2017-12-29 21:43:04,662 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#31]
2017-12-29 21:43:04,662 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#32]
2017-12-29 21:43:04,662 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#32]
2017-12-29 21:43:04,662 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#33]
2017-12-29 21:43:04,662 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#33]
2017-12-29 21:43:04,662 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#34]
2017-12-29 21:43:04,663 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#34]
2017-12-29 21:43:04,663 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#35]
2017-12-29 21:43:04,663 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#35]
2017-12-29 21:43:04,663 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#36]
2017-12-29 21:43:04,663 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#36]
2017-12-29 21:43:04,663 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#37]
2017-12-29 21:43:04,663 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#37]
2017-12-29 21:43:04,663 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#38]
2017-12-29 21:43:04,663 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#38]
2017-12-29 21:43:04,663 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#39]
2017-12-29 21:43:04,664 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#39]
2017-12-29 21:43:04,664 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#40]
2017-12-29 21:43:04,664 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#40]
2017-12-29 21:43:04,664 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:43:04,672 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:43:04,680 +0100 [main] DEBUG (QueryTranslatorImpl.java:282) - parse() - HQL: FROM model.entities.Person
2017-12-29 21:43:04,680 +0100 [main] DEBUG (ErrorCounter.java:95) - throwQueryException() : no errors
2017-12-29 21:43:04,681 +0100 [main] DEBUG (QueryTranslatorImpl.java:305) - --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'FROM'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[IDENT] Node: 'model'
                |  \-[IDENT] Node: 'entities'
                \-[IDENT] Node: 'Person'

2017-12-29 21:43:04,681 +0100 [main] DEBUG (HqlSqlBaseWalker.java:124) - select << begin [level=1, statement=select]
2017-12-29 21:43:04,681 +0100 [main] DEBUG (FromElement.java:147) - FromClause{level=1} : model.entities.Person (<no alias>) -> person0_
2017-12-29 21:43:04,682 +0100 [main] DEBUG (HqlSqlBaseWalker.java:128) - select : finishing up [level=1, statement=select]
2017-12-29 21:43:04,682 +0100 [main] DEBUG (HqlSqlWalker.java:747) - processQuery() :  ( SELECT ( FromClause{level=1} Person person0_ ) )
2017-12-29 21:43:04,682 +0100 [main] DEBUG (HqlSqlWalker.java:1023) - Derived SELECT clause created.
2017-12-29 21:43:04,682 +0100 [main] DEBUG (JoinProcessor.java:192) - Using FROM fragment [Person person0_]
2017-12-29 21:43:04,682 +0100 [main] DEBUG (HqlSqlBaseWalker.java:132) - select >> end [level=1, statement=select]
2017-12-29 21:43:04,682 +0100 [main] DEBUG (QueryTranslatorImpl.java:269) - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Person)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'person0_.id as id1_1_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Person,tableAlias=person0_,origin=null,columns={,className=model.entities.Person}}}
    |  \-[SQL_TOKEN] SqlFragment: 'person0_.addressId as addressI5_1_, person0_.endOfContract as endOfCon2_1_, person0_.firstname as firstnam3_1_, person0_.lastname as lastname4_1_, person0_.remoteId as remoteId6_1_'
    \-[FROM] FromClause: 'FROM' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[person0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'Person person0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Person,tableAlias=person0_,origin=null,columns={,className=model.entities.Person}}

2017-12-29 21:43:04,682 +0100 [main] DEBUG (ErrorCounter.java:95) - throwQueryException() : no errors
2017-12-29 21:43:04,683 +0100 [main] DEBUG (QueryTranslatorImpl.java:251) - HQL: FROM model.entities.Person
2017-12-29 21:43:04,683 +0100 [main] DEBUG (QueryTranslatorImpl.java:252) - SQL: select person0_.id as id1_1_, person0_.addressId as addressI5_1_, person0_.endOfContract as endOfCon2_1_, person0_.firstname as firstnam3_1_, person0_.lastname as lastname4_1_, person0_.remoteId as remoteId6_1_ from Person person0_
2017-12-29 21:43:04,683 +0100 [main] DEBUG (ErrorCounter.java:95) - throwQueryException() : no errors
2017-12-29 21:43:04,683 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select person0_.id as id1_1_, person0_.addressId as addressI5_1_, person0_.endOfContract as endOfCon2_1_, person0_.firstname as firstnam3_1_, person0_.lastname as lastname4_1_, person0_.remoteId as remoteId6_1_ from Person person0_
2017-12-29 21:43:04,684 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 0
2017-12-29 21:43:04,684 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#1]
2017-12-29 21:43:04,686 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 1
2017-12-29 21:43:04,686 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#2]
2017-12-29 21:43:04,687 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 2
2017-12-29 21:43:04,687 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#3]
2017-12-29 21:43:04,687 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 3
2017-12-29 21:43:04,687 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#4]
2017-12-29 21:43:04,687 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 4
2017-12-29 21:43:04,687 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#5]
2017-12-29 21:43:04,688 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 5
2017-12-29 21:43:04,688 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#6]
2017-12-29 21:43:04,688 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 6
2017-12-29 21:43:04,688 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#7]
2017-12-29 21:43:04,688 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 7
2017-12-29 21:43:04,688 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#8]
2017-12-29 21:43:04,688 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 8
2017-12-29 21:43:04,688 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#9]
2017-12-29 21:43:04,689 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 9
2017-12-29 21:43:04,689 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#10]
2017-12-29 21:43:04,689 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 10
2017-12-29 21:43:04,689 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#11]
2017-12-29 21:43:04,689 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 11
2017-12-29 21:43:04,689 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#12]
2017-12-29 21:43:04,689 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 12
2017-12-29 21:43:04,689 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#13]
2017-12-29 21:43:04,690 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 13
2017-12-29 21:43:04,690 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#14]
2017-12-29 21:43:04,690 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 14
2017-12-29 21:43:04,690 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#15]
2017-12-29 21:43:04,691 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 15
2017-12-29 21:43:04,691 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#16]
2017-12-29 21:43:04,691 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 16
2017-12-29 21:43:04,691 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#17]
2017-12-29 21:43:04,691 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 17
2017-12-29 21:43:04,691 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#18]
2017-12-29 21:43:04,691 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 18
2017-12-29 21:43:04,692 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#19]
2017-12-29 21:43:04,692 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 19
2017-12-29 21:43:04,692 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#20]
2017-12-29 21:43:04,692 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 20
2017-12-29 21:43:04,692 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#21]
2017-12-29 21:43:04,692 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 21
2017-12-29 21:43:04,692 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#22]
2017-12-29 21:43:04,693 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 22
2017-12-29 21:43:04,693 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#23]
2017-12-29 21:43:04,693 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 23
2017-12-29 21:43:04,693 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#24]
2017-12-29 21:43:04,693 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 24
2017-12-29 21:43:04,693 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#25]
2017-12-29 21:43:04,693 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 25
2017-12-29 21:43:04,693 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#26]
2017-12-29 21:43:04,694 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 26
2017-12-29 21:43:04,694 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#27]
2017-12-29 21:43:04,694 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 27
2017-12-29 21:43:04,694 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#28]
2017-12-29 21:43:04,694 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 28
2017-12-29 21:43:04,694 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#29]
2017-12-29 21:43:04,694 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 29
2017-12-29 21:43:04,695 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#30]
2017-12-29 21:43:04,695 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#1]
2017-12-29 21:43:04,696 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:04,699 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,700 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,701 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#1]
2017-12-29 21:43:04,701 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#1]
2017-12-29 21:43:04,702 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,702 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#1
2017-12-29 21:43:04,702 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:04,703 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,704 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,704 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#1]
2017-12-29 21:43:04,704 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#1]
2017-12-29 21:43:04,705 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,705 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#1
2017-12-29 21:43:04,705 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#1]
2017-12-29 21:43:04,705 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#2]
2017-12-29 21:43:04,705 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:04,706 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,706 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,707 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#2]
2017-12-29 21:43:04,707 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#2]
2017-12-29 21:43:04,707 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,707 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#2
2017-12-29 21:43:04,707 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:04,708 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,708 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,708 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#2]
2017-12-29 21:43:04,709 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#2]
2017-12-29 21:43:04,709 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,709 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#2
2017-12-29 21:43:04,709 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#2]
2017-12-29 21:43:04,709 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#3]
2017-12-29 21:43:04,709 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:04,710 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,710 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,711 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#3]
2017-12-29 21:43:04,711 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#3]
2017-12-29 21:43:04,711 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,711 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#3
2017-12-29 21:43:04,711 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:04,712 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,712 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,712 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#3]
2017-12-29 21:43:04,713 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#3]
2017-12-29 21:43:04,713 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,713 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#3
2017-12-29 21:43:04,713 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#3]
2017-12-29 21:43:04,713 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#4]
2017-12-29 21:43:04,713 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:04,715 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,715 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,715 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#4]
2017-12-29 21:43:04,716 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#4]
2017-12-29 21:43:04,716 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,716 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#4
2017-12-29 21:43:04,716 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:04,717 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,717 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,718 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#4]
2017-12-29 21:43:04,718 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#4]
2017-12-29 21:43:04,718 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,718 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#4
2017-12-29 21:43:04,718 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#4]
2017-12-29 21:43:04,718 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#5]
2017-12-29 21:43:04,719 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:04,720 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,721 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,721 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#5]
2017-12-29 21:43:04,722 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#5]
2017-12-29 21:43:04,722 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,722 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#5
2017-12-29 21:43:04,722 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:04,723 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,723 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,724 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#5]
2017-12-29 21:43:04,724 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#5]
2017-12-29 21:43:04,724 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,724 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#5
2017-12-29 21:43:04,724 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#5]
2017-12-29 21:43:04,724 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#6]
2017-12-29 21:43:04,725 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:04,725 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,726 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,726 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#6]
2017-12-29 21:43:04,726 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#6]
2017-12-29 21:43:04,726 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,726 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#6
2017-12-29 21:43:04,727 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:04,727 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,728 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,728 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#6]
2017-12-29 21:43:04,728 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#6]
2017-12-29 21:43:04,728 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,728 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#6
2017-12-29 21:43:04,729 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#6]
2017-12-29 21:43:04,729 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#7]
2017-12-29 21:43:04,729 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:04,730 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,730 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,730 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#7]
2017-12-29 21:43:04,731 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#7]
2017-12-29 21:43:04,731 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,731 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#7
2017-12-29 21:43:04,731 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:04,733 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,733 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,734 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#7]
2017-12-29 21:43:04,734 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#7]
2017-12-29 21:43:04,734 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,734 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#7
2017-12-29 21:43:04,734 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#7]
2017-12-29 21:43:04,735 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#8]
2017-12-29 21:43:04,735 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:04,735 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,735 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,736 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#8]
2017-12-29 21:43:04,736 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#8]
2017-12-29 21:43:04,736 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,737 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#8
2017-12-29 21:43:04,737 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:04,738 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,738 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,738 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#8]
2017-12-29 21:43:04,738 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#8]
2017-12-29 21:43:04,738 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,739 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#8
2017-12-29 21:43:04,739 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#8]
2017-12-29 21:43:04,739 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#9]
2017-12-29 21:43:04,739 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:04,740 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,740 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,740 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#9]
2017-12-29 21:43:04,741 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#9]
2017-12-29 21:43:04,741 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,741 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#9
2017-12-29 21:43:04,741 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:04,742 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,742 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,742 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#9]
2017-12-29 21:43:04,742 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#9]
2017-12-29 21:43:04,743 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,743 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#9
2017-12-29 21:43:04,743 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#9]
2017-12-29 21:43:04,743 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#10]
2017-12-29 21:43:04,743 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:04,744 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,744 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,744 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#10]
2017-12-29 21:43:04,745 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#10]
2017-12-29 21:43:04,745 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,745 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#10
2017-12-29 21:43:04,745 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:04,746 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,746 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,746 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#10]
2017-12-29 21:43:04,747 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#10]
2017-12-29 21:43:04,747 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,747 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#10
2017-12-29 21:43:04,747 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#10]
2017-12-29 21:43:04,747 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#11]
2017-12-29 21:43:04,747 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:04,748 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,749 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,749 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#11]
2017-12-29 21:43:04,749 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#11]
2017-12-29 21:43:04,749 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,749 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#11
2017-12-29 21:43:04,750 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:04,750 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,751 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,751 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#11]
2017-12-29 21:43:04,751 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#11]
2017-12-29 21:43:04,751 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,751 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#11
2017-12-29 21:43:04,752 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#11]
2017-12-29 21:43:04,752 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#12]
2017-12-29 21:43:04,752 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:04,752 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,753 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,753 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#12]
2017-12-29 21:43:04,753 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#12]
2017-12-29 21:43:04,753 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,753 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#12
2017-12-29 21:43:04,754 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:04,754 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,755 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,755 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#12]
2017-12-29 21:43:04,755 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#12]
2017-12-29 21:43:04,755 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,755 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#12
2017-12-29 21:43:04,756 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#12]
2017-12-29 21:43:04,756 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#13]
2017-12-29 21:43:04,756 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:04,756 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,757 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,757 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#13]
2017-12-29 21:43:04,757 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#13]
2017-12-29 21:43:04,758 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,758 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#13
2017-12-29 21:43:04,758 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:04,759 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,759 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,759 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#13]
2017-12-29 21:43:04,759 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#13]
2017-12-29 21:43:04,760 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,760 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#13
2017-12-29 21:43:04,760 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#13]
2017-12-29 21:43:04,760 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#14]
2017-12-29 21:43:04,760 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:04,761 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,761 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,762 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#14]
2017-12-29 21:43:04,762 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#14]
2017-12-29 21:43:04,762 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,762 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#14
2017-12-29 21:43:04,763 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:04,764 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,764 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,764 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#14]
2017-12-29 21:43:04,764 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#14]
2017-12-29 21:43:04,764 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,765 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#14
2017-12-29 21:43:04,765 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#14]
2017-12-29 21:43:04,765 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#15]
2017-12-29 21:43:04,765 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:04,766 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,766 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,766 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#15]
2017-12-29 21:43:04,766 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#15]
2017-12-29 21:43:04,766 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,767 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#15
2017-12-29 21:43:04,767 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:04,768 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,768 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,768 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#15]
2017-12-29 21:43:04,768 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#15]
2017-12-29 21:43:04,769 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,769 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#15
2017-12-29 21:43:04,769 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#15]
2017-12-29 21:43:04,769 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#16]
2017-12-29 21:43:04,769 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:04,770 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,770 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,770 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#16]
2017-12-29 21:43:04,771 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#16]
2017-12-29 21:43:04,771 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,771 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#16
2017-12-29 21:43:04,771 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:04,772 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,772 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,773 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#16]
2017-12-29 21:43:04,773 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#16]
2017-12-29 21:43:04,773 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,773 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#16
2017-12-29 21:43:04,773 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#16]
2017-12-29 21:43:04,774 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#17]
2017-12-29 21:43:04,774 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:04,781 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,781 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,782 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#17]
2017-12-29 21:43:04,783 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#17]
2017-12-29 21:43:04,783 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,783 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#17
2017-12-29 21:43:04,784 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:04,785 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,785 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,786 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#17]
2017-12-29 21:43:04,786 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#17]
2017-12-29 21:43:04,786 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,786 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#17
2017-12-29 21:43:04,786 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#17]
2017-12-29 21:43:04,786 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#18]
2017-12-29 21:43:04,786 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:04,799 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,799 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,800 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#18]
2017-12-29 21:43:04,800 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#18]
2017-12-29 21:43:04,800 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,800 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#18
2017-12-29 21:43:04,801 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:04,802 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,803 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,803 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#18]
2017-12-29 21:43:04,804 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#18]
2017-12-29 21:43:04,804 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,804 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#18
2017-12-29 21:43:04,805 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#18]
2017-12-29 21:43:04,805 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#19]
2017-12-29 21:43:04,805 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:04,806 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,807 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,808 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#19]
2017-12-29 21:43:04,809 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#19]
2017-12-29 21:43:04,809 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,809 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#19
2017-12-29 21:43:04,810 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:04,811 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,811 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,812 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#19]
2017-12-29 21:43:04,812 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#19]
2017-12-29 21:43:04,812 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,812 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#19
2017-12-29 21:43:04,813 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#19]
2017-12-29 21:43:04,813 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#20]
2017-12-29 21:43:04,813 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:04,820 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,820 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,820 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#20]
2017-12-29 21:43:04,821 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#20]
2017-12-29 21:43:04,822 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,823 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#20
2017-12-29 21:43:04,823 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:04,824 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,824 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,824 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#20]
2017-12-29 21:43:04,825 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#20]
2017-12-29 21:43:04,825 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,825 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#20
2017-12-29 21:43:04,826 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#20]
2017-12-29 21:43:04,826 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#21]
2017-12-29 21:43:04,826 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:04,827 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,827 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,827 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#21]
2017-12-29 21:43:04,828 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#21]
2017-12-29 21:43:04,828 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,828 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#21
2017-12-29 21:43:04,828 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:04,830 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,830 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,830 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#21]
2017-12-29 21:43:04,830 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#21]
2017-12-29 21:43:04,830 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,831 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#21
2017-12-29 21:43:04,831 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#21]
2017-12-29 21:43:04,831 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#22]
2017-12-29 21:43:04,831 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:04,832 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,832 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,834 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#22]
2017-12-29 21:43:04,835 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#22]
2017-12-29 21:43:04,835 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,835 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#22
2017-12-29 21:43:04,836 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:04,837 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,837 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,838 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#22]
2017-12-29 21:43:04,839 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#22]
2017-12-29 21:43:04,844 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,845 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#22
2017-12-29 21:43:04,845 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#22]
2017-12-29 21:43:04,845 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#23]
2017-12-29 21:43:04,846 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:04,846 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,847 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,847 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#23]
2017-12-29 21:43:04,847 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#23]
2017-12-29 21:43:04,848 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,848 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#23
2017-12-29 21:43:04,848 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:04,849 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,850 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,850 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#23]
2017-12-29 21:43:04,850 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#23]
2017-12-29 21:43:04,851 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,851 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#23
2017-12-29 21:43:04,851 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#23]
2017-12-29 21:43:04,851 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#24]
2017-12-29 21:43:04,852 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:04,854 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,854 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,855 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#24]
2017-12-29 21:43:04,855 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#24]
2017-12-29 21:43:04,855 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,855 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#24
2017-12-29 21:43:04,856 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:04,856 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,857 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,858 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#24]
2017-12-29 21:43:04,858 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#24]
2017-12-29 21:43:04,858 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,859 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#24
2017-12-29 21:43:04,859 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#24]
2017-12-29 21:43:04,859 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#25]
2017-12-29 21:43:04,859 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:04,860 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,860 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,860 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#25]
2017-12-29 21:43:04,862 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#25]
2017-12-29 21:43:04,862 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,865 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#25
2017-12-29 21:43:04,866 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:04,866 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,867 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,867 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#25]
2017-12-29 21:43:04,867 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#25]
2017-12-29 21:43:04,867 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,867 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#25
2017-12-29 21:43:04,867 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#25]
2017-12-29 21:43:04,867 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#26]
2017-12-29 21:43:04,868 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:04,869 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,869 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,870 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#26]
2017-12-29 21:43:04,870 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#26]
2017-12-29 21:43:04,870 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,870 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#26
2017-12-29 21:43:04,870 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:04,871 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,871 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,871 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#26]
2017-12-29 21:43:04,871 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#26]
2017-12-29 21:43:04,872 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,872 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#26
2017-12-29 21:43:04,872 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#26]
2017-12-29 21:43:04,872 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#27]
2017-12-29 21:43:04,872 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:04,873 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,873 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,873 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#27]
2017-12-29 21:43:04,873 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#27]
2017-12-29 21:43:04,873 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,874 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#27
2017-12-29 21:43:04,874 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:04,875 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,875 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,875 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#27]
2017-12-29 21:43:04,875 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#27]
2017-12-29 21:43:04,876 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,876 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#27
2017-12-29 21:43:04,876 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#27]
2017-12-29 21:43:04,876 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#28]
2017-12-29 21:43:04,876 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:04,877 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,877 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,877 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#28]
2017-12-29 21:43:04,877 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#28]
2017-12-29 21:43:04,877 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,878 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#28
2017-12-29 21:43:04,878 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:04,878 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,879 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,879 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#28]
2017-12-29 21:43:04,879 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#28]
2017-12-29 21:43:04,879 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,879 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#28
2017-12-29 21:43:04,879 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#28]
2017-12-29 21:43:04,880 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#29]
2017-12-29 21:43:04,880 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:04,881 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,881 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,881 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#29]
2017-12-29 21:43:04,881 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#29]
2017-12-29 21:43:04,881 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,881 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#29
2017-12-29 21:43:04,882 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:04,882 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,882 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,883 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#29]
2017-12-29 21:43:04,883 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#29]
2017-12-29 21:43:04,883 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,883 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#29
2017-12-29 21:43:04,883 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#29]
2017-12-29 21:43:04,883 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#30]
2017-12-29 21:43:04,884 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:04,884 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,885 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,886 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#30]
2017-12-29 21:43:04,886 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#30]
2017-12-29 21:43:04,886 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,886 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#30
2017-12-29 21:43:04,886 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:04,887 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:04,887 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:04,888 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#30]
2017-12-29 21:43:04,888 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#30]
2017-12-29 21:43:04,888 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:04,888 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#30
2017-12-29 21:43:04,888 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#30]
2017-12-29 21:43:04,889 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:43:04,889 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:43:04,892 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:43:04,894 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 90 objects
2017-12-29 21:43:04,894 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:43:04,894 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:43:04,894 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=29, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=29}
2017-12-29 21:43:04,894 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=30, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=30}
2017-12-29 21:43:04,895 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=27, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=27}
2017-12-29 21:43:04,895 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=28, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=28}
2017-12-29 21:43:04,895 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Richard, address=model.entities.Address#30, id=30, remote=model.entities.Remote#30, endOfContract=2017-12-29 00:00:00.0, lastname=Wheeler}
2017-12-29 21:43:04,895 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Sam, address=model.entities.Address#23, id=23, remote=model.entities.Remote#23, endOfContract=2017-12-29 00:00:00.0, lastname=Jackson}
2017-12-29 21:43:04,895 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Marty, address=model.entities.Address#22, id=22, remote=model.entities.Remote#22, endOfContract=2017-12-29 00:00:00.0, lastname=Franco}
2017-12-29 21:43:04,895 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Thomas, address=model.entities.Address#25, id=25, remote=model.entities.Remote#25, endOfContract=2017-12-29 00:00:00.0, lastname=Dotson}
2017-12-29 21:43:04,895 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Jeffrey, address=model.entities.Address#24, id=24, remote=model.entities.Remote#24, endOfContract=2017-12-29 00:00:00.0, lastname=Suarez}
2017-12-29 21:43:04,895 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Chuck, address=model.entities.Address#27, id=27, remote=model.entities.Remote#27, endOfContract=2017-12-29 00:00:00.0, lastname=Castillo}
2017-12-29 21:43:04,896 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Mickey, address=model.entities.Address#26, id=26, remote=model.entities.Remote#26, endOfContract=2017-12-29 00:00:00.0, lastname=Cruz}
2017-12-29 21:43:04,896 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Michael, address=model.entities.Address#29, id=29, remote=model.entities.Remote#29, endOfContract=2017-12-29 00:00:00.0, lastname=Gross}
2017-12-29 21:43:04,896 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Sierra, address=model.entities.Address#28, id=28, remote=model.entities.Remote#28, endOfContract=2017-12-29 00:00:00.0, lastname=Schneider}
2017-12-29 21:43:04,896 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Janet, address=model.entities.Address#15, id=15, remote=model.entities.Remote#15, endOfContract=2017-12-29 00:00:00.0, lastname=Abbott}
2017-12-29 21:43:04,896 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=George, address=model.entities.Address#14, id=14, remote=model.entities.Remote#14, endOfContract=2017-12-29 00:00:00.0, lastname=Suarez}
2017-12-29 21:43:04,896 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Shane, address=model.entities.Address#17, id=17, remote=model.entities.Remote#17, endOfContract=2017-12-29 00:00:00.0, lastname=Heath}
2017-12-29 21:43:04,896 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Steven, address=model.entities.Address#16, id=16, remote=model.entities.Remote#16, endOfContract=2017-12-29 00:00:00.0, lastname=Marshall}
2017-12-29 21:43:04,896 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Kaitlyn, address=model.entities.Address#19, id=19, remote=model.entities.Remote#19, endOfContract=2017-12-29 00:00:00.0, lastname=Wilder}
2017-12-29 21:43:04,896 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Unborn, address=model.entities.Address#18, id=18, remote=model.entities.Remote#18, endOfContract=2017-12-29 00:00:00.0, lastname=Vega}
2017-12-29 21:43:04,897 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Alisha, address=model.entities.Address#21, id=21, remote=model.entities.Remote#21, endOfContract=2017-12-29 00:00:00.0, lastname=Dunn}
2017-12-29 21:43:04,897 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Donald, address=model.entities.Address#20, id=20, remote=model.entities.Remote#20, endOfContract=2017-12-29 00:00:00.0, lastname=Morgan}
2017-12-29 21:43:04,897 +0100 [main] DEBUG (EntityPrinter.java:106) - More......
2017-12-29 21:43:04,897 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:43:04,897 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:43:10,454 +0100 [AWT-EventQueue-0] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:43:10,455 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select person0_.id as id1_1_, person0_.addressId as addressI5_1_, person0_.endOfContract as endOfCon2_1_, person0_.firstname as firstnam3_1_, person0_.lastname as lastname4_1_, person0_.remoteId as remoteId6_1_ from Person person0_
2017-12-29 21:43:10,456 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 0
2017-12-29 21:43:10,456 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#1]
2017-12-29 21:43:10,456 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 1
2017-12-29 21:43:10,456 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#2]
2017-12-29 21:43:10,457 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 2
2017-12-29 21:43:10,457 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#3]
2017-12-29 21:43:10,457 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 3
2017-12-29 21:43:10,457 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#4]
2017-12-29 21:43:10,457 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 4
2017-12-29 21:43:10,457 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#5]
2017-12-29 21:43:10,458 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 5
2017-12-29 21:43:10,458 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#6]
2017-12-29 21:43:10,458 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 6
2017-12-29 21:43:10,458 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#7]
2017-12-29 21:43:10,458 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 7
2017-12-29 21:43:10,458 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#8]
2017-12-29 21:43:10,458 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 8
2017-12-29 21:43:10,458 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#9]
2017-12-29 21:43:10,459 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 9
2017-12-29 21:43:10,459 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#10]
2017-12-29 21:43:10,459 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 10
2017-12-29 21:43:10,459 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#11]
2017-12-29 21:43:10,459 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 11
2017-12-29 21:43:10,459 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#12]
2017-12-29 21:43:10,460 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 12
2017-12-29 21:43:10,460 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#13]
2017-12-29 21:43:10,460 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 13
2017-12-29 21:43:10,460 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#14]
2017-12-29 21:43:10,460 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 14
2017-12-29 21:43:10,460 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#15]
2017-12-29 21:43:10,460 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 15
2017-12-29 21:43:10,461 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#16]
2017-12-29 21:43:10,461 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 16
2017-12-29 21:43:10,461 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#17]
2017-12-29 21:43:10,461 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 17
2017-12-29 21:43:10,461 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#18]
2017-12-29 21:43:10,461 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 18
2017-12-29 21:43:10,461 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#19]
2017-12-29 21:43:10,462 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 19
2017-12-29 21:43:10,462 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#20]
2017-12-29 21:43:10,462 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 20
2017-12-29 21:43:10,462 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#21]
2017-12-29 21:43:10,463 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 21
2017-12-29 21:43:10,463 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#22]
2017-12-29 21:43:10,463 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 22
2017-12-29 21:43:10,463 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#23]
2017-12-29 21:43:10,463 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 23
2017-12-29 21:43:10,464 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#24]
2017-12-29 21:43:10,464 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 24
2017-12-29 21:43:10,464 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#25]
2017-12-29 21:43:10,464 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 25
2017-12-29 21:43:10,464 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#26]
2017-12-29 21:43:10,464 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 26
2017-12-29 21:43:10,465 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#27]
2017-12-29 21:43:10,465 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 27
2017-12-29 21:43:10,465 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#28]
2017-12-29 21:43:10,465 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 28
2017-12-29 21:43:10,465 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#29]
2017-12-29 21:43:10,465 +0100 [AWT-EventQueue-0] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 29
2017-12-29 21:43:10,465 +0100 [AWT-EventQueue-0] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#30]
2017-12-29 21:43:10,465 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#1]
2017-12-29 21:43:10,466 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:10,466 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,467 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,467 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#1]
2017-12-29 21:43:10,467 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#1]
2017-12-29 21:43:10,467 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,468 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#1
2017-12-29 21:43:10,468 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:10,469 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,470 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,470 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#1]
2017-12-29 21:43:10,470 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#1]
2017-12-29 21:43:10,470 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,471 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#1
2017-12-29 21:43:10,471 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#1]
2017-12-29 21:43:10,471 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#2]
2017-12-29 21:43:10,471 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:10,472 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,472 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,473 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#2]
2017-12-29 21:43:10,473 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#2]
2017-12-29 21:43:10,473 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,473 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#2
2017-12-29 21:43:10,473 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:10,474 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,474 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,474 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#2]
2017-12-29 21:43:10,475 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#2]
2017-12-29 21:43:10,475 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,475 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#2
2017-12-29 21:43:10,475 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#2]
2017-12-29 21:43:10,475 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#3]
2017-12-29 21:43:10,475 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:10,476 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,476 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,476 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#3]
2017-12-29 21:43:10,476 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#3]
2017-12-29 21:43:10,476 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,477 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#3
2017-12-29 21:43:10,477 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:10,477 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,477 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,477 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#3]
2017-12-29 21:43:10,478 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#3]
2017-12-29 21:43:10,478 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,478 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#3
2017-12-29 21:43:10,478 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#3]
2017-12-29 21:43:10,478 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#4]
2017-12-29 21:43:10,478 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:10,479 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,479 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,479 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#4]
2017-12-29 21:43:10,479 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#4]
2017-12-29 21:43:10,480 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,480 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#4
2017-12-29 21:43:10,480 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:10,480 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,481 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,481 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#4]
2017-12-29 21:43:10,481 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#4]
2017-12-29 21:43:10,481 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,481 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#4
2017-12-29 21:43:10,482 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#4]
2017-12-29 21:43:10,482 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#5]
2017-12-29 21:43:10,482 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:10,482 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,482 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,483 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#5]
2017-12-29 21:43:10,483 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#5]
2017-12-29 21:43:10,483 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,483 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#5
2017-12-29 21:43:10,483 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:10,484 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,484 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,484 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#5]
2017-12-29 21:43:10,484 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#5]
2017-12-29 21:43:10,484 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,485 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#5
2017-12-29 21:43:10,485 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#5]
2017-12-29 21:43:10,485 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#6]
2017-12-29 21:43:10,485 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:10,485 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,486 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,486 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#6]
2017-12-29 21:43:10,486 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#6]
2017-12-29 21:43:10,486 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,486 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#6
2017-12-29 21:43:10,486 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:10,487 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,487 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,487 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#6]
2017-12-29 21:43:10,487 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#6]
2017-12-29 21:43:10,487 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,487 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#6
2017-12-29 21:43:10,488 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#6]
2017-12-29 21:43:10,488 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#7]
2017-12-29 21:43:10,488 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:10,488 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,489 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,489 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#7]
2017-12-29 21:43:10,489 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#7]
2017-12-29 21:43:10,489 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,489 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#7
2017-12-29 21:43:10,490 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:10,490 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,490 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,491 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#7]
2017-12-29 21:43:10,491 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#7]
2017-12-29 21:43:10,491 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,491 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#7
2017-12-29 21:43:10,491 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#7]
2017-12-29 21:43:10,491 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#8]
2017-12-29 21:43:10,491 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:10,492 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,492 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,492 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#8]
2017-12-29 21:43:10,493 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#8]
2017-12-29 21:43:10,493 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,493 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#8
2017-12-29 21:43:10,493 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:10,494 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,494 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,494 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#8]
2017-12-29 21:43:10,494 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#8]
2017-12-29 21:43:10,494 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,494 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#8
2017-12-29 21:43:10,494 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#8]
2017-12-29 21:43:10,495 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#9]
2017-12-29 21:43:10,495 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:10,497 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,498 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,498 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#9]
2017-12-29 21:43:10,498 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#9]
2017-12-29 21:43:10,498 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,498 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#9
2017-12-29 21:43:10,498 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:10,499 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,499 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,499 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#9]
2017-12-29 21:43:10,499 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#9]
2017-12-29 21:43:10,500 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,500 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#9
2017-12-29 21:43:10,500 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#9]
2017-12-29 21:43:10,500 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#10]
2017-12-29 21:43:10,500 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:10,501 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,501 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,501 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#10]
2017-12-29 21:43:10,501 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#10]
2017-12-29 21:43:10,502 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,502 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#10
2017-12-29 21:43:10,502 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:10,502 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,502 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,503 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#10]
2017-12-29 21:43:10,503 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#10]
2017-12-29 21:43:10,503 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,503 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#10
2017-12-29 21:43:10,503 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#10]
2017-12-29 21:43:10,503 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#11]
2017-12-29 21:43:10,503 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:10,504 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,504 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,504 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#11]
2017-12-29 21:43:10,505 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#11]
2017-12-29 21:43:10,505 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,505 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#11
2017-12-29 21:43:10,505 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:10,506 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,506 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,506 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#11]
2017-12-29 21:43:10,506 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#11]
2017-12-29 21:43:10,507 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,507 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#11
2017-12-29 21:43:10,507 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#11]
2017-12-29 21:43:10,507 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#12]
2017-12-29 21:43:10,507 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:10,508 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,508 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,508 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#12]
2017-12-29 21:43:10,509 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#12]
2017-12-29 21:43:10,509 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,509 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#12
2017-12-29 21:43:10,509 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:10,510 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,510 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,510 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#12]
2017-12-29 21:43:10,510 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#12]
2017-12-29 21:43:10,510 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,510 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#12
2017-12-29 21:43:10,510 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#12]
2017-12-29 21:43:10,510 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#13]
2017-12-29 21:43:10,511 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:10,511 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,511 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,512 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#13]
2017-12-29 21:43:10,512 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#13]
2017-12-29 21:43:10,512 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,512 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#13
2017-12-29 21:43:10,512 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:10,513 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,513 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,513 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#13]
2017-12-29 21:43:10,514 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#13]
2017-12-29 21:43:10,514 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,514 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#13
2017-12-29 21:43:10,514 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#13]
2017-12-29 21:43:10,514 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#14]
2017-12-29 21:43:10,514 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:10,515 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,515 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,516 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#14]
2017-12-29 21:43:10,516 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#14]
2017-12-29 21:43:10,516 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,516 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#14
2017-12-29 21:43:10,516 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:10,517 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,517 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,517 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#14]
2017-12-29 21:43:10,517 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#14]
2017-12-29 21:43:10,517 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,517 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#14
2017-12-29 21:43:10,517 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#14]
2017-12-29 21:43:10,517 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#15]
2017-12-29 21:43:10,518 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:10,518 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,518 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,518 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#15]
2017-12-29 21:43:10,519 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#15]
2017-12-29 21:43:10,519 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,519 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#15
2017-12-29 21:43:10,519 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:10,520 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,520 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,520 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#15]
2017-12-29 21:43:10,520 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#15]
2017-12-29 21:43:10,521 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,521 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#15
2017-12-29 21:43:10,521 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#15]
2017-12-29 21:43:10,521 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#16]
2017-12-29 21:43:10,521 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:10,522 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,522 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,522 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#16]
2017-12-29 21:43:10,522 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#16]
2017-12-29 21:43:10,522 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,523 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#16
2017-12-29 21:43:10,523 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:10,523 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,523 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,524 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#16]
2017-12-29 21:43:10,524 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#16]
2017-12-29 21:43:10,524 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,524 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#16
2017-12-29 21:43:10,524 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#16]
2017-12-29 21:43:10,524 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#17]
2017-12-29 21:43:10,524 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:10,525 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,525 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,525 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#17]
2017-12-29 21:43:10,525 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#17]
2017-12-29 21:43:10,525 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,525 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#17
2017-12-29 21:43:10,526 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:10,526 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,527 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,527 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#17]
2017-12-29 21:43:10,527 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#17]
2017-12-29 21:43:10,527 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,528 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#17
2017-12-29 21:43:10,528 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#17]
2017-12-29 21:43:10,528 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#18]
2017-12-29 21:43:10,528 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:10,529 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,529 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,529 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#18]
2017-12-29 21:43:10,530 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#18]
2017-12-29 21:43:10,530 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,530 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#18
2017-12-29 21:43:10,530 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:10,531 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,531 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,532 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#18]
2017-12-29 21:43:10,532 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#18]
2017-12-29 21:43:10,532 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,532 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#18
2017-12-29 21:43:10,532 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#18]
2017-12-29 21:43:10,533 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#19]
2017-12-29 21:43:10,533 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:10,533 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,533 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,534 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#19]
2017-12-29 21:43:10,534 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#19]
2017-12-29 21:43:10,534 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,534 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#19
2017-12-29 21:43:10,534 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:10,535 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,535 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,535 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#19]
2017-12-29 21:43:10,536 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#19]
2017-12-29 21:43:10,536 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,536 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#19
2017-12-29 21:43:10,536 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#19]
2017-12-29 21:43:10,536 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#20]
2017-12-29 21:43:10,536 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:10,537 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,537 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,538 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#20]
2017-12-29 21:43:10,538 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#20]
2017-12-29 21:43:10,538 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,538 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#20
2017-12-29 21:43:10,538 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:10,539 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,539 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,539 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#20]
2017-12-29 21:43:10,539 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#20]
2017-12-29 21:43:10,540 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,540 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#20
2017-12-29 21:43:10,540 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#20]
2017-12-29 21:43:10,540 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#21]
2017-12-29 21:43:10,540 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:10,540 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,541 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,541 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#21]
2017-12-29 21:43:10,541 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#21]
2017-12-29 21:43:10,541 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,541 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#21
2017-12-29 21:43:10,542 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:10,542 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,543 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,543 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#21]
2017-12-29 21:43:10,543 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#21]
2017-12-29 21:43:10,543 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,543 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#21
2017-12-29 21:43:10,543 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#21]
2017-12-29 21:43:10,543 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#22]
2017-12-29 21:43:10,544 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:10,544 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,545 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,545 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#22]
2017-12-29 21:43:10,545 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#22]
2017-12-29 21:43:10,545 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,545 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#22
2017-12-29 21:43:10,546 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:10,546 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,547 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,547 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#22]
2017-12-29 21:43:10,547 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#22]
2017-12-29 21:43:10,547 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,547 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#22
2017-12-29 21:43:10,548 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#22]
2017-12-29 21:43:10,548 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#23]
2017-12-29 21:43:10,548 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:10,549 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,549 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,549 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#23]
2017-12-29 21:43:10,549 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#23]
2017-12-29 21:43:10,550 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,550 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#23
2017-12-29 21:43:10,550 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:10,551 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,551 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,551 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#23]
2017-12-29 21:43:10,552 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#23]
2017-12-29 21:43:10,552 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,552 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#23
2017-12-29 21:43:10,552 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#23]
2017-12-29 21:43:10,552 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#24]
2017-12-29 21:43:10,552 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:10,553 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,553 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,553 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#24]
2017-12-29 21:43:10,553 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#24]
2017-12-29 21:43:10,554 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,554 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#24
2017-12-29 21:43:10,554 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:10,555 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,555 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,555 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#24]
2017-12-29 21:43:10,555 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#24]
2017-12-29 21:43:10,556 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,556 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#24
2017-12-29 21:43:10,556 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#24]
2017-12-29 21:43:10,556 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#25]
2017-12-29 21:43:10,556 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:10,557 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,557 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,558 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#25]
2017-12-29 21:43:10,558 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#25]
2017-12-29 21:43:10,558 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,558 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#25
2017-12-29 21:43:10,558 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:10,559 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,560 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,560 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#25]
2017-12-29 21:43:10,560 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#25]
2017-12-29 21:43:10,560 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,561 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#25
2017-12-29 21:43:10,561 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#25]
2017-12-29 21:43:10,561 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#26]
2017-12-29 21:43:10,561 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:10,562 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,562 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,562 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#26]
2017-12-29 21:43:10,562 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#26]
2017-12-29 21:43:10,562 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,563 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#26
2017-12-29 21:43:10,563 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:10,563 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,564 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,564 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#26]
2017-12-29 21:43:10,564 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#26]
2017-12-29 21:43:10,564 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,564 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#26
2017-12-29 21:43:10,565 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#26]
2017-12-29 21:43:10,566 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#27]
2017-12-29 21:43:10,567 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:10,567 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,568 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,568 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#27]
2017-12-29 21:43:10,568 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#27]
2017-12-29 21:43:10,569 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,569 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#27
2017-12-29 21:43:10,569 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:10,570 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,570 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,571 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#27]
2017-12-29 21:43:10,571 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#27]
2017-12-29 21:43:10,571 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,571 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#27
2017-12-29 21:43:10,571 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#27]
2017-12-29 21:43:10,571 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#28]
2017-12-29 21:43:10,572 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:10,572 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,572 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,573 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#28]
2017-12-29 21:43:10,573 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#28]
2017-12-29 21:43:10,573 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,573 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#28
2017-12-29 21:43:10,574 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:10,574 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,574 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,575 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#28]
2017-12-29 21:43:10,575 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#28]
2017-12-29 21:43:10,575 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,575 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#28
2017-12-29 21:43:10,576 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#28]
2017-12-29 21:43:10,576 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#29]
2017-12-29 21:43:10,576 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:10,576 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,576 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,577 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#29]
2017-12-29 21:43:10,577 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#29]
2017-12-29 21:43:10,577 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,577 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#29
2017-12-29 21:43:10,577 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:10,578 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,578 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,578 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#29]
2017-12-29 21:43:10,578 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#29]
2017-12-29 21:43:10,578 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,578 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#29
2017-12-29 21:43:10,579 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#29]
2017-12-29 21:43:10,579 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#30]
2017-12-29 21:43:10,579 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:43:10,579 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,580 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,580 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#30]
2017-12-29 21:43:10,580 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#30]
2017-12-29 21:43:10,580 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,580 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#30
2017-12-29 21:43:10,580 +0100 [AWT-EventQueue-0] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:43:10,581 +0100 [AWT-EventQueue-0] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:43:10,581 +0100 [AWT-EventQueue-0] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:43:10,581 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#30]
2017-12-29 21:43:10,581 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#30]
2017-12-29 21:43:10,582 +0100 [AWT-EventQueue-0] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:43:10,582 +0100 [AWT-EventQueue-0] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#30
2017-12-29 21:43:10,582 +0100 [AWT-EventQueue-0] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#30]
2017-12-29 21:43:10,582 +0100 [AWT-EventQueue-0] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:43:10,582 +0100 [AWT-EventQueue-0] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:43:10,584 +0100 [AWT-EventQueue-0] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:43:10,586 +0100 [AWT-EventQueue-0] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 90 objects
2017-12-29 21:43:10,586 +0100 [AWT-EventQueue-0] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:43:10,586 +0100 [AWT-EventQueue-0] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:43:10,586 +0100 [AWT-EventQueue-0] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=29, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=29}
2017-12-29 21:43:10,586 +0100 [AWT-EventQueue-0] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=30, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=30}
2017-12-29 21:43:10,586 +0100 [AWT-EventQueue-0] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=27, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=27}
2017-12-29 21:43:10,587 +0100 [AWT-EventQueue-0] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=28, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=28}
2017-12-29 21:43:10,587 +0100 [AWT-EventQueue-0] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Richard, address=model.entities.Address#30, id=30, remote=model.entities.Remote#30, endOfContract=2017-12-29 00:00:00.0, lastname=Wheeler}
2017-12-29 21:43:10,587 +0100 [AWT-EventQueue-0] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Sam, address=model.entities.Address#23, id=23, remote=model.entities.Remote#23, endOfContract=2017-12-29 00:00:00.0, lastname=Jackson}
2017-12-29 21:43:10,587 +0100 [AWT-EventQueue-0] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Marty, address=model.entities.Address#22, id=22, remote=model.entities.Remote#22, endOfContract=2017-12-29 00:00:00.0, lastname=Franco}
2017-12-29 21:43:10,587 +0100 [AWT-EventQueue-0] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Thomas, address=model.entities.Address#25, id=25, remote=model.entities.Remote#25, endOfContract=2017-12-29 00:00:00.0, lastname=Dotson}
2017-12-29 21:43:10,587 +0100 [AWT-EventQueue-0] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Jeffrey, address=model.entities.Address#24, id=24, remote=model.entities.Remote#24, endOfContract=2017-12-29 00:00:00.0, lastname=Suarez}
2017-12-29 21:43:10,588 +0100 [AWT-EventQueue-0] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Chuck, address=model.entities.Address#27, id=27, remote=model.entities.Remote#27, endOfContract=2017-12-29 00:00:00.0, lastname=Castillo}
2017-12-29 21:43:10,588 +0100 [AWT-EventQueue-0] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Mickey, address=model.entities.Address#26, id=26, remote=model.entities.Remote#26, endOfContract=2017-12-29 00:00:00.0, lastname=Cruz}
2017-12-29 21:43:10,588 +0100 [AWT-EventQueue-0] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Michael, address=model.entities.Address#29, id=29, remote=model.entities.Remote#29, endOfContract=2017-12-29 00:00:00.0, lastname=Gross}
2017-12-29 21:43:10,588 +0100 [AWT-EventQueue-0] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Sierra, address=model.entities.Address#28, id=28, remote=model.entities.Remote#28, endOfContract=2017-12-29 00:00:00.0, lastname=Schneider}
2017-12-29 21:43:10,588 +0100 [AWT-EventQueue-0] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Janet, address=model.entities.Address#15, id=15, remote=model.entities.Remote#15, endOfContract=2017-12-29 00:00:00.0, lastname=Abbott}
2017-12-29 21:43:10,588 +0100 [AWT-EventQueue-0] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=George, address=model.entities.Address#14, id=14, remote=model.entities.Remote#14, endOfContract=2017-12-29 00:00:00.0, lastname=Suarez}
2017-12-29 21:43:10,588 +0100 [AWT-EventQueue-0] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Shane, address=model.entities.Address#17, id=17, remote=model.entities.Remote#17, endOfContract=2017-12-29 00:00:00.0, lastname=Heath}
2017-12-29 21:43:10,589 +0100 [AWT-EventQueue-0] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Steven, address=model.entities.Address#16, id=16, remote=model.entities.Remote#16, endOfContract=2017-12-29 00:00:00.0, lastname=Marshall}
2017-12-29 21:43:10,589 +0100 [AWT-EventQueue-0] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Kaitlyn, address=model.entities.Address#19, id=19, remote=model.entities.Remote#19, endOfContract=2017-12-29 00:00:00.0, lastname=Wilder}
2017-12-29 21:43:10,589 +0100 [AWT-EventQueue-0] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Unborn, address=model.entities.Address#18, id=18, remote=model.entities.Remote#18, endOfContract=2017-12-29 00:00:00.0, lastname=Vega}
2017-12-29 21:43:10,589 +0100 [AWT-EventQueue-0] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Alisha, address=model.entities.Address#21, id=21, remote=model.entities.Remote#21, endOfContract=2017-12-29 00:00:00.0, lastname=Dunn}
2017-12-29 21:43:10,589 +0100 [AWT-EventQueue-0] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Donald, address=model.entities.Address#20, id=20, remote=model.entities.Remote#20, endOfContract=2017-12-29 00:00:00.0, lastname=Morgan}
2017-12-29 21:43:10,589 +0100 [AWT-EventQueue-0] DEBUG (EntityPrinter.java:106) - More......
2017-12-29 21:43:10,590 +0100 [AWT-EventQueue-0] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:43:10,590 +0100 [AWT-EventQueue-0] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:09,053 +0100 [main] DEBUG (HibernatePersistenceProvider.java:38) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2017-12-29 21:54:09,134 +0100 [main] DEBUG (HibernatePersistenceProvider.java:98) - Located and parsed 1 persistence units; checking each
2017-12-29 21:54:09,136 +0100 [main] DEBUG (HibernatePersistenceProvider.java:106) - Checking persistence-unit [name=Afstandsbediening, explicit-provider=null] against incoming persistence unit name [Person]
2017-12-29 21:54:09,136 +0100 [main] DEBUG (HibernatePersistenceProvider.java:115) - Excluding from consideration due to name mis-match
2017-12-29 21:54:09,136 +0100 [main] DEBUG (HibernatePersistenceProvider.java:133) - Found no matching persistence units
2017-12-29 21:54:47,173 +0100 [main] DEBUG (HibernatePersistenceProvider.java:38) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2017-12-29 21:54:47,249 +0100 [main] DEBUG (HibernatePersistenceProvider.java:98) - Located and parsed 1 persistence units; checking each
2017-12-29 21:54:47,251 +0100 [main] DEBUG (HibernatePersistenceProvider.java:106) - Checking persistence-unit [name=Afstandsbediening, explicit-provider=null] against incoming persistence unit name [Afstandsbediening]
2017-12-29 21:54:47,251 +0100 [main] DEBUG (ProviderChecker.java:96) - No PersistenceProvider explicitly requested, assuming Hibernate
2017-12-29 21:54:47,256 +0100 [main] DEBUG (LogHelper.java:102) - PersistenceUnitInfo [
	name: Afstandsbediening
	persistence provider classname: null
	classloader: null
	excludeUnlistedClasses: false
	JTA datasource: null
	Non JTA datasource: null
	Transaction type: RESOURCE_LOCAL
	PU root URL: file:/C:/Users/BenJolien/git/2018-Januari/8-Afstandsbediening/target/classes/
	Shared Cache Mode: null
	Validation Mode: null
	Jar files URLs []
	Managed classes names [
		model.entities.Remote
		model.entities.Person
		model.entities.Address]
	Mapping files names []
	Properties [
		javax.persistence.jdbc.driver: com.mysql.jdbc.Driver
		javax.persistence.jdbc.password: userDB
		javax.persistence.jdbc.url: jdbc:mysql://localhost:3306/DbRemote
		javax.persistence.jdbc.user: userDB]
2017-12-29 21:54:47,262 +0100 [main] DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
2017-12-29 21:54:47,263 +0100 [main] DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
2017-12-29 21:54:47,267 +0100 [main] DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2017-12-29 21:54:47,267 +0100 [main] DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.jpa.event.spi.JpaIntegrator].
2017-12-29 21:54:47,354 +0100 [main] INFO  (Version.java:45) - HHH000412: Hibernate Core {5.2.12.Final}
2017-12-29 21:54:47,355 +0100 [main] INFO  (Environment.java:213) - HHH000206: hibernate.properties not found
2017-12-29 21:54:47,362 +0100 [main] DEBUG (ServiceBinding.java:68) - Overriding existing service binding [org.hibernate.secure.spi.JaccService]
2017-12-29 21:54:47,377 +0100 [main] DEBUG (RegionFactoryInitiator.java:75) - Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
2017-12-29 21:54:47,381 +0100 [main] INFO  (JavaReflectionManager.java:66) - HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
2017-12-29 21:54:47,438 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration boolean -> org.hibernate.type.BooleanType@46238e3f
2017-12-29 21:54:47,438 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration boolean -> org.hibernate.type.BooleanType@46238e3f
2017-12-29 21:54:47,440 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@46238e3f
2017-12-29 21:54:47,441 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@6cc7b4de
2017-12-29 21:54:47,442 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration true_false -> org.hibernate.type.TrueFalseType@49c43f4e
2017-12-29 21:54:47,442 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration yes_no -> org.hibernate.type.YesNoType@17776a8
2017-12-29 21:54:47,443 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration byte -> org.hibernate.type.ByteType@32a068d1
2017-12-29 21:54:47,443 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration byte -> org.hibernate.type.ByteType@32a068d1
2017-12-29 21:54:47,443 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@32a068d1
2017-12-29 21:54:47,444 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration character -> org.hibernate.type.CharacterType@282003e1
2017-12-29 21:54:47,444 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration char -> org.hibernate.type.CharacterType@282003e1
2017-12-29 21:54:47,444 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@282003e1
2017-12-29 21:54:47,446 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration short -> org.hibernate.type.ShortType@62fdb4a6
2017-12-29 21:54:47,446 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration short -> org.hibernate.type.ShortType@62fdb4a6
2017-12-29 21:54:47,446 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Short -> org.hibernate.type.ShortType@62fdb4a6
2017-12-29 21:54:47,447 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration integer -> org.hibernate.type.IntegerType@3ffcd140
2017-12-29 21:54:47,447 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration int -> org.hibernate.type.IntegerType@3ffcd140
2017-12-29 21:54:47,447 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@3ffcd140
2017-12-29 21:54:47,448 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration long -> org.hibernate.type.LongType@6a79c292
2017-12-29 21:54:47,449 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration long -> org.hibernate.type.LongType@6a79c292
2017-12-29 21:54:47,449 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Long -> org.hibernate.type.LongType@6a79c292
2017-12-29 21:54:47,450 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration float -> org.hibernate.type.FloatType@12405818
2017-12-29 21:54:47,450 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration float -> org.hibernate.type.FloatType@12405818
2017-12-29 21:54:47,450 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Float -> org.hibernate.type.FloatType@12405818
2017-12-29 21:54:47,451 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration double -> org.hibernate.type.DoubleType@442675e1
2017-12-29 21:54:47,451 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration double -> org.hibernate.type.DoubleType@442675e1
2017-12-29 21:54:47,451 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@442675e1
2017-12-29 21:54:47,453 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@27c6e487
2017-12-29 21:54:47,453 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@27c6e487
2017-12-29 21:54:47,455 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration big_integer -> org.hibernate.type.BigIntegerType@59717824
2017-12-29 21:54:47,455 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@59717824
2017-12-29 21:54:47,456 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration string -> org.hibernate.type.StringType@516be40f
2017-12-29 21:54:47,456 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.String -> org.hibernate.type.StringType@516be40f
2017-12-29 21:54:47,457 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration nstring -> org.hibernate.type.StringNVarcharType@19dc67c2
2017-12-29 21:54:47,457 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@dd3b207
2017-12-29 21:54:47,458 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration url -> org.hibernate.type.UrlType@70b0b186
2017-12-29 21:54:47,459 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.net.URL -> org.hibernate.type.UrlType@70b0b186
2017-12-29 21:54:47,460 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration Duration -> org.hibernate.type.DurationType@3d36e4cd
2017-12-29 21:54:47,460 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.Duration -> org.hibernate.type.DurationType@3d36e4cd
2017-12-29 21:54:47,472 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration Instant -> org.hibernate.type.InstantType@3b2c72c2
2017-12-29 21:54:47,472 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.Instant -> org.hibernate.type.InstantType@3b2c72c2
2017-12-29 21:54:47,473 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@2b4a2ec7
2017-12-29 21:54:47,473 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@2b4a2ec7
2017-12-29 21:54:47,475 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration LocalDate -> org.hibernate.type.LocalDateType@4206a205
2017-12-29 21:54:47,475 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@4206a205
2017-12-29 21:54:47,476 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@4d826d77
2017-12-29 21:54:47,476 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@4d826d77
2017-12-29 21:54:47,477 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@7f77e91b
2017-12-29 21:54:47,478 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@7f77e91b
2017-12-29 21:54:47,478 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@145eaa29
2017-12-29 21:54:47,479 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@145eaa29
2017-12-29 21:54:47,481 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@75f9eccc
2017-12-29 21:54:47,481 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@75f9eccc
2017-12-29 21:54:47,482 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration date -> org.hibernate.type.DateType@4ae3c1cd
2017-12-29 21:54:47,482 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.sql.Date -> org.hibernate.type.DateType@4ae3c1cd
2017-12-29 21:54:47,483 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration time -> org.hibernate.type.TimeType@45f45fa1
2017-12-29 21:54:47,483 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.sql.Time -> org.hibernate.type.TimeType@45f45fa1
2017-12-29 21:54:47,483 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration timestamp -> org.hibernate.type.TimestampType@8e0379d
2017-12-29 21:54:47,483 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@8e0379d
2017-12-29 21:54:47,484 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.Date -> org.hibernate.type.TimestampType@8e0379d
2017-12-29 21:54:47,485 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@2145433b
2017-12-29 21:54:47,485 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration calendar -> org.hibernate.type.CalendarType@3ec300f1
2017-12-29 21:54:47,486 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@3ec300f1
2017-12-29 21:54:47,486 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@3ec300f1
2017-12-29 21:54:47,486 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@7d68ef40
2017-12-29 21:54:47,487 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration locale -> org.hibernate.type.LocaleType@2b546384
2017-12-29 21:54:47,487 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@2b546384
2017-12-29 21:54:47,487 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration currency -> org.hibernate.type.CurrencyType@55ca8de8
2017-12-29 21:54:47,488 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@55ca8de8
2017-12-29 21:54:47,488 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration timezone -> org.hibernate.type.TimeZoneType@2ed0fbae
2017-12-29 21:54:47,488 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@2ed0fbae
2017-12-29 21:54:47,489 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration class -> org.hibernate.type.ClassType@548a102f
2017-12-29 21:54:47,489 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Class -> org.hibernate.type.ClassType@548a102f
2017-12-29 21:54:47,490 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@50a7bc6e
2017-12-29 21:54:47,490 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@50a7bc6e
2017-12-29 21:54:47,490 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@2d9d4f9d
2017-12-29 21:54:47,491 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration binary -> org.hibernate.type.BinaryType@358c99f5
2017-12-29 21:54:47,491 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration byte[] -> org.hibernate.type.BinaryType@358c99f5
2017-12-29 21:54:47,491 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration [B -> org.hibernate.type.BinaryType@358c99f5
2017-12-29 21:54:47,491 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@23282c25
2017-12-29 21:54:47,492 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@23282c25
2017-12-29 21:54:47,492 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@23282c25
2017-12-29 21:54:47,492 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration row_version -> org.hibernate.type.RowVersionType@258e2e41
2017-12-29 21:54:47,493 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration image -> org.hibernate.type.ImageType@78b1cc93
2017-12-29 21:54:47,493 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration characters -> org.hibernate.type.CharArrayType@475e586c
2017-12-29 21:54:47,494 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration char[] -> org.hibernate.type.CharArrayType@475e586c
2017-12-29 21:54:47,494 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration [C -> org.hibernate.type.CharArrayType@475e586c
2017-12-29 21:54:47,494 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@3b2cf7ab
2017-12-29 21:54:47,495 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@3b2cf7ab
2017-12-29 21:54:47,495 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@3b2cf7ab
2017-12-29 21:54:47,495 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration text -> org.hibernate.type.TextType@3c153a1
2017-12-29 21:54:47,495 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration ntext -> org.hibernate.type.NTextType@2b6856dd
2017-12-29 21:54:47,497 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration blob -> org.hibernate.type.BlobType@6e75aa0d
2017-12-29 21:54:47,497 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@6e75aa0d
2017-12-29 21:54:47,498 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@527e5409
2017-12-29 21:54:47,499 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration clob -> org.hibernate.type.ClobType@7fc2413d
2017-12-29 21:54:47,500 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@7fc2413d
2017-12-29 21:54:47,501 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration nclob -> org.hibernate.type.NClobType@2fd6b6c7
2017-12-29 21:54:47,501 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@2fd6b6c7
2017-12-29 21:54:47,501 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@223f3642
2017-12-29 21:54:47,502 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@78e94dcf
2017-12-29 21:54:47,502 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration serializable -> org.hibernate.type.SerializableType@16e7dcfd
2017-12-29 21:54:47,504 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration object -> org.hibernate.type.ObjectType@2928854b
2017-12-29 21:54:47,504 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@2928854b
2017-12-29 21:54:47,505 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@2f177a4b
2017-12-29 21:54:47,505 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@4278a03f
2017-12-29 21:54:47,505 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@147ed70f
2017-12-29 21:54:47,506 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@61dd025
2017-12-29 21:54:47,506 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@124c278f
2017-12-29 21:54:47,506 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@15b204a1
2017-12-29 21:54:47,506 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@77167fb7
2017-12-29 21:54:47,506 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@1fe20588
2017-12-29 21:54:47,513 +0100 [main] WARN  (DriverManagerConnectionProviderImpl.java:70) - HHH10001002: Using Hibernate built-in connection pool (not for production use!)
2017-12-29 21:54:47,522 +0100 [main] INFO  (DriverManagerConnectionProviderImpl.java:126) - HHH10001005: using driver [com.mysql.jdbc.Driver] at URL [jdbc:mysql://localhost:3306/DbRemote]
2017-12-29 21:54:47,523 +0100 [main] INFO  (DriverManagerConnectionProviderImpl.java:132) - HHH10001001: Connection properties: {user=userDB, password=userDB}
2017-12-29 21:54:47,523 +0100 [main] INFO  (DriverManagerConnectionProviderImpl.java:140) - HHH10001003: Autocommit mode: false
2017-12-29 21:54:47,525 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Initializing Connection pool with 1 Connections
2017-12-29 21:54:47,526 +0100 [main] INFO  (PooledConnections.java:41) - HHH000115: Hibernate connection pool size: 20 (min=1)
2017-12-29 21:54:47,751 +0100 [main] DEBUG (JdbcEnvironmentInitiator.java:72) - Database ->
       name : MySQL
    version : 5.7.20-log
      major : 5
      minor : 7
2017-12-29 21:54:47,751 +0100 [main] DEBUG (JdbcEnvironmentInitiator.java:83) - Driver ->
       name : MySQL Connector Java
    version : mysql-connector-java-5.1.45 ( Revision: 9131eefa398531c7dc98776e8a3fe839e544c5b2 )
      major : 5
      minor : 1
2017-12-29 21:54:47,751 +0100 [main] DEBUG (DelegatingBasicLogger.java:389) - JDBC version : 4.0
2017-12-29 21:54:47,760 +0100 [main] INFO  (Dialect.java:157) - HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2017-12-29 21:54:47,792 +0100 [main] DEBUG (IdentifierHelperBuilder.java:117) - JDBC driver metadata reported database stores quoted identifiers in more than one case
2017-12-29 21:54:47,795 +0100 [main] DEBUG (IdentifierHelperBuilder.java:191) - IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
2017-12-29 21:54:47,880 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2017-12-29 21:54:47,880 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2017-12-29 21:54:47,881 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2017-12-29 21:54:47,881 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2017-12-29 21:54:47,881 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2017-12-29 21:54:47,881 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2017-12-29 21:54:47,882 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2017-12-29 21:54:47,882 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2017-12-29 21:54:47,883 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
2017-12-29 21:54:47,884 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2017-12-29 21:54:47,885 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2017-12-29 21:54:47,886 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
2017-12-29 21:54:47,886 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2017-12-29 21:54:47,887 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2017-12-29 21:54:47,904 +0100 [main] DEBUG (Namespace.java:47) - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2017-12-29 21:54:47,928 +0100 [main] DEBUG (AnnotationBinder.java:511) - Binding entity from annotated class: model.entities.Address
2017-12-29 21:54:47,943 +0100 [main] DEBUG (QueryBinder.java:80) - Binding named query: findUnusedAddress => SELECT a FROM Address a WHERE a.id NOT IN (SELECT p.address.id FROM Person p)
2017-12-29 21:54:47,947 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2017-12-29 21:54:47,950 +0100 [main] DEBUG (EntityBinder.java:419) - Import with entity name Address
2017-12-29 21:54:47,952 +0100 [main] DEBUG (EntityBinder.java:695) - Bind entity model.entities.Address on table address
2017-12-29 21:54:47,965 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=id, insertable=true, updatable=true, unique=false}
2017-12-29 21:54:47,967 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property id with lazy=false
2017-12-29 21:54:47,968 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:id]
2017-12-29 21:54:47,969 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for id
2017-12-29 21:54:47,971 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property id
2017-12-29 21:54:47,974 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=city, insertable=true, updatable=true, unique=false}
2017-12-29 21:54:47,974 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property city with lazy=false
2017-12-29 21:54:47,974 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:city]
2017-12-29 21:54:47,975 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for city
2017-12-29 21:54:47,975 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property city
2017-12-29 21:54:47,975 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=country, insertable=true, updatable=true, unique=false}
2017-12-29 21:54:47,975 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property country with lazy=false
2017-12-29 21:54:47,975 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:country]
2017-12-29 21:54:47,975 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for country
2017-12-29 21:54:47,976 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property country
2017-12-29 21:54:47,976 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=mailBox, insertable=true, updatable=true, unique=false}
2017-12-29 21:54:47,976 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property mailBox with lazy=false
2017-12-29 21:54:47,976 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:mailBox]
2017-12-29 21:54:47,976 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for mailBox
2017-12-29 21:54:47,976 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property mailBox
2017-12-29 21:54:47,977 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=nr, insertable=true, updatable=true, unique=false}
2017-12-29 21:54:47,977 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property nr with lazy=false
2017-12-29 21:54:47,977 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:nr]
2017-12-29 21:54:47,977 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for nr
2017-12-29 21:54:47,977 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property nr
2017-12-29 21:54:47,977 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=postalCode, insertable=true, updatable=true, unique=false}
2017-12-29 21:54:47,977 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property postalCode with lazy=false
2017-12-29 21:54:47,978 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:postalCode]
2017-12-29 21:54:47,978 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for postalCode
2017-12-29 21:54:47,978 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property postalCode
2017-12-29 21:54:47,978 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=street, insertable=true, updatable=true, unique=false}
2017-12-29 21:54:47,978 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property street with lazy=false
2017-12-29 21:54:47,978 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:street]
2017-12-29 21:54:47,978 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for street
2017-12-29 21:54:47,978 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property street
2017-12-29 21:54:47,979 +0100 [main] DEBUG (AnnotationBinder.java:511) - Binding entity from annotated class: model.entities.Remote
2017-12-29 21:54:47,979 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2017-12-29 21:54:47,979 +0100 [main] DEBUG (EntityBinder.java:419) - Import with entity name Remote
2017-12-29 21:54:47,979 +0100 [main] DEBUG (EntityBinder.java:695) - Bind entity model.entities.Remote on table Remote
2017-12-29 21:54:47,980 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Remote), mappingColumn=id, insertable=true, updatable=true, unique=false}
2017-12-29 21:54:47,980 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property id with lazy=false
2017-12-29 21:54:47,980 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Remote:id]
2017-12-29 21:54:47,981 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for id
2017-12-29 21:54:47,981 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property id
2017-12-29 21:54:47,981 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Remote), mappingColumn=frequency, insertable=true, updatable=true, unique=false}
2017-12-29 21:54:47,981 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property frequency with lazy=false
2017-12-29 21:54:47,981 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Remote:frequency]
2017-12-29 21:54:47,981 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for frequency
2017-12-29 21:54:47,981 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property frequency
2017-12-29 21:54:47,981 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Remote), mappingColumn=isActive, insertable=true, updatable=true, unique=false}
2017-12-29 21:54:47,981 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property isActive with lazy=false
2017-12-29 21:54:47,982 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Remote:isActive]
2017-12-29 21:54:47,982 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for isActive
2017-12-29 21:54:47,982 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property isActive
2017-12-29 21:54:47,982 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Remote), mappingColumn=serialNumber, insertable=true, updatable=true, unique=false}
2017-12-29 21:54:47,982 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property serialNumber with lazy=false
2017-12-29 21:54:47,982 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Remote:serialNumber]
2017-12-29 21:54:47,982 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for serialNumber
2017-12-29 21:54:47,982 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property serialNumber
2017-12-29 21:54:47,982 +0100 [main] DEBUG (AnnotationBinder.java:511) - Binding entity from annotated class: model.entities.Person
2017-12-29 21:54:47,983 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2017-12-29 21:54:47,983 +0100 [main] DEBUG (EntityBinder.java:419) - Import with entity name Person
2017-12-29 21:54:47,983 +0100 [main] DEBUG (EntityBinder.java:695) - Bind entity model.entities.Person on table Person
2017-12-29 21:54:47,987 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Person), mappingColumn=id, insertable=true, updatable=true, unique=false}
2017-12-29 21:54:47,987 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property id with lazy=false
2017-12-29 21:54:47,988 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Person:id]
2017-12-29 21:54:47,988 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for id
2017-12-29 21:54:47,988 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property id
2017-12-29 21:54:47,989 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='addressId', referencedColumn='', mappedBy=''}
2017-12-29 21:54:47,989 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Person), mappingColumn=address, insertable=true, updatable=true, unique=false}
2017-12-29 21:54:47,991 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property address
2017-12-29 21:54:47,991 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Person), mappingColumn=endOfContract, insertable=true, updatable=true, unique=false}
2017-12-29 21:54:47,991 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property endOfContract with lazy=false
2017-12-29 21:54:47,991 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Person:endOfContract]
2017-12-29 21:54:47,992 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for endOfContract
2017-12-29 21:54:47,992 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property endOfContract
2017-12-29 21:54:47,992 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Person), mappingColumn=firstname, insertable=true, updatable=true, unique=false}
2017-12-29 21:54:47,992 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property firstname with lazy=false
2017-12-29 21:54:47,992 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Person:firstname]
2017-12-29 21:54:47,992 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for firstname
2017-12-29 21:54:47,992 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property firstname
2017-12-29 21:54:47,992 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Person), mappingColumn=lastname, insertable=true, updatable=true, unique=false}
2017-12-29 21:54:47,992 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property lastname with lazy=false
2017-12-29 21:54:47,992 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Person:lastname]
2017-12-29 21:54:47,993 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for lastname
2017-12-29 21:54:47,993 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property lastname
2017-12-29 21:54:47,993 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='remoteId', referencedColumn='', mappedBy=''}
2017-12-29 21:54:47,993 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Person), mappingColumn=remote, insertable=true, updatable=true, unique=false}
2017-12-29 21:54:47,993 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property remote
2017-12-29 21:54:47,994 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for id
2017-12-29 21:54:47,994 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for city
2017-12-29 21:54:47,994 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for country
2017-12-29 21:54:47,995 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for mailBox
2017-12-29 21:54:47,995 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for nr
2017-12-29 21:54:47,995 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for postalCode
2017-12-29 21:54:47,995 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for street
2017-12-29 21:54:47,995 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for id
2017-12-29 21:54:47,995 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for frequency
2017-12-29 21:54:47,995 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for isActive
2017-12-29 21:54:47,996 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for serialNumber
2017-12-29 21:54:47,996 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for id
2017-12-29 21:54:47,996 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for endOfContract
2017-12-29 21:54:47,996 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for firstname
2017-12-29 21:54:47,996 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for lastname
2017-12-29 21:54:47,999 +0100 [main] DEBUG (PrimaryKey.java:35) - Forcing column [id] to be non-null as it is part of the primary key for table [address]
2017-12-29 21:54:47,999 +0100 [main] DEBUG (PrimaryKey.java:35) - Forcing column [id] to be non-null as it is part of the primary key for table [remote]
2017-12-29 21:54:47,999 +0100 [main] DEBUG (PrimaryKey.java:35) - Forcing column [id] to be non-null as it is part of the primary key for table [person]
2017-12-29 21:54:47,999 +0100 [main] DEBUG (InFlightMetadataCollectorImpl.java:1798) - Resolving reference to class: model.entities.Address
2017-12-29 21:54:48,001 +0100 [main] DEBUG (InFlightMetadataCollectorImpl.java:1798) - Resolving reference to class: model.entities.Remote
2017-12-29 21:54:48,002 +0100 [main] DEBUG (InFlightMetadataCollectorImpl.java:1798) - Resolving reference to class: model.entities.Address
2017-12-29 21:54:48,002 +0100 [main] DEBUG (InFlightMetadataCollectorImpl.java:1798) - Resolving reference to class: model.entities.Remote
2017-12-29 21:54:48,024 +0100 [main] DEBUG (SessionFactoryImpl.java:200) - Building session factory
2017-12-29 21:54:48,024 +0100 [main] DEBUG (Settings.java:69) - SessionFactory name : null
2017-12-29 21:54:48,025 +0100 [main] DEBUG (Settings.java:70) - Automatic flush during beforeCompletion(): enabled
2017-12-29 21:54:48,025 +0100 [main] DEBUG (Settings.java:71) - Automatic session close at end of transaction: disabled
2017-12-29 21:54:48,025 +0100 [main] DEBUG (Settings.java:73) - Statistics: disabled
2017-12-29 21:54:48,025 +0100 [main] DEBUG (Settings.java:75) - Deleted entity synthetic identifier rollback: disabled
2017-12-29 21:54:48,025 +0100 [main] DEBUG (Settings.java:76) - Default entity-mode: pojo
2017-12-29 21:54:48,025 +0100 [main] DEBUG (Settings.java:77) - Check Nullability in Core (should be disabled when Bean Validation is on): enabled
2017-12-29 21:54:48,025 +0100 [main] DEBUG (Settings.java:78) - Allow initialization of lazy state outside session : disabled
2017-12-29 21:54:48,025 +0100 [main] DEBUG (Settings.java:80) - Using BatchFetchStyle : LEGACY
2017-12-29 21:54:48,025 +0100 [main] DEBUG (Settings.java:81) - Default batch fetch size: -1
2017-12-29 21:54:48,025 +0100 [main] DEBUG (Settings.java:82) - Maximum outer join fetch depth: 2
2017-12-29 21:54:48,025 +0100 [main] DEBUG (Settings.java:83) - Default null ordering: NONE
2017-12-29 21:54:48,025 +0100 [main] DEBUG (Settings.java:84) - Order SQL updates by primary key: disabled
2017-12-29 21:54:48,025 +0100 [main] DEBUG (Settings.java:85) - Order SQL inserts for batching: disabled
2017-12-29 21:54:48,026 +0100 [main] DEBUG (Settings.java:87) - multi-tenancy strategy : NONE
2017-12-29 21:54:48,026 +0100 [main] DEBUG (Settings.java:89) - JTA Track by Thread: enabled
2017-12-29 21:54:48,026 +0100 [main] DEBUG (Settings.java:91) - Query language substitutions: {}
2017-12-29 21:54:48,026 +0100 [main] DEBUG (Settings.java:92) - JPA query language strict compliance: disabled
2017-12-29 21:54:48,026 +0100 [main] DEBUG (Settings.java:93) - Named query checking : enabled
2017-12-29 21:54:48,026 +0100 [main] DEBUG (Settings.java:95) - Second-level cache: enabled
2017-12-29 21:54:48,026 +0100 [main] DEBUG (Settings.java:96) - Second-level query cache: disabled
2017-12-29 21:54:48,026 +0100 [main] DEBUG (Settings.java:97) - Second-level query cache factory: org.hibernate.cache.internal.StandardQueryCacheFactory@31edaa7d
2017-12-29 21:54:48,026 +0100 [main] DEBUG (Settings.java:98) - Second-level cache region prefix: null
2017-12-29 21:54:48,026 +0100 [main] DEBUG (Settings.java:99) - Optimize second-level cache for minimal puts: disabled
2017-12-29 21:54:48,026 +0100 [main] DEBUG (Settings.java:100) - Structured second-level cache entries: disabled
2017-12-29 21:54:48,026 +0100 [main] DEBUG (Settings.java:101) - Second-level cache direct-reference entries: disabled
2017-12-29 21:54:48,026 +0100 [main] DEBUG (Settings.java:102) - Automatic eviction of collection cache: disabled
2017-12-29 21:54:48,026 +0100 [main] DEBUG (Settings.java:104) - JDBC batch size: 15
2017-12-29 21:54:48,027 +0100 [main] DEBUG (Settings.java:105) - JDBC batch updates for versioned data: enabled
2017-12-29 21:54:48,027 +0100 [main] DEBUG (Settings.java:106) - Scrollable result sets: enabled
2017-12-29 21:54:48,027 +0100 [main] DEBUG (Settings.java:107) - Wrap result sets: disabled
2017-12-29 21:54:48,027 +0100 [main] DEBUG (Settings.java:108) - JDBC3 getGeneratedKeys(): enabled
2017-12-29 21:54:48,027 +0100 [main] DEBUG (Settings.java:109) - JDBC result set fetch size: null
2017-12-29 21:54:48,027 +0100 [main] DEBUG (Settings.java:110) - Connection release mode: AFTER_TRANSACTION
2017-12-29 21:54:48,027 +0100 [main] DEBUG (Settings.java:111) - Generate SQL with comments: disabled
2017-12-29 21:54:48,063 +0100 [main] DEBUG (SessionFactoryImpl.java:258) - Session factory constructed with filter configurations : {}
2017-12-29 21:54:48,063 +0100 [main] DEBUG (SessionFactoryImpl.java:259) - Instantiating session factory with properties: {sun.desktop=windows, awt.toolkit=sun.awt.windows.WToolkit, file.encoding.pkg=sun.io, java.specification.version=1.8, sun.cpu.isalist=amd64, sun.jnu.encoding=Cp1252, java.class.path=C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\log4j-1.2.17.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\mysql-connector-java-5.1.45-bin.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\antlr-2.7.7.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\classmate-1.3.0.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\dom4j-1.6.1.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\hibernate-commons-annotations-5.0.1.Final.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\hibernate-core-5.2.12.Final.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\hibernate-jpa-2.1-api-1.0.0.Final.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\jandex-2.0.3.Final.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\javassist-3.20.0-GA.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\jboss-logging-3.3.0.Final.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\jboss-transaction-api_1.2_spec-1.0.1.Final.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\eclipselink.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\javax.persistence-3.0-prelude-embedded-m2-sources.jar;C:\Users\BenJolien\Desktop\eclipse\plugins\org.junit_4.12.0.v201504281640\junit.jar;C:\Users\BenJolien\Desktop\eclipse\plugins\org.hamcrest.core_1.3.0.v201303031735.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\jcalendar-1.4.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\target\classes;C:\Users\BenJolien\.m2\repository\org\apache\maven\plugins\maven-compiler-plugin\3.7.0\maven-compiler-plugin-3.7.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-plugin-api\3.0\maven-plugin-api-3.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-model\3.0\maven-model-3.0.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\sisu\sisu-inject-plexus\1.4.2\sisu-inject-plexus-1.4.2.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\sisu\sisu-inject-bean\1.4.2\sisu-inject-bean-1.4.2.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\sisu\sisu-guice\2.1.7\sisu-guice-2.1.7-noaop.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-artifact\3.0\maven-artifact-3.0.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-utils\2.0.4\plexus-utils-2.0.4.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-core\3.0\maven-core-3.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-settings\3.0\maven-settings-3.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-settings-builder\3.0\maven-settings-builder-3.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-repository-metadata\3.0\maven-repository-metadata-3.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-model-builder\3.0\maven-model-builder-3.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-aether-provider\3.0\maven-aether-provider-3.0.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\aether\aether-impl\1.7\aether-impl-1.7.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\aether\aether-spi\1.7\aether-spi-1.7.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\aether\aether-api\1.7\aether-api-1.7.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\aether\aether-util\1.7\aether-util-1.7.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-interpolation\1.14\plexus-interpolation-1.14.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-classworlds\2.2.3\plexus-classworlds-2.2.3.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-component-annotations\1.5.5\plexus-component-annotations-1.5.5.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\plexus\plexus-sec-dispatcher\1.3\plexus-sec-dispatcher-1.3.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\plexus\plexus-cipher\1.4\plexus-cipher-1.4.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\shared\maven-shared-utils\3.1.0\maven-shared-utils-3.1.0.jar;C:\Users\BenJolien\.m2\repository\commons-io\commons-io\2.5\commons-io-2.5.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\shared\maven-shared-incremental\1.1\maven-shared-incremental-1.1.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-java\0.9.2\plexus-java-0.9.2.jar;C:\Users\BenJolien\.m2\repository\org\ow2\asm\asm\6.0_BETA\asm-6.0_BETA.jar;C:\Users\BenJolien\.m2\repository\com\thoughtworks\qdox\qdox\2.0-M7\qdox-2.0-M7.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-compiler-api\2.8.2\plexus-compiler-api-2.8.2.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-compiler-manager\2.8.2\plexus-compiler-manager-2.8.2.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-compiler-javac\2.8.2\plexus-compiler-javac-2.8.2.jar;C:\Users\BenJolien\.m2\repository\org\hibernate\hibernate-core\4.2.7.SP1\hibernate-core-4.2.7.SP1.jar;C:\Users\BenJolien\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\BenJolien\.m2\repository\org\jboss\logging\jboss-logging\3.1.0.GA\jboss-logging-3.1.0.GA.jar;C:\Users\BenJolien\.m2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;C:\Users\BenJolien\.m2\repository\org\javassist\javassist\3.18.1-GA\javassist-3.18.1-GA.jar;C:\Users\BenJolien\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.1_spec\1.0.1.Final\jboss-transaction-api_1.1_spec-1.0.1.Final.jar;C:\Users\BenJolien\.m2\repository\org\hibernate\common\hibernate-commons-annotations\4.0.2.Final\hibernate-commons-annotations-4.0.2.Final.jar;C:\Users\BenJolien\.m2\repository\mysql\mysql-connector-java\6.0.6\mysql-connector-java-6.0.6.jar;C:\Users\BenJolien\.m2\repository\org\fluttercode\datafactory\datafactory\0.8\datafactory-0.8.jar;C:\Users\BenJolien\.m2\repository\org\hibernate\javax\persistence\hibernate-jpa-2.0-api\1.0.1.Final\hibernate-jpa-2.0-api-1.0.1.Final.jar;C:\Users\BenJolien\.m2\repository\org\hibernate\hibernate-entitymanager\5.2.12.Final\hibernate-entitymanager-5.2.12.Final.jar;C:\Users\BenJolien\.m2\repository\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar;C:\Users\BenJolien\.m2\repository\net\bytebuddy\byte-buddy\1.6.14\byte-buddy-1.6.14.jar;C:\Users\BenJolien\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.0.1.Final\jboss-transaction-api_1.2_spec-1.0.1.Final.jar, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=http://java.oracle.com/, user.timezone=Europe/Berlin, javax.persistence.jdbc.user=****, javax.persistence.jdbc.url=jdbc:mysql://localhost:3306/DbRemote, os.name=Windows 10, java.vm.specification.version=1.8, user.country=BE, sun.java.launcher=SUN_STANDARD, sun.boot.library.path=C:\Program Files\Java\jre1.8.0_144\bin, sun.java.command=test.database.GenerateDummyData, sun.cpu.endian=little, user.home=C:\Users\BenJolien, user.language=nl, java.specification.vendor=Oracle Corporation, java.home=C:\Program Files\Java\jre1.8.0_144, file.separator=\, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, hibernate.transaction.coordinator_class=class org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorBuilderImpl, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, javax.persistence.jdbc.driver=com.mysql.jdbc.Driver, sun.boot.class.path=C:\Program Files\Java\jre1.8.0_144\lib\resources.jar;C:\Program Files\Java\jre1.8.0_144\lib\rt.jar;C:\Program Files\Java\jre1.8.0_144\lib\sunrsasign.jar;C:\Program Files\Java\jre1.8.0_144\lib\jsse.jar;C:\Program Files\Java\jre1.8.0_144\lib\jce.jar;C:\Program Files\Java\jre1.8.0_144\lib\charsets.jar;C:\Program Files\Java\jre1.8.0_144\lib\jfr.jar;C:\Program Files\Java\jre1.8.0_144\classes, user.script=, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=1.8.0_144-b01, user.name=BenJolien, path.separator=;, hibernate.connection.username=userDB, os.version=10.0, java.endorsed.dirs=C:\Program Files\Java\jre1.8.0_144\lib\endorsed, java.runtime.name=Java(TM) SE Runtime Environment, hibernate.connection.url=jdbc:mysql://localhost:3306/DbRemote, hibernate.ejb.persistenceUnitName=Afstandsbediening, file.encoding=UTF-8, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.connection.driver_class=com.mysql.jdbc.Driver, java.vendor.url.bug=http://bugreport.sun.com/bugreport/, java.io.tmpdir=C:\Users\BENJOL~1\AppData\Local\Temp\, java.version=1.8.0_144, user.dir=C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, hibernate.connection.password=****, java.awt.printerjob=sun.awt.windows.WPrinterJob, sun.os.patch.level=, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@41005828, java.library.path=C:\Program Files\Java\jre1.8.0_144\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:/Program Files/Java/jre1.8.0_151/bin/server;C:/Program Files/Java/jre1.8.0_151/bin;C:/Program Files/Java/jre1.8.0_151/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Program Files\Microsoft MPI\Bin\;C:\Program Files (x86)\Intel\iCLS Client\;C:\Program Files\Intel\iCLS Client\;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files (x86)\Windows Kits\10\Windows Performance Toolkit\;C:\Program Files\dotnet\;C:\Program Files\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files (x86)\GtkSharp\2.12\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\nodejs\;C:\Program Files\Microsoft\Web Platform Installer\;C:\Program Files\Microsoft SQL Server\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\110\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\110\DTS\Binn\;C:\Program Files\Microsoft SQL Server\110\DTS\Binn\;C:\Program Files (x86)\Microsoft SQL Server\Client SDK\ODBC\130\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\130\DTS\Binn\;C:\Program Files (x86)\Microsoft SQL Server\130\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files (x86)\scala\bin;C:\Program Files\ibm\gsk8\lib64;C:\Program Files (x86)\ibm\gsk8\lib;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Brackets\command;C:\Program Files\Git\cmd;C:\Program Files\MySQL\MySQL Utilities 1.6\;C:\Users\BenJolien\AppData\Local\Microsoft\WindowsApps;C:\Users\BenJolien\AppData\Roaming\npm;;C:\Users\BenJolien\Desktop\eclipse;;., java.vm.info=mixed mode, java.vendor=Oracle Corporation, java.vm.version=25.144-b01, hibernate.bytecode.use_reflection_optimizer=false, java.ext.dirs=C:\Program Files\Java\jre1.8.0_144\lib\ext;C:\WINDOWS\Sun\Java\lib\ext, sun.io.unicode.encoding=UnicodeLittle, javax.persistence.jdbc.password=userDB, java.class.version=52.0}
2017-12-29 21:54:48,071 +0100 [main] DEBUG (JaccIntegrator.java:80) - Skipping JACC integration as it was not enabled
2017-12-29 21:54:48,073 +0100 [main] DEBUG (CascadeStyles.java:268) - External cascade style registration [persist : STYLE_PERSIST_SKIPLAZY] overrode base registration [STYLE_PERSIST]
2017-12-29 21:54:48,116 +0100 [main] DEBUG (SessionFactoryImpl.java:298) - Instantiated session factory
2017-12-29 21:54:48,136 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:55) - Not known whether passed class name [model.entities.Address] is safe
2017-12-29 21:54:48,136 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:57) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.entities.Address
2017-12-29 21:54:48,145 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:55) - Not known whether passed class name [model.entities.Address] is safe
2017-12-29 21:54:48,145 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:57) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.entities.Address
2017-12-29 21:54:48,172 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:55) - Not known whether passed class name [model.entities.Remote] is safe
2017-12-29 21:54:48,172 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:57) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.entities.Remote
2017-12-29 21:54:48,172 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:55) - Not known whether passed class name [model.entities.Remote] is safe
2017-12-29 21:54:48,173 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:57) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.entities.Remote
2017-12-29 21:54:48,175 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:55) - Not known whether passed class name [model.entities.Person] is safe
2017-12-29 21:54:48,175 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:57) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.entities.Person
2017-12-29 21:54:48,177 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:55) - Not known whether passed class name [model.entities.Person] is safe
2017-12-29 21:54:48,177 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:57) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.entities.Person
2017-12-29 21:54:48,185 +0100 [main] DEBUG (AbstractEntityPersister.java:3608) - Static SQL for entity: model.entities.Address
2017-12-29 21:54:48,185 +0100 [main] DEBUG (AbstractEntityPersister.java:3613) -  Version select: select id from address where id =?
2017-12-29 21:54:48,185 +0100 [main] DEBUG (AbstractEntityPersister.java:3616) -  Snapshot select: select address_.id, address_.city as city2_0_, address_.country as country3_0_, address_.mailBox as mailBox4_0_, address_.nr as nr5_0_, address_.postalCode as postalCo6_0_, address_.street as street7_0_ from address address_ where address_.id=?
2017-12-29 21:54:48,185 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into address (city, country, mailBox, nr, postalCode, street, id) values (?, ?, ?, ?, ?, ?, ?)
2017-12-29 21:54:48,186 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update address set city=?, country=?, mailBox=?, nr=?, postalCode=?, street=? where id=?
2017-12-29 21:54:48,186 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from address where id=?
2017-12-29 21:54:48,186 +0100 [main] DEBUG (AbstractEntityPersister.java:3624) -  Identity insert: insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:54:48,198 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@663411de]
2017-12-29 21:54:48,199 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:54:48,199 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:54:48,199 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:54:48,199 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:54:48,199 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:54:48,199 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:54:48,200 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:54:48,206 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:54:48,208 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:54:48,210 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [NONE]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:54:48,210 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@47f4e407]
2017-12-29 21:54:48,210 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:54:48,210 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:54:48,210 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:54:48,210 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:54:48,210 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:54:48,210 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:54:48,211 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:54:48,211 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:54:48,211 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:54:48,211 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [READ]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:54:48,211 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@48d5f34e]
2017-12-29 21:54:48,211 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:54:48,211 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:54:48,212 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:54:48,212 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:54:48,212 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:54:48,212 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:54:48,212 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:54:48,212 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:54:48,212 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:54:48,212 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [UPGRADE]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? for update
2017-12-29 21:54:48,213 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6ff65192]
2017-12-29 21:54:48,213 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:54:48,213 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:54:48,213 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:54:48,213 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:54:48,213 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:54:48,213 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:54:48,214 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:54:48,214 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:54:48,214 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:54:48,214 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [UPGRADE_NOWAIT]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? for update
2017-12-29 21:54:48,214 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4af0df05]
2017-12-29 21:54:48,215 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:54:48,215 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:54:48,215 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:54:48,215 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:54:48,215 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:54:48,215 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:54:48,215 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:54:48,215 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:54:48,216 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:54:48,216 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [UPGRADE_SKIPLOCKED]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? for update
2017-12-29 21:54:48,216 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@acdb094]
2017-12-29 21:54:48,216 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:54:48,216 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:54:48,216 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:54:48,216 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:54:48,217 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:54:48,217 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:54:48,217 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:54:48,218 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:54:48,218 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:54:48,219 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [FORCE]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? for update
2017-12-29 21:54:48,219 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2b0f373b]
2017-12-29 21:54:48,219 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:54:48,219 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:54:48,219 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:54:48,219 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:54:48,220 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:54:48,220 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:54:48,220 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:54:48,220 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:54:48,220 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:54:48,221 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [PESSIMISTIC_READ]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? lock in share mode
2017-12-29 21:54:48,221 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4b45dcb8]
2017-12-29 21:54:48,221 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:54:48,221 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:54:48,221 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:54:48,221 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:54:48,221 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:54:48,222 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:54:48,222 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:54:48,222 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:54:48,222 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:54:48,222 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [PESSIMISTIC_WRITE]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? for update
2017-12-29 21:54:48,223 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2072acb2]
2017-12-29 21:54:48,223 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:54:48,223 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:54:48,223 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:54:48,223 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:54:48,223 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:54:48,223 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:54:48,223 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:54:48,224 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:54:48,224 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:54:48,224 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [PESSIMISTIC_FORCE_INCREMENT]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? for update
2017-12-29 21:54:48,224 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@35a9782c]
2017-12-29 21:54:48,224 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:54:48,224 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:54:48,224 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:54:48,224 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:54:48,225 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:54:48,225 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:54:48,225 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:54:48,225 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:54:48,225 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:54:48,225 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [OPTIMISTIC]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:54:48,225 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@45815ffc]
2017-12-29 21:54:48,225 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:54:48,225 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:54:48,225 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:54:48,225 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:54:48,226 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:54:48,226 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:54:48,226 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:54:48,226 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:54:48,226 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:54:48,226 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [OPTIMISTIC_FORCE_INCREMENT]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:54:48,235 +0100 [main] DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity model.entities.Address: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:54:48,235 +0100 [main] DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity model.entities.Address: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:54:48,235 +0100 [main] DEBUG (AbstractEntityPersister.java:3608) - Static SQL for entity: model.entities.Remote
2017-12-29 21:54:48,235 +0100 [main] DEBUG (AbstractEntityPersister.java:3613) -  Version select: select id from Remote where id =?
2017-12-29 21:54:48,235 +0100 [main] DEBUG (AbstractEntityPersister.java:3616) -  Snapshot select: select remote_.id, remote_.frequency as frequenc2_2_, remote_.isActive as isActive3_2_, remote_.serialNumber as serialNu4_2_ from Remote remote_ where remote_.id=?
2017-12-29 21:54:48,235 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into Remote (frequency, isActive, serialNumber, id) values (?, ?, ?, ?)
2017-12-29 21:54:48,235 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update Remote set frequency=?, isActive=?, serialNumber=? where id=?
2017-12-29 21:54:48,235 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from Remote where id=?
2017-12-29 21:54:48,236 +0100 [main] DEBUG (AbstractEntityPersister.java:3624) -  Identity insert: insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:54:48,236 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@68ead359]
2017-12-29 21:54:48,236 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:54:48,236 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:54:48,236 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:54:48,236 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:54:48,236 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:54:48,236 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:54:48,236 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [NONE]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:54:48,236 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@180da663]
2017-12-29 21:54:48,237 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:54:48,237 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:54:48,237 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:54:48,237 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:54:48,237 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:54:48,237 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:54:48,237 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [READ]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:54:48,237 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@340da44c]
2017-12-29 21:54:48,237 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:54:48,237 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:54:48,237 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:54:48,238 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:54:48,238 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:54:48,238 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:54:48,238 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [UPGRADE]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? for update
2017-12-29 21:54:48,238 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@37052337]
2017-12-29 21:54:48,238 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:54:48,238 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:54:48,238 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:54:48,238 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:54:48,239 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:54:48,239 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:54:48,239 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [UPGRADE_NOWAIT]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? for update
2017-12-29 21:54:48,239 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7a560583]
2017-12-29 21:54:48,239 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:54:48,240 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:54:48,240 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:54:48,240 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:54:48,240 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:54:48,241 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:54:48,241 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [UPGRADE_SKIPLOCKED]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? for update
2017-12-29 21:54:48,241 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@77a7cf58]
2017-12-29 21:54:48,241 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:54:48,241 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:54:48,241 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:54:48,242 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:54:48,242 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:54:48,242 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:54:48,242 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [FORCE]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? for update
2017-12-29 21:54:48,242 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@616fe72b]
2017-12-29 21:54:48,243 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:54:48,243 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:54:48,243 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:54:48,243 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:54:48,243 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:54:48,244 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:54:48,244 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [PESSIMISTIC_READ]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? lock in share mode
2017-12-29 21:54:48,244 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7e7b159b]
2017-12-29 21:54:48,244 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:54:48,244 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:54:48,245 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:54:48,245 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:54:48,245 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:54:48,245 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:54:48,245 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [PESSIMISTIC_WRITE]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? for update
2017-12-29 21:54:48,246 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@60957c0f]
2017-12-29 21:54:48,246 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:54:48,246 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:54:48,246 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:54:48,246 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:54:48,246 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:54:48,246 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:54:48,246 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [PESSIMISTIC_FORCE_INCREMENT]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? for update
2017-12-29 21:54:48,247 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@fcb4004]
2017-12-29 21:54:48,247 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:54:48,247 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:54:48,247 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:54:48,247 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:54:48,247 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:54:48,247 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:54:48,247 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [OPTIMISTIC]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:54:48,248 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@56e8b606]
2017-12-29 21:54:48,248 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:54:48,248 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:54:48,248 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:54:48,248 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:54:48,249 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:54:48,249 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:54:48,249 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [OPTIMISTIC_FORCE_INCREMENT]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:54:48,249 +0100 [main] DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity model.entities.Remote: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:54:48,249 +0100 [main] DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity model.entities.Remote: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:54:48,250 +0100 [main] DEBUG (AbstractEntityPersister.java:3608) - Static SQL for entity: model.entities.Person
2017-12-29 21:54:48,250 +0100 [main] DEBUG (AbstractEntityPersister.java:3613) -  Version select: select id from Person where id =?
2017-12-29 21:54:48,250 +0100 [main] DEBUG (AbstractEntityPersister.java:3616) -  Snapshot select: select person_.id, person_.addressId as addressI5_1_, person_.endOfContract as endOfCon2_1_, person_.firstname as firstnam3_1_, person_.lastname as lastname4_1_, person_.remoteId as remoteId6_1_ from Person person_ where person_.id=?
2017-12-29 21:54:48,250 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into Person (addressId, endOfContract, firstname, lastname, remoteId, id) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:54:48,250 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update Person set addressId=?, endOfContract=?, firstname=?, lastname=?, remoteId=? where id=?
2017-12-29 21:54:48,250 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from Person where id=?
2017-12-29 21:54:48,250 +0100 [main] DEBUG (AbstractEntityPersister.java:3624) -  Identity insert: insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:54:48,250 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@784c3487]
2017-12-29 21:54:48,250 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:54:48,254 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@c35172e]
2017-12-29 21:54:48,256 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.city
2017-12-29 21:54:48,256 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.country
2017-12-29 21:54:48,256 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.mailBox
2017-12-29 21:54:48,256 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.nr
2017-12-29 21:54:48,256 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.postalCode
2017-12-29 21:54:48,256 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.street
2017-12-29 21:54:48,256 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:54:48,256 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:54:48,256 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:54:48,256 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:54:48,257 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@ccb4b1b]
2017-12-29 21:54:48,257 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote.frequency
2017-12-29 21:54:48,257 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote.isActive
2017-12-29 21:54:48,257 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote.serialNumber
2017-12-29 21:54:48,257 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:54:48,257 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:54:48,258 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}
          - JOIN (JoinDefinedByMetadata(address)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=model.entities.Address)
                - SQL table alias mapping - address1_
                - alias suffix - 1_
                - suffixed key columns - {id1_0_1_}
          - JOIN (JoinDefinedByMetadata(remote)) : <gen:0> -> <gen:2>
             - EntityQuerySpaceImpl(uid=<gen:2>, entity=model.entities.Remote)
                - SQL table alias mapping - remote2_
                - alias suffix - 2_
                - suffixed key columns - {id1_2_2_}

2017-12-29 21:54:48,258 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [NONE]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.mailBox as mailBox4_0_1_, address1_.nr as nr5_0_1_, address1_.postalCode as postalCo6_0_1_, address1_.street as street7_0_1_, remote2_.id as id1_2_2_, remote2_.frequency as frequenc2_2_2_, remote2_.isActive as isActive3_2_2_, remote2_.serialNumber as serialNu4_2_2_ from Person person0_ left outer join address address1_ on person0_.addressId=address1_.id left outer join Remote remote2_ on person0_.remoteId=remote2_.id where person0_.id=?
2017-12-29 21:54:48,258 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7c1e2a2d]
2017-12-29 21:54:48,258 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:54:48,258 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@52d645b1]
2017-12-29 21:54:48,259 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.city
2017-12-29 21:54:48,259 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.country
2017-12-29 21:54:48,259 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.mailBox
2017-12-29 21:54:48,259 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.nr
2017-12-29 21:54:48,259 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.postalCode
2017-12-29 21:54:48,259 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.street
2017-12-29 21:54:48,259 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:54:48,259 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:54:48,259 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:54:48,259 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:54:48,259 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2cc3ad05]
2017-12-29 21:54:48,259 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote.frequency
2017-12-29 21:54:48,259 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote.isActive
2017-12-29 21:54:48,259 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote.serialNumber
2017-12-29 21:54:48,260 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:54:48,260 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:54:48,260 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}
          - JOIN (JoinDefinedByMetadata(address)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=model.entities.Address)
                - SQL table alias mapping - address1_
                - alias suffix - 1_
                - suffixed key columns - {id1_0_1_}
          - JOIN (JoinDefinedByMetadata(remote)) : <gen:0> -> <gen:2>
             - EntityQuerySpaceImpl(uid=<gen:2>, entity=model.entities.Remote)
                - SQL table alias mapping - remote2_
                - alias suffix - 2_
                - suffixed key columns - {id1_2_2_}

2017-12-29 21:54:48,260 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [READ]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.mailBox as mailBox4_0_1_, address1_.nr as nr5_0_1_, address1_.postalCode as postalCo6_0_1_, address1_.street as street7_0_1_, remote2_.id as id1_2_2_, remote2_.frequency as frequenc2_2_2_, remote2_.isActive as isActive3_2_2_, remote2_.serialNumber as serialNu4_2_2_ from Person person0_ left outer join address address1_ on person0_.addressId=address1_.id left outer join Remote remote2_ on person0_.remoteId=remote2_.id where person0_.id=?
2017-12-29 21:54:48,260 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@119020fb]
2017-12-29 21:54:48,260 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:54:48,261 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@c055c54]
2017-12-29 21:54:48,261 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:54:48,261 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:54:48,261 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:54:48,261 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:54:48,261 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@25e2ab5a]
2017-12-29 21:54:48,261 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:54:48,261 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:54:48,261 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 21:54:48,262 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [UPGRADE]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? for update
2017-12-29 21:54:48,262 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@35e5d0e5]
2017-12-29 21:54:48,262 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:54:48,262 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@55562aa9]
2017-12-29 21:54:48,262 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:54:48,262 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:54:48,262 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:54:48,262 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:54:48,262 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@655ef322]
2017-12-29 21:54:48,263 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:54:48,263 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:54:48,263 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 21:54:48,263 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [UPGRADE_NOWAIT]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? for update
2017-12-29 21:54:48,263 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7e276594]
2017-12-29 21:54:48,263 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:54:48,264 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5066d65f]
2017-12-29 21:54:48,264 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:54:48,264 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:54:48,264 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:54:48,264 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:54:48,264 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4233e892]
2017-12-29 21:54:48,264 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:54:48,264 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:54:48,264 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 21:54:48,265 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [UPGRADE_SKIPLOCKED]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? for update
2017-12-29 21:54:48,265 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@77d2e85]
2017-12-29 21:54:48,265 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:54:48,265 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@58ffcbd7]
2017-12-29 21:54:48,265 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:54:48,265 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:54:48,265 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:54:48,265 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:54:48,265 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@555cf22]
2017-12-29 21:54:48,266 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:54:48,266 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:54:48,266 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 21:54:48,266 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [FORCE]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? for update
2017-12-29 21:54:48,267 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@6bb2d00b]
2017-12-29 21:54:48,267 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:54:48,267 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1a9c38eb]
2017-12-29 21:54:48,268 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:54:48,268 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:54:48,268 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:54:48,269 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:54:48,269 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@319bc845]
2017-12-29 21:54:48,269 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:54:48,269 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:54:48,270 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 21:54:48,270 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [PESSIMISTIC_READ]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? lock in share mode
2017-12-29 21:54:48,270 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4c5474f5]
2017-12-29 21:54:48,270 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:54:48,270 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@54e22bdd]
2017-12-29 21:54:48,270 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:54:48,270 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:54:48,270 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:54:48,271 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:54:48,271 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3bd418e4]
2017-12-29 21:54:48,271 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:54:48,271 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:54:48,271 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 21:54:48,271 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [PESSIMISTIC_WRITE]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? for update
2017-12-29 21:54:48,272 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@544820b7]
2017-12-29 21:54:48,272 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:54:48,272 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2e61d218]
2017-12-29 21:54:48,272 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:54:48,272 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:54:48,272 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:54:48,272 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:54:48,272 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3569fc08]
2017-12-29 21:54:48,273 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:54:48,273 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:54:48,273 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 21:54:48,273 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [PESSIMISTIC_FORCE_INCREMENT]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? for update
2017-12-29 21:54:48,273 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@20b12f8a]
2017-12-29 21:54:48,273 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:54:48,274 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2e554a3b]
2017-12-29 21:54:48,274 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:54:48,274 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:54:48,274 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:54:48,274 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:54:48,274 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@54a67a45]
2017-12-29 21:54:48,274 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:54:48,274 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:54:48,275 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 21:54:48,275 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [OPTIMISTIC]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=?
2017-12-29 21:54:48,275 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7d42c224]
2017-12-29 21:54:48,275 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:54:48,275 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@522a32b1]
2017-12-29 21:54:48,275 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:54:48,275 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:54:48,276 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:54:48,276 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:54:48,276 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@35390ee3]
2017-12-29 21:54:48,276 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:54:48,276 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:54:48,276 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 21:54:48,276 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [OPTIMISTIC_FORCE_INCREMENT]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=?
2017-12-29 21:54:48,277 +0100 [main] DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity model.entities.Person: select person0_.id as id1_1_2_, person0_.addressId as addressI5_1_2_, person0_.endOfContract as endOfCon2_1_2_, person0_.firstname as firstnam3_1_2_, person0_.lastname as lastname4_1_2_, person0_.remoteId as remoteId6_1_2_, address1_.id as id1_0_0_, address1_.city as city2_0_0_, address1_.country as country3_0_0_, address1_.mailBox as mailBox4_0_0_, address1_.nr as nr5_0_0_, address1_.postalCode as postalCo6_0_0_, address1_.street as street7_0_0_, remote2_.id as id1_2_1_, remote2_.frequency as frequenc2_2_1_, remote2_.isActive as isActive3_2_1_, remote2_.serialNumber as serialNu4_2_1_ from Person person0_ left outer join address address1_ on person0_.addressId=address1_.id left outer join Remote remote2_ on person0_.remoteId=remote2_.id where person0_.id=?
2017-12-29 21:54:48,278 +0100 [main] DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity model.entities.Person: select person0_.id as id1_1_2_, person0_.addressId as addressI5_1_2_, person0_.endOfContract as endOfCon2_1_2_, person0_.firstname as firstnam3_1_2_, person0_.lastname as lastname4_1_2_, person0_.remoteId as remoteId6_1_2_, address1_.id as id1_0_0_, address1_.city as city2_0_0_, address1_.country as country3_0_0_, address1_.mailBox as mailBox4_0_0_, address1_.nr as nr5_0_0_, address1_.postalCode as postalCo6_0_0_, address1_.street as street7_0_0_, remote2_.id as id1_2_1_, remote2_.frequency as frequenc2_2_1_, remote2_.isActive as isActive3_2_1_, remote2_.serialNumber as serialNu4_2_1_ from Person person0_ left outer join address address1_ on person0_.addressId=address1_.id left outer join Remote remote2_ on person0_.remoteId=remote2_.id where person0_.id=?
2017-12-29 21:54:48,293 +0100 [main] DEBUG (SchemaManagementToolCoordinator.java:56) - No actions specified; doing nothing
2017-12-29 21:54:48,293 +0100 [main] DEBUG (JtaPlatformInitiator.java:42) - No JtaPlatform was specified, checking resolver
2017-12-29 21:54:48,293 +0100 [main] DEBUG (JtaPlatformResolverInitiator.java:33) - No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
2017-12-29 21:54:48,296 +0100 [main] DEBUG (StandardJtaPlatformResolver.java:102) - Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2017-12-29 21:54:48,296 +0100 [main] DEBUG (NamedQueryRepository.java:151) - Checking 1 named HQL queries
2017-12-29 21:54:48,297 +0100 [main] DEBUG (NamedQueryRepository.java:155) - Checking named query: findUnusedAddress
2017-12-29 21:54:48,300 +0100 [main] DEBUG (QueryTranslatorFactoryInitiator.java:45) - QueryTranslatorFactory : org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory@c1bd0be
2017-12-29 21:54:48,300 +0100 [main] INFO  (QueryTranslatorFactoryInitiator.java:47) - HHH000397: Using ASTQueryTranslatorFactory
2017-12-29 21:54:48,320 +0100 [main] DEBUG (QueryTranslatorImpl.java:282) - parse() - HQL: SELECT a FROM model.entities.Address a WHERE a.id NOT IN (SELECT p.address.id FROM model.entities.Person p)
2017-12-29 21:54:48,326 +0100 [main] DEBUG (ErrorCounter.java:95) - throwQueryException() : no errors
2017-12-29 21:54:48,327 +0100 [main] DEBUG (QueryTranslatorImpl.java:305) - --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'FROM'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[IDENT] Node: 'model'
    |  |     |  |  \-[IDENT] Node: 'entities'
    |  |     |  \-[IDENT] Node: 'Address'
    |  |     \-[ALIAS] Node: 'a'
    |  \-[SELECT] Node: 'SELECT'
    |     \-[IDENT] Node: 'a'
    \-[WHERE] Node: 'WHERE'
       \-[NOT_IN] Node: 'not in'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'a'
          |  \-[IDENT] Node: 'id'
          \-[IN_LIST] Node: 'inList'
             \-[QUERY] Node: 'query'
                \-[SELECT_FROM] Node: 'SELECT_FROM'
                   +-[FROM] Node: 'FROM'
                   |  \-[RANGE] Node: 'RANGE'
                   |     +-[DOT] Node: '.'
                   |     |  +-[DOT] Node: '.'
                   |     |  |  +-[IDENT] Node: 'model'
                   |     |  |  \-[IDENT] Node: 'entities'
                   |     |  \-[IDENT] Node: 'Person'
                   |     \-[ALIAS] Node: 'p'
                   \-[SELECT] Node: 'SELECT'
                      \-[DOT] Node: '.'
                         +-[DOT] Node: '.'
                         |  +-[IDENT] Node: 'p'
                         |  \-[IDENT] Node: 'address'
                         \-[IDENT] Node: 'id'

2017-12-29 21:54:48,349 +0100 [main] DEBUG (HqlSqlBaseWalker.java:124) - select << begin [level=1, statement=select]
2017-12-29 21:54:48,359 +0100 [main] DEBUG (FromElement.java:147) - FromClause{level=1} : model.entities.Address (a) -> address0_
2017-12-29 21:54:48,360 +0100 [main] DEBUG (FromReferenceNode.java:60) - Resolved : a -> address0_.id
2017-12-29 21:54:48,362 +0100 [main] DEBUG (FromReferenceNode.java:60) - Resolved : a -> address0_.id
2017-12-29 21:54:48,363 +0100 [main] DEBUG (DotNode.java:666) - getDataType() : id -> org.hibernate.type.IntegerType@3ffcd140
2017-12-29 21:54:48,364 +0100 [main] DEBUG (FromReferenceNode.java:60) - Resolved : a.id -> address0_.id
2017-12-29 21:54:48,364 +0100 [main] DEBUG (HqlSqlBaseWalker.java:124) - select << begin [level=2, statement=select]
2017-12-29 21:54:48,365 +0100 [main] DEBUG (FromElement.java:147) - FromClause{level=2} : model.entities.Person (p) -> person1_
2017-12-29 21:54:48,365 +0100 [main] DEBUG (FromReferenceNode.java:60) - Resolved : p -> person1_.id
2017-12-29 21:54:48,365 +0100 [main] DEBUG (DotNode.java:666) - getDataType() : address -> org.hibernate.type.ManyToOneType(model.entities.Address)
2017-12-29 21:54:48,365 +0100 [main] DEBUG (DotNode.java:625) - dereferenceShortcut() : property id in model.entities.Person does not require a join.
2017-12-29 21:54:48,366 +0100 [main] DEBUG (DotNode.java:650) - Unresolved property path is now 'address.id'
2017-12-29 21:54:48,366 +0100 [main] DEBUG (FromReferenceNode.java:60) - Resolved : p.address -> person1_.addressId
2017-12-29 21:54:48,366 +0100 [main] DEBUG (DotNode.java:666) - getDataType() : address.id -> org.hibernate.type.IntegerType@3ffcd140
2017-12-29 21:54:48,366 +0100 [main] DEBUG (FromReferenceNode.java:60) - Resolved : p.address.id -> person1_.addressId
2017-12-29 21:54:48,366 +0100 [main] DEBUG (HqlSqlBaseWalker.java:128) - select : finishing up [level=2, statement=select]
2017-12-29 21:54:48,366 +0100 [main] DEBUG (HqlSqlWalker.java:747) - processQuery() :  ( SELECT ( {select clause} ( person1_.addressId ( person1_.addressId person1_.id address ) id ) ) ( FromClause{level=2} Person person1_ ) )
2017-12-29 21:54:48,370 +0100 [main] DEBUG (JoinProcessor.java:192) - Using FROM fragment [Person person1_]
2017-12-29 21:54:48,370 +0100 [main] DEBUG (HqlSqlBaseWalker.java:132) - select >> end [level=2, statement=select]
2017-12-29 21:54:48,371 +0100 [main] DEBUG (HqlSqlBaseWalker.java:128) - select : finishing up [level=1, statement=select]
2017-12-29 21:54:48,371 +0100 [main] DEBUG (HqlSqlWalker.java:747) - processQuery() :  ( SELECT ( {select clause} address0_.id ) ( FromClause{level=1} address address0_ ) ( WHERE ( not in ( address0_.id address0_.id id ) ( inList ( SELECT ( {select clause} ( person1_.addressId ( person1_.addressId person1_.id address ) id ) ) ( FromClause{level=2} Person person1_ ) ) ) ) ) )
2017-12-29 21:54:48,373 +0100 [main] DEBUG (JoinProcessor.java:192) - Using FROM fragment [address address0_]
2017-12-29 21:54:48,373 +0100 [main] DEBUG (HqlSqlBaseWalker.java:132) - select >> end [level=1, statement=select]
2017-12-29 21:54:48,373 +0100 [main] DEBUG (QueryTranslatorImpl.java:269) - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (address,Person)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'address0_.id as id1_0_' {alias=a, className=model.entities.Address, tableAlias=address0_}
    |  \-[SQL_TOKEN] SqlFragment: 'address0_.city as city2_0_, address0_.country as country3_0_, address0_.mailBox as mailBox4_0_, address0_.nr as nr5_0_, address0_.postalCode as postalCo6_0_, address0_.street as street7_0_'
    +-[FROM] FromClause: 'FROM' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[a], fromElementByTableAlias=[address0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'address address0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=a,role=null,tableName=address,tableAlias=address0_,origin=null,columns={,className=model.entities.Address}}
    \-[WHERE] SqlNode: 'WHERE'
       \-[NOT_IN] InLogicOperatorNode: 'not in'
          +-[DOT] DotNode: 'address0_.id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=id,path=a.id,tableAlias=address0_,className=model.entities.Address,classAlias=a}
          |  +-[ALIAS_REF] IdentNode: 'address0_.id' {alias=a, className=model.entities.Address, tableAlias=address0_}
          |  \-[IDENT] IdentNode: 'id' {originalText=id}
          \-[IN_LIST] SqlNode: 'inList'
             \-[SELECT] QueryNode: 'SELECT'  querySpaces (address,Person)
                +-[SELECT_CLAUSE] SelectClause: '{select clause}'
                |  \-[DOT] DotNode: 'person1_.addressId' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=address.id,path=p.address.id,tableAlias=person1_,className=model.entities.Person,classAlias=p}
                |     +-[DOT] DotNode: 'person1_.addressId' {propertyName=id,dereferenceType=UNKNOWN,getPropertyPath=address.id,path=p.address,tableAlias=person1_,className=model.entities.Person,classAlias=p}
                |     |  +-[ALIAS_REF] IdentNode: 'person1_.id' {alias=p, className=model.entities.Person, tableAlias=person1_}
                |     |  \-[IDENT] IdentNode: 'address' {originalText=address}
                |     \-[IDENT] IdentNode: 'id' {originalText=id}
                \-[FROM] FromClause: 'FROM' FromClause{level=2, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[p], fromElementByTableAlias=[person1_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
                   \-[FROM_FRAGMENT] FromElement: 'Person person1_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=p,role=null,tableName=Person,tableAlias=person1_,origin=null,columns={,className=model.entities.Person}}

2017-12-29 21:54:48,374 +0100 [main] DEBUG (ErrorCounter.java:95) - throwQueryException() : no errors
2017-12-29 21:54:48,378 +0100 [main] DEBUG (QueryTranslatorImpl.java:251) - HQL: SELECT a FROM model.entities.Address a WHERE a.id NOT IN (SELECT p.address.id FROM model.entities.Person p)
2017-12-29 21:54:48,378 +0100 [main] DEBUG (QueryTranslatorImpl.java:252) - SQL: select address0_.id as id1_0_, address0_.city as city2_0_, address0_.country as country3_0_, address0_.mailBox as mailBox4_0_, address0_.nr as nr5_0_, address0_.postalCode as postalCo6_0_, address0_.street as street7_0_ from address address0_ where address0_.id not in  (select person1_.addressId from Person person1_)
2017-12-29 21:54:48,378 +0100 [main] DEBUG (ErrorCounter.java:95) - throwQueryException() : no errors
2017-12-29 21:54:48,380 +0100 [main] DEBUG (NamedQueryRepository.java:167) - Checking 0 named SQL queries
2017-12-29 21:54:48,381 +0100 [main] DEBUG (SessionFactoryRegistry.java:52) - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@4baf352a
2017-12-29 21:54:48,382 +0100 [main] DEBUG (SessionFactoryRegistry.java:74) - Registering SessionFactory: 5943e309-5367-4587-b42c-91bb5477970d (<unnamed>)
2017-12-29 21:54:48,382 +0100 [main] DEBUG (SessionFactoryRegistry.java:81) - Not binding SessionFactory to JNDI, no JNDI name configured
2017-12-29 21:54:48,443 +0100 [main] DEBUG (StatisticsInitiator.java:82) - Statistics initialized [enabled=false]
2017-12-29 21:54:48,449 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:48,451 +0100 [main] DEBUG (DefaultMergeEventListener.java:93) - EntityCopyObserver strategy: disallow
2017-12-29 21:54:48,463 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:48,466 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:54:48,479 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 41
2017-12-29 21:54:48,479 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:48,480 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:48,481 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:54:48,483 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 41
2017-12-29 21:54:48,483 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:48,484 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:48,484 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:54:48,487 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 31
2017-12-29 21:54:48,488 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:48,488 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:48,488 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:48,489 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:48,490 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:54:48,490 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:48,491 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:48,492 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=1, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=41}
2017-12-29 21:54:48,492 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Lindsey, address=model.entities.Address#41, id=31, remote=model.entities.Remote#41, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Craft}
2017-12-29 21:54:48,492 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=6a854f2b-3cf2-47a3-ba1a-039a0452c51e, id=41, isActive=true, frequency=66537}
2017-12-29 21:54:48,542 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:48,542 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:48,544 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:48,545 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:48,545 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:54:48,546 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 42
2017-12-29 21:54:48,546 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:48,546 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:48,546 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:54:48,547 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 42
2017-12-29 21:54:48,547 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:48,547 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:48,548 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:54:48,549 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 32
2017-12-29 21:54:48,549 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:48,549 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:48,549 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:48,549 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:48,550 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:54:48,550 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:48,550 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:48,550 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=2, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=42}
2017-12-29 21:54:48,550 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=acbb730c-3854-4a4a-a2d9-0bd3a1a266f8, id=42, isActive=true, frequency=421900}
2017-12-29 21:54:48,551 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Erica, address=model.entities.Address#42, id=32, remote=model.entities.Remote#42, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Larsen}
2017-12-29 21:54:48,586 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:48,586 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:48,586 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:48,587 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:48,587 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:54:48,588 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 43
2017-12-29 21:54:48,588 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:48,589 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:48,589 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:54:48,590 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 43
2017-12-29 21:54:48,590 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:48,590 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:48,590 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:54:48,591 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 33
2017-12-29 21:54:48,591 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:48,592 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:48,592 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:48,592 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:48,592 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:54:48,592 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:48,592 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:48,592 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=fddfeff5-fa00-4863-8dd7-09c9e8ff0839, id=43, isActive=true, frequency=966144}
2017-12-29 21:54:48,592 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Ryan, address=model.entities.Address#43, id=33, remote=model.entities.Remote#43, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Levine}
2017-12-29 21:54:48,592 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=3, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=43}
2017-12-29 21:54:48,619 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:48,620 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:48,620 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:48,620 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:48,621 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:54:48,621 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 44
2017-12-29 21:54:48,621 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:48,622 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:48,622 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:54:48,623 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 44
2017-12-29 21:54:48,623 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:48,623 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:48,623 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:54:48,624 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 34
2017-12-29 21:54:48,624 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:48,625 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:48,625 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:48,625 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:48,625 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:54:48,625 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:48,625 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:48,625 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=a6774292-07c7-48b4-81d6-f038b9681b57, id=44, isActive=true, frequency=963023}
2017-12-29 21:54:48,626 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Erika, address=model.entities.Address#44, id=34, remote=model.entities.Remote#44, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Smith}
2017-12-29 21:54:48,626 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=4, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=44}
2017-12-29 21:54:48,652 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:48,653 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:48,653 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:48,653 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:48,653 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:54:48,654 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 45
2017-12-29 21:54:48,654 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:48,655 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:48,655 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:54:48,656 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 45
2017-12-29 21:54:48,656 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:48,657 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:48,657 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:54:48,658 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 35
2017-12-29 21:54:48,659 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:48,659 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:48,659 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:48,659 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:48,659 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:54:48,659 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:48,659 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:48,660 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=5, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=45}
2017-12-29 21:54:48,660 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Brooklyn, address=model.entities.Address#45, id=35, remote=model.entities.Remote#45, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Sloan}
2017-12-29 21:54:48,660 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=47b29727-2b6e-4932-bb53-3dff525a5b07, id=45, isActive=true, frequency=125695}
2017-12-29 21:54:48,698 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:48,698 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:48,699 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:48,699 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:48,699 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:54:48,700 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 46
2017-12-29 21:54:48,701 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:48,701 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:48,701 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:54:48,702 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 46
2017-12-29 21:54:48,702 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:48,702 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:48,703 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:54:48,703 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 36
2017-12-29 21:54:48,703 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:48,704 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:48,704 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:48,704 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:48,704 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:54:48,704 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:48,704 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:48,704 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=6, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=46}
2017-12-29 21:54:48,704 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=99403c02-1611-47ea-ad9b-f01d48282232, id=46, isActive=true, frequency=714388}
2017-12-29 21:54:48,705 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Karen, address=model.entities.Address#46, id=36, remote=model.entities.Remote#46, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Mayer}
2017-12-29 21:54:48,742 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:48,742 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:48,742 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:48,743 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:48,743 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:54:48,744 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 47
2017-12-29 21:54:48,744 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:48,744 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:48,744 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:54:48,745 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 47
2017-12-29 21:54:48,745 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:48,745 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:48,745 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:54:48,746 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 37
2017-12-29 21:54:48,746 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:48,746 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:48,746 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:48,747 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:48,747 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:54:48,747 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:48,747 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:48,747 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=7, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=47}
2017-12-29 21:54:48,747 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=5a285e25-4383-4e6d-bf6e-f70deddd634d, id=47, isActive=true, frequency=56421}
2017-12-29 21:54:48,747 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Eddie, address=model.entities.Address#47, id=37, remote=model.entities.Remote#47, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=O'neill}
2017-12-29 21:54:48,771 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:48,771 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:48,771 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:48,772 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:48,772 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:54:48,773 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 48
2017-12-29 21:54:48,773 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:48,774 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:48,774 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:54:48,775 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 48
2017-12-29 21:54:48,775 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:48,775 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:48,776 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:54:48,776 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 38
2017-12-29 21:54:48,777 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:48,777 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:48,777 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:48,777 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:48,780 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:54:48,780 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:48,780 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:48,781 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Nancy, address=model.entities.Address#48, id=38, remote=model.entities.Remote#48, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Stevens}
2017-12-29 21:54:48,781 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=8, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=48}
2017-12-29 21:54:48,781 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=cfebe324-4039-44de-be5b-2bb72f1ebe8a, id=48, isActive=true, frequency=956238}
2017-12-29 21:54:48,826 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:48,827 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:48,827 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:48,827 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:48,827 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:54:48,828 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 49
2017-12-29 21:54:48,828 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:48,829 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:48,829 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:54:48,829 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 49
2017-12-29 21:54:48,829 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:48,830 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:48,830 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:54:48,830 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 39
2017-12-29 21:54:48,831 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:48,831 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:48,831 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:48,831 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:48,831 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:54:48,831 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:48,832 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:48,832 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=9, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=49}
2017-12-29 21:54:48,832 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Chasity, address=model.entities.Address#49, id=39, remote=model.entities.Remote#49, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Conway}
2017-12-29 21:54:48,832 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=4c0d1475-ad23-4825-90c5-7329fe9efbd4, id=49, isActive=true, frequency=204569}
2017-12-29 21:54:48,853 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:48,853 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:48,854 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:48,854 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:48,854 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:54:48,855 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 50
2017-12-29 21:54:48,855 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:48,856 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:48,856 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:54:48,857 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 50
2017-12-29 21:54:48,857 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:48,857 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:48,858 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:54:48,858 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 40
2017-12-29 21:54:48,859 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:48,859 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:48,859 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:48,859 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:48,859 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:54:48,859 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:48,859 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:48,859 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=10, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=50}
2017-12-29 21:54:48,859 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=93b283fa-4a6e-4376-82ed-c4fe9b6ed2ec, id=50, isActive=true, frequency=600588}
2017-12-29 21:54:48,860 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Aaron, address=model.entities.Address#50, id=40, remote=model.entities.Remote#50, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=McCray}
2017-12-29 21:54:48,898 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:48,898 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:48,898 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:48,899 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:48,899 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:54:48,900 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 51
2017-12-29 21:54:48,900 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:48,900 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:48,900 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:54:48,901 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 51
2017-12-29 21:54:48,901 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:48,901 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:48,902 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:54:48,902 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 41
2017-12-29 21:54:48,903 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:48,903 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:48,903 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:48,903 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:48,903 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:54:48,904 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:48,904 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:48,904 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=abedb318-737e-404c-82c6-2707203413d4, id=51, isActive=true, frequency=330377}
2017-12-29 21:54:48,904 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Kendra, address=model.entities.Address#51, id=41, remote=model.entities.Remote#51, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Allen}
2017-12-29 21:54:48,904 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=11, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=51}
2017-12-29 21:54:48,942 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:48,942 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:48,943 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:48,946 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:48,946 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:54:48,948 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 52
2017-12-29 21:54:48,948 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:48,949 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:48,949 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:54:48,950 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 52
2017-12-29 21:54:48,951 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:48,951 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:48,952 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:54:48,953 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 42
2017-12-29 21:54:48,953 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:48,954 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:48,954 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:48,954 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:48,954 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:54:48,954 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:48,954 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:48,955 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=90911497-e4b7-4359-8329-8bc41920dc65, id=52, isActive=true, frequency=636988}
2017-12-29 21:54:48,955 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Jenna, address=model.entities.Address#52, id=42, remote=model.entities.Remote#52, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Burns}
2017-12-29 21:54:48,955 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=12, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=52}
2017-12-29 21:54:48,986 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:48,987 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:48,987 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:48,988 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:48,988 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:54:48,988 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 53
2017-12-29 21:54:48,989 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:48,989 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:48,989 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:54:48,990 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 53
2017-12-29 21:54:48,990 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:48,990 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:48,990 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:54:48,993 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 43
2017-12-29 21:54:48,993 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:48,994 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:48,994 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:48,994 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:48,994 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:54:48,994 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:48,995 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:48,995 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=13, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=53}
2017-12-29 21:54:48,995 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Jane, address=model.entities.Address#53, id=43, remote=model.entities.Remote#53, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Mayo}
2017-12-29 21:54:48,995 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=3890674d-ef28-4c9a-bde7-2ae881413363, id=53, isActive=true, frequency=380397}
2017-12-29 21:54:49,031 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,031 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,031 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:49,031 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,032 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:54:49,032 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 54
2017-12-29 21:54:49,032 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,033 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,033 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:54:49,033 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 54
2017-12-29 21:54:49,033 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,034 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,034 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:54:49,035 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 44
2017-12-29 21:54:49,035 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,035 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:49,035 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:49,035 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:49,035 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:54:49,036 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:49,036 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:49,036 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=14, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=54}
2017-12-29 21:54:49,036 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=2b1de6bc-8b92-4677-8b51-2b6542a55fb3, id=54, isActive=true, frequency=10407}
2017-12-29 21:54:49,036 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=George, address=model.entities.Address#54, id=44, remote=model.entities.Remote#54, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Suarez}
2017-12-29 21:54:49,065 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,066 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,066 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:49,067 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,067 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:54:49,068 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 55
2017-12-29 21:54:49,068 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,068 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,068 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:54:49,069 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 55
2017-12-29 21:54:49,069 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,069 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,070 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:54:49,070 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 45
2017-12-29 21:54:49,070 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,070 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:49,070 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:49,071 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:49,071 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:54:49,071 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:49,071 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:49,071 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=15, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=55}
2017-12-29 21:54:49,071 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=7eb1fe5f-bd0f-4251-bf29-62f13c1563c0, id=55, isActive=true, frequency=631509}
2017-12-29 21:54:49,071 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Janet, address=model.entities.Address#55, id=45, remote=model.entities.Remote#55, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Abbott}
2017-12-29 21:54:49,109 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,109 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,109 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:49,110 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,111 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:54:49,111 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 56
2017-12-29 21:54:49,112 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,112 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,112 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:54:49,113 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 56
2017-12-29 21:54:49,113 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,113 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,113 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:54:49,114 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 46
2017-12-29 21:54:49,115 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,115 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:49,115 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:49,115 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:49,115 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:54:49,115 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:49,116 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:49,116 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Steven, address=model.entities.Address#56, id=46, remote=model.entities.Remote#56, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Marshall}
2017-12-29 21:54:49,116 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=16, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=56}
2017-12-29 21:54:49,116 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=b1295aac-3080-4820-b12c-d6124d9732e5, id=56, isActive=true, frequency=206681}
2017-12-29 21:54:49,154 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,155 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,155 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:49,156 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,156 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:54:49,157 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 57
2017-12-29 21:54:49,157 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,157 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,158 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:54:49,158 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 57
2017-12-29 21:54:49,158 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,159 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,159 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:54:49,160 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 47
2017-12-29 21:54:49,160 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,161 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:49,161 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:49,161 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:49,161 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:54:49,161 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:49,161 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:49,161 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=17, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=57}
2017-12-29 21:54:49,162 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Shane, address=model.entities.Address#57, id=47, remote=model.entities.Remote#57, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Heath}
2017-12-29 21:54:49,162 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=54d978d9-3460-46e1-ae3d-a44074de502b, id=57, isActive=true, frequency=988909}
2017-12-29 21:54:49,197 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,198 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,198 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:49,199 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,199 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:54:49,199 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 58
2017-12-29 21:54:49,199 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,200 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,200 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:54:49,200 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 58
2017-12-29 21:54:49,201 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,201 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,201 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:54:49,202 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 48
2017-12-29 21:54:49,202 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,202 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:49,202 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:49,202 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:49,202 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:54:49,202 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:49,202 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:49,203 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=18, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=58}
2017-12-29 21:54:49,203 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=446302d5-aaf0-4724-85bb-4eee7716bbb1, id=58, isActive=true, frequency=736315}
2017-12-29 21:54:49,203 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Unborn, address=model.entities.Address#58, id=48, remote=model.entities.Remote#58, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Vega}
2017-12-29 21:54:49,253 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,253 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,253 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:49,254 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,254 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:54:49,255 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 59
2017-12-29 21:54:49,255 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,255 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,255 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:54:49,256 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 59
2017-12-29 21:54:49,256 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,256 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,257 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:54:49,258 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 49
2017-12-29 21:54:49,258 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,258 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:49,258 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:49,259 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:49,259 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:54:49,259 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:49,259 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:49,259 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=efd130d5-83a5-4c71-aa58-72ab811356eb, id=59, isActive=true, frequency=469707}
2017-12-29 21:54:49,259 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Kaitlyn, address=model.entities.Address#59, id=49, remote=model.entities.Remote#59, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Wilder}
2017-12-29 21:54:49,259 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=19, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=59}
2017-12-29 21:54:49,297 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,297 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,297 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:49,298 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,298 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:54:49,298 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 60
2017-12-29 21:54:49,299 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,299 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,299 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:54:49,299 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 60
2017-12-29 21:54:49,300 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,300 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,300 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:54:49,301 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 50
2017-12-29 21:54:49,301 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,301 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:49,301 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:49,301 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:49,301 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:54:49,301 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:49,302 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:49,302 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=1b1b0ca1-efae-4df0-8e67-5436860d5ec8, id=60, isActive=true, frequency=479898}
2017-12-29 21:54:49,302 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Donald, address=model.entities.Address#60, id=50, remote=model.entities.Remote#60, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Morgan}
2017-12-29 21:54:49,302 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=20, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=60}
2017-12-29 21:54:49,331 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,331 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,331 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:49,332 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,332 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:54:49,333 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 61
2017-12-29 21:54:49,333 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,333 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,333 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:54:49,334 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 61
2017-12-29 21:54:49,334 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,334 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,334 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:54:49,335 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 51
2017-12-29 21:54:49,335 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,335 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:49,335 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:49,335 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:49,336 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:54:49,336 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:49,336 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:49,336 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=21, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=61}
2017-12-29 21:54:49,336 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Alisha, address=model.entities.Address#61, id=51, remote=model.entities.Remote#61, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Dunn}
2017-12-29 21:54:49,336 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=377f6921-92a5-48dc-9011-9b56ad34d77a, id=61, isActive=true, frequency=512619}
2017-12-29 21:54:49,359 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,359 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,360 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:49,360 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,361 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:54:49,361 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 62
2017-12-29 21:54:49,362 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,362 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,362 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:54:49,363 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 62
2017-12-29 21:54:49,363 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,363 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,363 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:54:49,364 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 52
2017-12-29 21:54:49,364 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,365 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:49,365 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:49,365 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:49,365 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:54:49,365 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:49,365 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:49,365 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=22, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=62}
2017-12-29 21:54:49,365 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=fe6e88ce-8162-4c20-a182-33fce8ef859f, id=62, isActive=true, frequency=989462}
2017-12-29 21:54:49,365 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Marty, address=model.entities.Address#62, id=52, remote=model.entities.Remote#62, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Franco}
2017-12-29 21:54:49,386 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,387 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,387 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:49,388 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,388 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:54:49,388 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 63
2017-12-29 21:54:49,389 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,389 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,389 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:54:49,389 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 63
2017-12-29 21:54:49,389 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,390 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,390 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:54:49,390 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 53
2017-12-29 21:54:49,390 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,391 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:49,391 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:49,391 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:49,391 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:54:49,391 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:49,391 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:49,391 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=23, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=63}
2017-12-29 21:54:49,391 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=afdceb9d-0ad4-4903-88c4-e2b3ff02eb4d, id=63, isActive=true, frequency=361481}
2017-12-29 21:54:49,391 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Sam, address=model.entities.Address#63, id=53, remote=model.entities.Remote#63, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Jackson}
2017-12-29 21:54:49,419 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,419 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,419 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:49,420 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,420 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:54:49,421 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 64
2017-12-29 21:54:49,421 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,421 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,421 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:54:49,422 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 64
2017-12-29 21:54:49,422 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,422 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,422 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:54:49,423 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 54
2017-12-29 21:54:49,423 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,423 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:49,423 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:49,423 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:49,423 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:54:49,423 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:49,423 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:49,424 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Jeffrey, address=model.entities.Address#64, id=54, remote=model.entities.Remote#64, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Suarez}
2017-12-29 21:54:49,424 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=24, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=64}
2017-12-29 21:54:49,424 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=b4c5d9fe-0782-405b-84db-b4e2c907a27c, id=64, isActive=true, frequency=206107}
2017-12-29 21:54:49,454 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,454 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,455 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:49,455 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,455 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:54:49,456 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 65
2017-12-29 21:54:49,456 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,456 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,456 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:54:49,457 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 65
2017-12-29 21:54:49,457 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,457 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,457 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:54:49,458 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 55
2017-12-29 21:54:49,458 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,458 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:49,459 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:49,459 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:49,459 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:54:49,459 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:49,459 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:49,459 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=25, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=65}
2017-12-29 21:54:49,459 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Thomas, address=model.entities.Address#65, id=55, remote=model.entities.Remote#65, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Dotson}
2017-12-29 21:54:49,459 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=6f384b3a-a947-43c2-bf64-090d97fccd2d, id=65, isActive=true, frequency=673832}
2017-12-29 21:54:49,498 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,498 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,499 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:49,499 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,499 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:54:49,500 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 66
2017-12-29 21:54:49,500 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,500 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,501 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:54:49,501 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 66
2017-12-29 21:54:49,501 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,502 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,502 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:54:49,503 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 56
2017-12-29 21:54:49,503 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,503 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:49,503 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:49,504 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:49,504 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:54:49,504 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:49,504 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:49,504 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=26, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=66}
2017-12-29 21:54:49,504 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=4e1b3041-9637-4c43-a165-e3ace7e41aaa, id=66, isActive=true, frequency=872313}
2017-12-29 21:54:49,504 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Mickey, address=model.entities.Address#66, id=56, remote=model.entities.Remote#66, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Cruz}
2017-12-29 21:54:49,542 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,543 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,543 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:49,544 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,545 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:54:49,546 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 67
2017-12-29 21:54:49,546 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,546 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,547 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:54:49,547 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 67
2017-12-29 21:54:49,548 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,548 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,548 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:54:49,550 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 57
2017-12-29 21:54:49,550 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,550 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:49,550 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:49,551 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:49,551 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:54:49,551 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:49,551 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:49,551 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=882a5880-5c82-486f-abfb-fb34eb325d2c, id=67, isActive=true, frequency=707024}
2017-12-29 21:54:49,551 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Chuck, address=model.entities.Address#67, id=57, remote=model.entities.Remote#67, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Castillo}
2017-12-29 21:54:49,552 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=27, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=67}
2017-12-29 21:54:49,586 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,587 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,587 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:49,587 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,588 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:54:49,590 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 68
2017-12-29 21:54:49,590 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,591 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,591 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:54:49,595 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 68
2017-12-29 21:54:49,595 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,596 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,597 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:54:49,598 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 58
2017-12-29 21:54:49,598 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,598 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:49,598 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:49,598 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:49,599 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:54:49,599 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:49,599 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:49,599 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=958726b8-51a8-4c69-9fb7-d0e98bd500cb, id=68, isActive=true, frequency=68124}
2017-12-29 21:54:49,599 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Sierra, address=model.entities.Address#68, id=58, remote=model.entities.Remote#68, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Schneider}
2017-12-29 21:54:49,599 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=28, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=68}
2017-12-29 21:54:49,631 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,631 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,632 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:49,632 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,633 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:54:49,633 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 69
2017-12-29 21:54:49,634 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,634 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,634 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:54:49,635 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 69
2017-12-29 21:54:49,635 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,635 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,635 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:54:49,636 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 59
2017-12-29 21:54:49,636 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,636 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:49,636 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:49,636 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:49,636 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:54:49,636 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:49,636 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:49,636 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=29, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=69}
2017-12-29 21:54:49,637 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Michael, address=model.entities.Address#69, id=59, remote=model.entities.Remote#69, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Gross}
2017-12-29 21:54:49,637 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=d85e315d-a2a7-4cb8-9803-0d37c4be74ae, id=69, isActive=true, frequency=439955}
2017-12-29 21:54:49,664 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,664 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,665 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:49,665 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,665 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:54:49,666 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 70
2017-12-29 21:54:49,666 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,666 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,666 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:54:49,667 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 70
2017-12-29 21:54:49,667 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,667 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,667 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:54:49,668 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 60
2017-12-29 21:54:49,668 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,668 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:49,668 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:49,668 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:49,669 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 3 objects
2017-12-29 21:54:49,669 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:49,669 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:49,669 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=30, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=70}
2017-12-29 21:54:49,669 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=67d18937-f06c-495e-9537-5cf2372e2f55, id=70, isActive=true, frequency=776275}
2017-12-29 21:54:49,669 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Richard, address=model.entities.Address#70, id=60, remote=model.entities.Remote#70, endOfContract=Fri Dec 29 00:00:00 CET 2017, lastname=Wheeler}
2017-12-29 21:54:49,698 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,698 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,699 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:49,699 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,699 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:54:49,700 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 71
2017-12-29 21:54:49,700 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,700 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:49,700 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:49,700 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:49,700 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 21:54:49,700 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:49,700 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:49,701 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=69f69c72-1126-47fb-9907-742a52777a6d, id=71, isActive=false, frequency=557591}
2017-12-29 21:54:49,731 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,731 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,731 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:49,732 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,732 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:54:49,733 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 72
2017-12-29 21:54:49,733 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,733 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:49,733 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:49,733 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:49,733 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 21:54:49,733 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:49,733 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:49,734 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=16c204c9-54a7-4cc6-86c4-e3689c3fbd78, id=72, isActive=false, frequency=939410}
2017-12-29 21:54:49,764 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,765 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,766 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:49,768 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,769 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:54:49,772 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 73
2017-12-29 21:54:49,772 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,773 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:49,774 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:49,774 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:49,775 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 21:54:49,775 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:49,776 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:49,776 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=b8f6a590-cce0-4a0a-b894-c44b02a68e4c, id=73, isActive=false, frequency=195213}
2017-12-29 21:54:49,809 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,809 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,810 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:49,811 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,811 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:54:49,812 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 74
2017-12-29 21:54:49,812 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,812 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:49,812 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:49,812 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:49,813 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 21:54:49,813 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:49,813 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:49,813 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=8dc79720-25bf-4862-abf1-cec39b5a4513, id=74, isActive=false, frequency=433801}
2017-12-29 21:54:49,843 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,843 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,844 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:49,844 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,845 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:54:49,846 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 75
2017-12-29 21:54:49,846 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,846 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:49,846 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:49,846 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:49,847 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 21:54:49,847 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:49,847 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:49,847 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=cf10262b-726f-4539-aa84-9f260290ed51, id=75, isActive=false, frequency=988493}
2017-12-29 21:54:49,875 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,876 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,876 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:49,876 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,876 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:54:49,877 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 76
2017-12-29 21:54:49,877 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,877 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:49,877 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:49,877 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:49,877 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 21:54:49,877 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:49,877 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:49,878 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=5868b9da-c2b8-4ce3-8a6b-107fb9a776a0, id=76, isActive=false, frequency=840925}
2017-12-29 21:54:49,909 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,909 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,910 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:49,910 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,910 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:54:49,911 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 77
2017-12-29 21:54:49,911 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,911 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:49,911 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:49,911 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:49,911 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 21:54:49,911 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:49,911 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:49,911 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=5e0b91b5-2131-4b40-8912-0835ddf5143f, id=77, isActive=false, frequency=477279}
2017-12-29 21:54:49,942 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,942 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,943 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:49,943 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,943 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:54:49,944 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 78
2017-12-29 21:54:49,944 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,944 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:49,944 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:49,944 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:49,945 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 21:54:49,945 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:49,945 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:49,945 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=f8c3a758-3211-45d9-a07b-6b5db1606d5d, id=78, isActive=false, frequency=150472}
2017-12-29 21:54:49,976 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,976 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:49,977 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:49,977 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:49,977 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:54:49,978 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 79
2017-12-29 21:54:49,978 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:49,978 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:49,979 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:49,979 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:49,979 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 21:54:49,979 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:49,979 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:49,979 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=3db6747c-2815-4485-95d0-c79c84aa7264, id=79, isActive=false, frequency=213573}
2017-12-29 21:54:50,009 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:50,009 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:50,009 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:50,010 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:50,010 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:54:50,011 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 80
2017-12-29 21:54:50,011 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:50,011 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:50,011 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:50,011 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:50,011 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 21:54:50,011 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:50,011 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:50,011 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=1313d0e7-4007-4514-9a12-f654176ca168, id=80, isActive=false, frequency=204053}
2017-12-29 21:54:50,042 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:50,042 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:50,043 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:50,043 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:50,044 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:54:50,044 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 71
2017-12-29 21:54:50,045 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:50,045 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:50,045 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:50,045 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:50,045 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 21:54:50,045 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:50,045 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:50,045 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=België, mailBox=31, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=71}
2017-12-29 21:54:50,075 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:50,075 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:50,076 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:50,076 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:50,076 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:54:50,077 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 72
2017-12-29 21:54:50,077 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:50,078 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:50,078 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:50,078 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:50,078 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 21:54:50,078 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:50,078 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:50,078 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=België, mailBox=32, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=72}
2017-12-29 21:54:50,109 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:50,109 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:50,109 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:50,110 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:50,110 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:54:50,110 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 73
2017-12-29 21:54:50,110 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:50,110 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:50,110 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:50,110 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:50,111 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 21:54:50,111 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:50,111 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:50,111 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=België, mailBox=33, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=73}
2017-12-29 21:54:50,142 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:50,142 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:50,142 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:50,143 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:50,143 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:54:50,144 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 74
2017-12-29 21:54:50,144 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:50,144 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:50,144 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:50,144 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:50,145 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 21:54:50,145 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:50,145 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:50,145 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=België, mailBox=34, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=74}
2017-12-29 21:54:50,176 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:50,176 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:50,176 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:50,177 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:50,177 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:54:50,177 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 75
2017-12-29 21:54:50,178 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:50,178 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:50,178 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:50,178 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:50,178 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 21:54:50,178 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:50,178 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:50,178 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=België, mailBox=35, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=75}
2017-12-29 21:54:50,209 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:50,209 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:50,210 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:50,210 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:50,211 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:54:50,212 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 76
2017-12-29 21:54:50,212 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:50,212 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:50,212 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:50,212 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:50,212 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 21:54:50,212 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:50,212 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:50,212 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=België, mailBox=36, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=76}
2017-12-29 21:54:50,243 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:50,243 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:50,244 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:50,244 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:50,244 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:54:50,245 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 77
2017-12-29 21:54:50,245 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:50,245 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:50,245 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:50,246 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:50,246 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 21:54:50,246 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:50,246 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:50,246 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=België, mailBox=37, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=77}
2017-12-29 21:54:50,275 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:50,276 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:50,276 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:50,277 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:50,278 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:54:50,279 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 78
2017-12-29 21:54:50,279 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:50,280 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:50,280 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:50,280 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:50,281 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 21:54:50,281 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:50,281 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:50,281 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=België, mailBox=38, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=78}
2017-12-29 21:54:50,309 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:50,310 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:50,310 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:50,311 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:50,312 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:54:50,313 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 79
2017-12-29 21:54:50,313 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:50,313 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:50,313 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:50,313 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:50,314 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 21:54:50,314 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:50,314 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:50,314 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=België, mailBox=39, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=79}
2017-12-29 21:54:50,342 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:50,342 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:50,343 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:54:50,344 +0100 [main] DEBUG (ActionQueue.java:279) - Executing identity-insert immediately
2017-12-29 21:54:50,344 +0100 [main] DEBUG (SqlStatementLogger.java:92) - insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:54:50,345 +0100 [main] DEBUG (IdentifierGeneratorHelper.java:78) - Natively generated identity: 80
2017-12-29 21:54:50,345 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:115) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:54:50,345 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:54:50,346 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:54:50,346 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:54:50,346 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 1 objects
2017-12-29 21:54:50,346 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:54:50,346 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:54:50,346 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=België, mailBox=40, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=80}
2017-12-29 21:54:50,376 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:54:50,376 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:55:17,751 +0100 [pool-1-thread-1] DEBUG (PooledConnections.java:51) - Connection pool now considered primed; min-size will be maintained
2017-12-29 21:57:52,409 +0100 [main] DEBUG (HibernatePersistenceProvider.java:38) - Logging Provider: org.jboss.logging.Log4jLoggerProvider
2017-12-29 21:57:52,476 +0100 [main] DEBUG (HibernatePersistenceProvider.java:98) - Located and parsed 1 persistence units; checking each
2017-12-29 21:57:52,477 +0100 [main] DEBUG (HibernatePersistenceProvider.java:106) - Checking persistence-unit [name=Afstandsbediening, explicit-provider=null] against incoming persistence unit name [Afstandsbediening]
2017-12-29 21:57:52,477 +0100 [main] DEBUG (ProviderChecker.java:96) - No PersistenceProvider explicitly requested, assuming Hibernate
2017-12-29 21:57:52,481 +0100 [main] DEBUG (LogHelper.java:102) - PersistenceUnitInfo [
	name: Afstandsbediening
	persistence provider classname: null
	classloader: null
	excludeUnlistedClasses: false
	JTA datasource: null
	Non JTA datasource: null
	Transaction type: RESOURCE_LOCAL
	PU root URL: file:/C:/Users/BenJolien/git/2018-Januari/8-Afstandsbediening/target/classes/
	Shared Cache Mode: null
	Validation Mode: null
	Jar files URLs []
	Managed classes names [
		model.entities.Remote
		model.entities.Person
		model.entities.Address]
	Mapping files names []
	Properties [
		javax.persistence.jdbc.driver: com.mysql.jdbc.Driver
		javax.persistence.jdbc.password: userDB
		javax.persistence.jdbc.url: jdbc:mysql://localhost:3306/DbRemote
		javax.persistence.jdbc.user: userDB]
2017-12-29 21:57:52,486 +0100 [main] DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
2017-12-29 21:57:52,487 +0100 [main] DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.secure.spi.JaccIntegrator].
2017-12-29 21:57:52,489 +0100 [main] DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.cache.internal.CollectionCacheInvalidator].
2017-12-29 21:57:52,490 +0100 [main] DEBUG (IntegratorServiceImpl.java:46) - Adding Integrator [org.hibernate.jpa.event.spi.JpaIntegrator].
2017-12-29 21:57:52,537 +0100 [main] INFO  (Version.java:45) - HHH000412: Hibernate Core {5.2.12.Final}
2017-12-29 21:57:52,538 +0100 [main] INFO  (Environment.java:213) - HHH000206: hibernate.properties not found
2017-12-29 21:57:52,546 +0100 [main] DEBUG (ServiceBinding.java:68) - Overriding existing service binding [org.hibernate.secure.spi.JaccService]
2017-12-29 21:57:52,562 +0100 [main] DEBUG (RegionFactoryInitiator.java:75) - Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
2017-12-29 21:57:52,568 +0100 [main] INFO  (JavaReflectionManager.java:66) - HCANN000001: Hibernate Commons Annotations {5.0.1.Final}
2017-12-29 21:57:52,614 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration boolean -> org.hibernate.type.BooleanType@2890c451
2017-12-29 21:57:52,614 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration boolean -> org.hibernate.type.BooleanType@2890c451
2017-12-29 21:57:52,616 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@2890c451
2017-12-29 21:57:52,617 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@75c072cb
2017-12-29 21:57:52,618 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration true_false -> org.hibernate.type.TrueFalseType@2893de87
2017-12-29 21:57:52,619 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration yes_no -> org.hibernate.type.YesNoType@12d3a4e9
2017-12-29 21:57:52,620 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration byte -> org.hibernate.type.ByteType@2aece37d
2017-12-29 21:57:52,621 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration byte -> org.hibernate.type.ByteType@2aece37d
2017-12-29 21:57:52,621 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@2aece37d
2017-12-29 21:57:52,622 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration character -> org.hibernate.type.CharacterType@5ef60048
2017-12-29 21:57:52,622 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration char -> org.hibernate.type.CharacterType@5ef60048
2017-12-29 21:57:52,622 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@5ef60048
2017-12-29 21:57:52,623 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration short -> org.hibernate.type.ShortType@17c1bced
2017-12-29 21:57:52,623 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration short -> org.hibernate.type.ShortType@17c1bced
2017-12-29 21:57:52,624 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Short -> org.hibernate.type.ShortType@17c1bced
2017-12-29 21:57:52,625 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration integer -> org.hibernate.type.IntegerType@53ca01a2
2017-12-29 21:57:52,625 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration int -> org.hibernate.type.IntegerType@53ca01a2
2017-12-29 21:57:52,625 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@53ca01a2
2017-12-29 21:57:52,627 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration long -> org.hibernate.type.LongType@7920ba90
2017-12-29 21:57:52,628 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration long -> org.hibernate.type.LongType@7920ba90
2017-12-29 21:57:52,628 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Long -> org.hibernate.type.LongType@7920ba90
2017-12-29 21:57:52,629 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration float -> org.hibernate.type.FloatType@78b1cc93
2017-12-29 21:57:52,629 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration float -> org.hibernate.type.FloatType@78b1cc93
2017-12-29 21:57:52,630 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Float -> org.hibernate.type.FloatType@78b1cc93
2017-12-29 21:57:52,631 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration double -> org.hibernate.type.DoubleType@436a4e4b
2017-12-29 21:57:52,631 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration double -> org.hibernate.type.DoubleType@436a4e4b
2017-12-29 21:57:52,631 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@436a4e4b
2017-12-29 21:57:52,632 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@b62fe6d
2017-12-29 21:57:52,632 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@b62fe6d
2017-12-29 21:57:52,633 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration big_integer -> org.hibernate.type.BigIntegerType@5db45159
2017-12-29 21:57:52,633 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@5db45159
2017-12-29 21:57:52,634 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration string -> org.hibernate.type.StringType@327b636c
2017-12-29 21:57:52,634 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.String -> org.hibernate.type.StringType@327b636c
2017-12-29 21:57:52,634 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration nstring -> org.hibernate.type.StringNVarcharType@71c8becc
2017-12-29 21:57:52,635 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@d83da2e
2017-12-29 21:57:52,635 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration url -> org.hibernate.type.UrlType@78047b92
2017-12-29 21:57:52,635 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.net.URL -> org.hibernate.type.UrlType@78047b92
2017-12-29 21:57:52,636 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration Duration -> org.hibernate.type.DurationType@4387b79e
2017-12-29 21:57:52,636 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.Duration -> org.hibernate.type.DurationType@4387b79e
2017-12-29 21:57:52,646 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration Instant -> org.hibernate.type.InstantType@70be0a2b
2017-12-29 21:57:52,646 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.Instant -> org.hibernate.type.InstantType@70be0a2b
2017-12-29 21:57:52,647 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration LocalDateTime -> org.hibernate.type.LocalDateTimeType@1e730495
2017-12-29 21:57:52,648 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.LocalDateTime -> org.hibernate.type.LocalDateTimeType@1e730495
2017-12-29 21:57:52,648 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration LocalDate -> org.hibernate.type.LocalDateType@75f32542
2017-12-29 21:57:52,649 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.LocalDate -> org.hibernate.type.LocalDateType@75f32542
2017-12-29 21:57:52,650 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration LocalTime -> org.hibernate.type.LocalTimeType@2fd6b6c7
2017-12-29 21:57:52,650 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.LocalTime -> org.hibernate.type.LocalTimeType@2fd6b6c7
2017-12-29 21:57:52,651 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@37918c79
2017-12-29 21:57:52,651 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.OffsetDateTime -> org.hibernate.type.OffsetDateTimeType@37918c79
2017-12-29 21:57:52,651 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration OffsetTime -> org.hibernate.type.OffsetTimeType@3c72f59f
2017-12-29 21:57:52,652 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.OffsetTime -> org.hibernate.type.OffsetTimeType@3c72f59f
2017-12-29 21:57:52,654 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@2928854b
2017-12-29 21:57:52,654 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.time.ZonedDateTime -> org.hibernate.type.ZonedDateTimeType@2928854b
2017-12-29 21:57:52,655 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration date -> org.hibernate.type.DateType@124c278f
2017-12-29 21:57:52,655 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.sql.Date -> org.hibernate.type.DateType@124c278f
2017-12-29 21:57:52,655 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration time -> org.hibernate.type.TimeType@6973bf95
2017-12-29 21:57:52,656 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.sql.Time -> org.hibernate.type.TimeType@6973bf95
2017-12-29 21:57:52,656 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration timestamp -> org.hibernate.type.TimestampType@7a4ccb53
2017-12-29 21:57:52,657 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@7a4ccb53
2017-12-29 21:57:52,657 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.Date -> org.hibernate.type.TimestampType@7a4ccb53
2017-12-29 21:57:52,658 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@18ce0030
2017-12-29 21:57:52,659 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration calendar -> org.hibernate.type.CalendarType@6b26e945
2017-12-29 21:57:52,659 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@6b26e945
2017-12-29 21:57:52,659 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@6b26e945
2017-12-29 21:57:52,659 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@318ba8c8
2017-12-29 21:57:52,660 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration locale -> org.hibernate.type.LocaleType@1a04f701
2017-12-29 21:57:52,660 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@1a04f701
2017-12-29 21:57:52,661 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration currency -> org.hibernate.type.CurrencyType@56de5251
2017-12-29 21:57:52,661 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@56de5251
2017-12-29 21:57:52,661 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration timezone -> org.hibernate.type.TimeZoneType@71b1176b
2017-12-29 21:57:52,661 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@71b1176b
2017-12-29 21:57:52,662 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration class -> org.hibernate.type.ClassType@5dd6264
2017-12-29 21:57:52,662 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Class -> org.hibernate.type.ClassType@5dd6264
2017-12-29 21:57:52,663 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@5e316c74
2017-12-29 21:57:52,663 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@5e316c74
2017-12-29 21:57:52,663 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@161479c6
2017-12-29 21:57:52,664 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration binary -> org.hibernate.type.BinaryType@778d1062
2017-12-29 21:57:52,664 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration byte[] -> org.hibernate.type.BinaryType@778d1062
2017-12-29 21:57:52,664 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration [B -> org.hibernate.type.BinaryType@778d1062
2017-12-29 21:57:52,665 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@6e0dec4a
2017-12-29 21:57:52,665 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@6e0dec4a
2017-12-29 21:57:52,665 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@6e0dec4a
2017-12-29 21:57:52,666 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration row_version -> org.hibernate.type.RowVersionType@794cb805
2017-12-29 21:57:52,667 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration image -> org.hibernate.type.ImageType@3967e60c
2017-12-29 21:57:52,668 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration characters -> org.hibernate.type.CharArrayType@5cee5251
2017-12-29 21:57:52,668 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration char[] -> org.hibernate.type.CharArrayType@5cee5251
2017-12-29 21:57:52,668 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration [C -> org.hibernate.type.CharArrayType@5cee5251
2017-12-29 21:57:52,669 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@4ddced80
2017-12-29 21:57:52,670 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@4ddced80
2017-12-29 21:57:52,670 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@4ddced80
2017-12-29 21:57:52,670 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration text -> org.hibernate.type.TextType@363ee3a2
2017-12-29 21:57:52,671 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration ntext -> org.hibernate.type.NTextType@3c22fc4c
2017-12-29 21:57:52,673 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration blob -> org.hibernate.type.BlobType@35047d03
2017-12-29 21:57:52,673 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@35047d03
2017-12-29 21:57:52,673 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@4c9f8c13
2017-12-29 21:57:52,675 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration clob -> org.hibernate.type.ClobType@5bd03f44
2017-12-29 21:57:52,675 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@5bd03f44
2017-12-29 21:57:52,677 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration nclob -> org.hibernate.type.NClobType@63355449
2017-12-29 21:57:52,677 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@63355449
2017-12-29 21:57:52,677 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@48ae9b55
2017-12-29 21:57:52,678 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@c267ef4
2017-12-29 21:57:52,679 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration serializable -> org.hibernate.type.SerializableType@7a69b07
2017-12-29 21:57:52,680 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration object -> org.hibernate.type.ObjectType@15c43bd9
2017-12-29 21:57:52,680 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@15c43bd9
2017-12-29 21:57:52,681 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@15eb5ee5
2017-12-29 21:57:52,681 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@2145b572
2017-12-29 21:57:52,681 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@39529185
2017-12-29 21:57:52,681 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@72f926e6
2017-12-29 21:57:52,681 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@3daa422a
2017-12-29 21:57:52,681 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@31c88ec8
2017-12-29 21:57:52,682 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@1cbbffcd
2017-12-29 21:57:52,682 +0100 [main] DEBUG (BasicTypeRegistry.java:145) - Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@27ce24aa
2017-12-29 21:57:52,688 +0100 [main] WARN  (DriverManagerConnectionProviderImpl.java:70) - HHH10001002: Using Hibernate built-in connection pool (not for production use!)
2017-12-29 21:57:52,697 +0100 [main] INFO  (DriverManagerConnectionProviderImpl.java:126) - HHH10001005: using driver [com.mysql.jdbc.Driver] at URL [jdbc:mysql://localhost:3306/DbRemote]
2017-12-29 21:57:52,697 +0100 [main] INFO  (DriverManagerConnectionProviderImpl.java:132) - HHH10001001: Connection properties: {user=userDB, password=userDB}
2017-12-29 21:57:52,697 +0100 [main] INFO  (DriverManagerConnectionProviderImpl.java:140) - HHH10001003: Autocommit mode: false
2017-12-29 21:57:52,699 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Initializing Connection pool with 1 Connections
2017-12-29 21:57:52,700 +0100 [main] INFO  (PooledConnections.java:41) - HHH000115: Hibernate connection pool size: 20 (min=1)
2017-12-29 21:57:52,940 +0100 [main] DEBUG (JdbcEnvironmentInitiator.java:72) - Database ->
       name : MySQL
    version : 5.7.20-log
      major : 5
      minor : 7
2017-12-29 21:57:52,940 +0100 [main] DEBUG (JdbcEnvironmentInitiator.java:83) - Driver ->
       name : MySQL Connector Java
    version : mysql-connector-java-5.1.45 ( Revision: 9131eefa398531c7dc98776e8a3fe839e544c5b2 )
      major : 5
      minor : 1
2017-12-29 21:57:52,941 +0100 [main] DEBUG (DelegatingBasicLogger.java:389) - JDBC version : 4.0
2017-12-29 21:57:52,950 +0100 [main] INFO  (Dialect.java:157) - HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
2017-12-29 21:57:52,974 +0100 [main] DEBUG (IdentifierHelperBuilder.java:117) - JDBC driver metadata reported database stores quoted identifiers in more than one case
2017-12-29 21:57:52,977 +0100 [main] DEBUG (IdentifierHelperBuilder.java:191) - IdentifierCaseStrategy for both quoted and unquoted identifiers was set to the same strategy [LOWER]; that will likely lead to problems in schema update and validation if using quoted identifiers
2017-12-29 21:57:53,057 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
2017-12-29 21:57:53,057 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
2017-12-29 21:57:53,058 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
2017-12-29 21:57:53,058 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
2017-12-29 21:57:53,058 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
2017-12-29 21:57:53,059 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
2017-12-29 21:57:53,059 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
2017-12-29 21:57:53,060 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2017-12-29 21:57:53,061 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
2017-12-29 21:57:53,062 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
2017-12-29 21:57:53,062 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
2017-12-29 21:57:53,063 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
2017-12-29 21:57:53,064 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
2017-12-29 21:57:53,064 +0100 [main] DEBUG (DefaultIdentifierGeneratorFactory.java:81) - Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
2017-12-29 21:57:53,082 +0100 [main] DEBUG (Namespace.java:47) - Created database namespace [logicalName=Name{catalog=null, schema=null}, physicalName=Name{catalog=null, schema=null}]
2017-12-29 21:57:53,106 +0100 [main] DEBUG (AnnotationBinder.java:511) - Binding entity from annotated class: model.entities.Address
2017-12-29 21:57:53,117 +0100 [main] DEBUG (QueryBinder.java:80) - Binding named query: findUnusedAddress => SELECT a FROM Address a WHERE a.id NOT IN (SELECT p.address.id FROM Person p)
2017-12-29 21:57:53,122 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2017-12-29 21:57:53,126 +0100 [main] DEBUG (EntityBinder.java:419) - Import with entity name Address
2017-12-29 21:57:53,128 +0100 [main] DEBUG (EntityBinder.java:695) - Bind entity model.entities.Address on table address
2017-12-29 21:57:53,143 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=id, insertable=true, updatable=true, unique=false}
2017-12-29 21:57:53,145 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property id with lazy=false
2017-12-29 21:57:53,146 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:id]
2017-12-29 21:57:53,147 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for id
2017-12-29 21:57:53,148 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property id
2017-12-29 21:57:53,151 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=city, insertable=true, updatable=true, unique=false}
2017-12-29 21:57:53,151 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property city with lazy=false
2017-12-29 21:57:53,151 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:city]
2017-12-29 21:57:53,151 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for city
2017-12-29 21:57:53,152 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property city
2017-12-29 21:57:53,152 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=country, insertable=true, updatable=true, unique=false}
2017-12-29 21:57:53,152 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property country with lazy=false
2017-12-29 21:57:53,152 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:country]
2017-12-29 21:57:53,152 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for country
2017-12-29 21:57:53,152 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property country
2017-12-29 21:57:53,153 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=mailBox, insertable=true, updatable=true, unique=false}
2017-12-29 21:57:53,153 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property mailBox with lazy=false
2017-12-29 21:57:53,153 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:mailBox]
2017-12-29 21:57:53,153 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for mailBox
2017-12-29 21:57:53,153 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property mailBox
2017-12-29 21:57:53,153 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=nr, insertable=true, updatable=true, unique=false}
2017-12-29 21:57:53,153 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property nr with lazy=false
2017-12-29 21:57:53,153 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:nr]
2017-12-29 21:57:53,153 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for nr
2017-12-29 21:57:53,154 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property nr
2017-12-29 21:57:53,154 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=postalCode, insertable=true, updatable=true, unique=false}
2017-12-29 21:57:53,154 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property postalCode with lazy=false
2017-12-29 21:57:53,154 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:postalCode]
2017-12-29 21:57:53,154 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for postalCode
2017-12-29 21:57:53,154 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property postalCode
2017-12-29 21:57:53,154 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(address), mappingColumn=street, insertable=true, updatable=true, unique=false}
2017-12-29 21:57:53,154 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property street with lazy=false
2017-12-29 21:57:53,155 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Address:street]
2017-12-29 21:57:53,155 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for street
2017-12-29 21:57:53,155 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property street
2017-12-29 21:57:53,155 +0100 [main] DEBUG (AnnotationBinder.java:511) - Binding entity from annotated class: model.entities.Remote
2017-12-29 21:57:53,155 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2017-12-29 21:57:53,156 +0100 [main] DEBUG (EntityBinder.java:419) - Import with entity name Remote
2017-12-29 21:57:53,156 +0100 [main] DEBUG (EntityBinder.java:695) - Bind entity model.entities.Remote on table Remote
2017-12-29 21:57:53,156 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Remote), mappingColumn=id, insertable=true, updatable=true, unique=false}
2017-12-29 21:57:53,156 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property id with lazy=false
2017-12-29 21:57:53,157 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Remote:id]
2017-12-29 21:57:53,157 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for id
2017-12-29 21:57:53,157 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property id
2017-12-29 21:57:53,157 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Remote), mappingColumn=frequency, insertable=true, updatable=true, unique=false}
2017-12-29 21:57:53,157 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property frequency with lazy=false
2017-12-29 21:57:53,157 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Remote:frequency]
2017-12-29 21:57:53,157 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for frequency
2017-12-29 21:57:53,158 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property frequency
2017-12-29 21:57:53,158 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Remote), mappingColumn=isActive, insertable=true, updatable=true, unique=false}
2017-12-29 21:57:53,158 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property isActive with lazy=false
2017-12-29 21:57:53,158 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Remote:isActive]
2017-12-29 21:57:53,158 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for isActive
2017-12-29 21:57:53,158 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property isActive
2017-12-29 21:57:53,159 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Remote), mappingColumn=serialNumber, insertable=true, updatable=true, unique=false}
2017-12-29 21:57:53,159 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property serialNumber with lazy=false
2017-12-29 21:57:53,159 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Remote:serialNumber]
2017-12-29 21:57:53,159 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for serialNumber
2017-12-29 21:57:53,159 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property serialNumber
2017-12-29 21:57:53,160 +0100 [main] DEBUG (AnnotationBinder.java:511) - Binding entity from annotated class: model.entities.Person
2017-12-29 21:57:53,160 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
2017-12-29 21:57:53,160 +0100 [main] DEBUG (EntityBinder.java:419) - Import with entity name Person
2017-12-29 21:57:53,160 +0100 [main] DEBUG (EntityBinder.java:695) - Bind entity model.entities.Person on table Person
2017-12-29 21:57:53,164 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Person), mappingColumn=id, insertable=true, updatable=true, unique=false}
2017-12-29 21:57:53,164 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property id with lazy=false
2017-12-29 21:57:53,164 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Person:id]
2017-12-29 21:57:53,165 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for id
2017-12-29 21:57:53,165 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property id
2017-12-29 21:57:53,166 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='addressId', referencedColumn='', mappedBy=''}
2017-12-29 21:57:53,166 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Person), mappingColumn=address, insertable=true, updatable=true, unique=false}
2017-12-29 21:57:53,167 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property address
2017-12-29 21:57:53,168 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Person), mappingColumn=endOfContract, insertable=true, updatable=true, unique=false}
2017-12-29 21:57:53,168 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property endOfContract with lazy=false
2017-12-29 21:57:53,168 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Person:endOfContract]
2017-12-29 21:57:53,168 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for endOfContract
2017-12-29 21:57:53,168 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property endOfContract
2017-12-29 21:57:53,168 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Person), mappingColumn=firstname, insertable=true, updatable=true, unique=false}
2017-12-29 21:57:53,168 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property firstname with lazy=false
2017-12-29 21:57:53,168 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Person:firstname]
2017-12-29 21:57:53,168 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for firstname
2017-12-29 21:57:53,169 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property firstname
2017-12-29 21:57:53,169 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Person), mappingColumn=lastname, insertable=true, updatable=true, unique=false}
2017-12-29 21:57:53,169 +0100 [main] DEBUG (PropertyBinder.java:174) - MetadataSourceProcessor property lastname with lazy=false
2017-12-29 21:57:53,169 +0100 [main] DEBUG (AbstractPropertyHolder.java:95) - Attempting to locate auto-apply AttributeConverter for property [model.entities.Person:lastname]
2017-12-29 21:57:53,169 +0100 [main] DEBUG (SimpleValueBinder.java:411) - building SimpleValue for lastname
2017-12-29 21:57:53,169 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property lastname
2017-12-29 21:57:53,169 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3JoinColumn{logicalColumnName='remoteId', referencedColumn='', mappedBy=''}
2017-12-29 21:57:53,169 +0100 [main] DEBUG (Ejb3Column.java:213) - Binding column: Ejb3Column{table=org.hibernate.mapping.Table(Person), mappingColumn=remote, insertable=true, updatable=true, unique=false}
2017-12-29 21:57:53,169 +0100 [main] DEBUG (PropertyBinder.java:265) - Building property remote
2017-12-29 21:57:53,170 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for id
2017-12-29 21:57:53,170 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for city
2017-12-29 21:57:53,170 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for country
2017-12-29 21:57:53,170 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for mailBox
2017-12-29 21:57:53,171 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for nr
2017-12-29 21:57:53,171 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for postalCode
2017-12-29 21:57:53,171 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for street
2017-12-29 21:57:53,171 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for id
2017-12-29 21:57:53,171 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for frequency
2017-12-29 21:57:53,171 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for isActive
2017-12-29 21:57:53,171 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for serialNumber
2017-12-29 21:57:53,171 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for id
2017-12-29 21:57:53,171 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for endOfContract
2017-12-29 21:57:53,171 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for firstname
2017-12-29 21:57:53,171 +0100 [main] DEBUG (SimpleValueBinder.java:456) - Starting fillSimpleValue for lastname
2017-12-29 21:57:53,174 +0100 [main] DEBUG (PrimaryKey.java:35) - Forcing column [id] to be non-null as it is part of the primary key for table [address]
2017-12-29 21:57:53,174 +0100 [main] DEBUG (PrimaryKey.java:35) - Forcing column [id] to be non-null as it is part of the primary key for table [remote]
2017-12-29 21:57:53,174 +0100 [main] DEBUG (PrimaryKey.java:35) - Forcing column [id] to be non-null as it is part of the primary key for table [person]
2017-12-29 21:57:53,174 +0100 [main] DEBUG (InFlightMetadataCollectorImpl.java:1798) - Resolving reference to class: model.entities.Address
2017-12-29 21:57:53,176 +0100 [main] DEBUG (InFlightMetadataCollectorImpl.java:1798) - Resolving reference to class: model.entities.Remote
2017-12-29 21:57:53,177 +0100 [main] DEBUG (InFlightMetadataCollectorImpl.java:1798) - Resolving reference to class: model.entities.Address
2017-12-29 21:57:53,177 +0100 [main] DEBUG (InFlightMetadataCollectorImpl.java:1798) - Resolving reference to class: model.entities.Remote
2017-12-29 21:57:53,200 +0100 [main] DEBUG (SessionFactoryImpl.java:200) - Building session factory
2017-12-29 21:57:53,200 +0100 [main] DEBUG (Settings.java:69) - SessionFactory name : null
2017-12-29 21:57:53,201 +0100 [main] DEBUG (Settings.java:70) - Automatic flush during beforeCompletion(): enabled
2017-12-29 21:57:53,201 +0100 [main] DEBUG (Settings.java:71) - Automatic session close at end of transaction: disabled
2017-12-29 21:57:53,201 +0100 [main] DEBUG (Settings.java:73) - Statistics: disabled
2017-12-29 21:57:53,201 +0100 [main] DEBUG (Settings.java:75) - Deleted entity synthetic identifier rollback: disabled
2017-12-29 21:57:53,201 +0100 [main] DEBUG (Settings.java:76) - Default entity-mode: pojo
2017-12-29 21:57:53,201 +0100 [main] DEBUG (Settings.java:77) - Check Nullability in Core (should be disabled when Bean Validation is on): enabled
2017-12-29 21:57:53,201 +0100 [main] DEBUG (Settings.java:78) - Allow initialization of lazy state outside session : disabled
2017-12-29 21:57:53,201 +0100 [main] DEBUG (Settings.java:80) - Using BatchFetchStyle : LEGACY
2017-12-29 21:57:53,201 +0100 [main] DEBUG (Settings.java:81) - Default batch fetch size: -1
2017-12-29 21:57:53,201 +0100 [main] DEBUG (Settings.java:82) - Maximum outer join fetch depth: 2
2017-12-29 21:57:53,202 +0100 [main] DEBUG (Settings.java:83) - Default null ordering: NONE
2017-12-29 21:57:53,202 +0100 [main] DEBUG (Settings.java:84) - Order SQL updates by primary key: disabled
2017-12-29 21:57:53,202 +0100 [main] DEBUG (Settings.java:85) - Order SQL inserts for batching: disabled
2017-12-29 21:57:53,202 +0100 [main] DEBUG (Settings.java:87) - multi-tenancy strategy : NONE
2017-12-29 21:57:53,202 +0100 [main] DEBUG (Settings.java:89) - JTA Track by Thread: enabled
2017-12-29 21:57:53,202 +0100 [main] DEBUG (Settings.java:91) - Query language substitutions: {}
2017-12-29 21:57:53,202 +0100 [main] DEBUG (Settings.java:92) - JPA query language strict compliance: disabled
2017-12-29 21:57:53,202 +0100 [main] DEBUG (Settings.java:93) - Named query checking : enabled
2017-12-29 21:57:53,203 +0100 [main] DEBUG (Settings.java:95) - Second-level cache: enabled
2017-12-29 21:57:53,203 +0100 [main] DEBUG (Settings.java:96) - Second-level query cache: disabled
2017-12-29 21:57:53,203 +0100 [main] DEBUG (Settings.java:97) - Second-level query cache factory: org.hibernate.cache.internal.StandardQueryCacheFactory@490caf5f
2017-12-29 21:57:53,203 +0100 [main] DEBUG (Settings.java:98) - Second-level cache region prefix: null
2017-12-29 21:57:53,203 +0100 [main] DEBUG (Settings.java:99) - Optimize second-level cache for minimal puts: disabled
2017-12-29 21:57:53,203 +0100 [main] DEBUG (Settings.java:100) - Structured second-level cache entries: disabled
2017-12-29 21:57:53,203 +0100 [main] DEBUG (Settings.java:101) - Second-level cache direct-reference entries: disabled
2017-12-29 21:57:53,203 +0100 [main] DEBUG (Settings.java:102) - Automatic eviction of collection cache: disabled
2017-12-29 21:57:53,203 +0100 [main] DEBUG (Settings.java:104) - JDBC batch size: 15
2017-12-29 21:57:53,203 +0100 [main] DEBUG (Settings.java:105) - JDBC batch updates for versioned data: enabled
2017-12-29 21:57:53,204 +0100 [main] DEBUG (Settings.java:106) - Scrollable result sets: enabled
2017-12-29 21:57:53,204 +0100 [main] DEBUG (Settings.java:107) - Wrap result sets: disabled
2017-12-29 21:57:53,204 +0100 [main] DEBUG (Settings.java:108) - JDBC3 getGeneratedKeys(): enabled
2017-12-29 21:57:53,204 +0100 [main] DEBUG (Settings.java:109) - JDBC result set fetch size: null
2017-12-29 21:57:53,204 +0100 [main] DEBUG (Settings.java:110) - Connection release mode: AFTER_TRANSACTION
2017-12-29 21:57:53,204 +0100 [main] DEBUG (Settings.java:111) - Generate SQL with comments: disabled
2017-12-29 21:57:53,237 +0100 [main] DEBUG (SessionFactoryImpl.java:258) - Session factory constructed with filter configurations : {}
2017-12-29 21:57:53,237 +0100 [main] DEBUG (SessionFactoryImpl.java:259) - Instantiating session factory with properties: {sun.desktop=windows, awt.toolkit=sun.awt.windows.WToolkit, file.encoding.pkg=sun.io, java.specification.version=1.8, sun.cpu.isalist=amd64, sun.jnu.encoding=Cp1252, sun.awt.enableExtraMouseButtons=true, java.class.path=C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\log4j-1.2.17.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\mysql-connector-java-5.1.45-bin.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\antlr-2.7.7.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\classmate-1.3.0.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\dom4j-1.6.1.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\hibernate-commons-annotations-5.0.1.Final.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\hibernate-core-5.2.12.Final.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\hibernate-jpa-2.1-api-1.0.0.Final.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\jandex-2.0.3.Final.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\javassist-3.20.0-GA.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\jboss-logging-3.3.0.Final.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\jboss-transaction-api_1.2_spec-1.0.1.Final.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\eclipselink.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\javax.persistence-3.0-prelude-embedded-m2-sources.jar;C:\Users\BenJolien\Desktop\eclipse\plugins\org.junit_4.12.0.v201504281640\junit.jar;C:\Users\BenJolien\Desktop\eclipse\plugins\org.hamcrest.core_1.3.0.v201303031735.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\lib\jcalendar-1.4.jar;C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening\target\classes;C:\Users\BenJolien\.m2\repository\org\apache\maven\plugins\maven-compiler-plugin\3.7.0\maven-compiler-plugin-3.7.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-plugin-api\3.0\maven-plugin-api-3.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-model\3.0\maven-model-3.0.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\sisu\sisu-inject-plexus\1.4.2\sisu-inject-plexus-1.4.2.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\sisu\sisu-inject-bean\1.4.2\sisu-inject-bean-1.4.2.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\sisu\sisu-guice\2.1.7\sisu-guice-2.1.7-noaop.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-artifact\3.0\maven-artifact-3.0.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-utils\2.0.4\plexus-utils-2.0.4.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-core\3.0\maven-core-3.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-settings\3.0\maven-settings-3.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-settings-builder\3.0\maven-settings-builder-3.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-repository-metadata\3.0\maven-repository-metadata-3.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-model-builder\3.0\maven-model-builder-3.0.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\maven-aether-provider\3.0\maven-aether-provider-3.0.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\aether\aether-impl\1.7\aether-impl-1.7.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\aether\aether-spi\1.7\aether-spi-1.7.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\aether\aether-api\1.7\aether-api-1.7.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\aether\aether-util\1.7\aether-util-1.7.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-interpolation\1.14\plexus-interpolation-1.14.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-classworlds\2.2.3\plexus-classworlds-2.2.3.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-component-annotations\1.5.5\plexus-component-annotations-1.5.5.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\plexus\plexus-sec-dispatcher\1.3\plexus-sec-dispatcher-1.3.jar;C:\Users\BenJolien\.m2\repository\org\sonatype\plexus\plexus-cipher\1.4\plexus-cipher-1.4.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\shared\maven-shared-utils\3.1.0\maven-shared-utils-3.1.0.jar;C:\Users\BenJolien\.m2\repository\commons-io\commons-io\2.5\commons-io-2.5.jar;C:\Users\BenJolien\.m2\repository\org\apache\maven\shared\maven-shared-incremental\1.1\maven-shared-incremental-1.1.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-java\0.9.2\plexus-java-0.9.2.jar;C:\Users\BenJolien\.m2\repository\org\ow2\asm\asm\6.0_BETA\asm-6.0_BETA.jar;C:\Users\BenJolien\.m2\repository\com\thoughtworks\qdox\qdox\2.0-M7\qdox-2.0-M7.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-compiler-api\2.8.2\plexus-compiler-api-2.8.2.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-compiler-manager\2.8.2\plexus-compiler-manager-2.8.2.jar;C:\Users\BenJolien\.m2\repository\org\codehaus\plexus\plexus-compiler-javac\2.8.2\plexus-compiler-javac-2.8.2.jar;C:\Users\BenJolien\.m2\repository\org\hibernate\hibernate-core\4.2.7.SP1\hibernate-core-4.2.7.SP1.jar;C:\Users\BenJolien\.m2\repository\antlr\antlr\2.7.7\antlr-2.7.7.jar;C:\Users\BenJolien\.m2\repository\org\jboss\logging\jboss-logging\3.1.0.GA\jboss-logging-3.1.0.GA.jar;C:\Users\BenJolien\.m2\repository\dom4j\dom4j\1.6.1\dom4j-1.6.1.jar;C:\Users\BenJolien\.m2\repository\org\javassist\javassist\3.18.1-GA\javassist-3.18.1-GA.jar;C:\Users\BenJolien\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.1_spec\1.0.1.Final\jboss-transaction-api_1.1_spec-1.0.1.Final.jar;C:\Users\BenJolien\.m2\repository\org\hibernate\common\hibernate-commons-annotations\4.0.2.Final\hibernate-commons-annotations-4.0.2.Final.jar;C:\Users\BenJolien\.m2\repository\mysql\mysql-connector-java\6.0.6\mysql-connector-java-6.0.6.jar;C:\Users\BenJolien\.m2\repository\org\fluttercode\datafactory\datafactory\0.8\datafactory-0.8.jar;C:\Users\BenJolien\.m2\repository\org\hibernate\javax\persistence\hibernate-jpa-2.0-api\1.0.1.Final\hibernate-jpa-2.0-api-1.0.1.Final.jar;C:\Users\BenJolien\.m2\repository\org\hibernate\hibernate-entitymanager\5.2.12.Final\hibernate-entitymanager-5.2.12.Final.jar;C:\Users\BenJolien\.m2\repository\org\hibernate\javax\persistence\hibernate-jpa-2.1-api\1.0.0.Final\hibernate-jpa-2.1-api-1.0.0.Final.jar;C:\Users\BenJolien\.m2\repository\net\bytebuddy\byte-buddy\1.6.14\byte-buddy-1.6.14.jar;C:\Users\BenJolien\.m2\repository\org\jboss\spec\javax\transaction\jboss-transaction-api_1.2_spec\1.0.1.Final\jboss-transaction-api_1.2_spec-1.0.1.Final.jar, java.vm.vendor=Oracle Corporation, sun.arch.data.model=64, user.variant=, java.vendor.url=http://java.oracle.com/, user.timezone=Europe/Berlin, javax.persistence.jdbc.user=****, javax.persistence.jdbc.url=jdbc:mysql://localhost:3306/DbRemote, os.name=Windows 10, java.vm.specification.version=1.8, user.country=BE, sun.java.launcher=SUN_STANDARD, sun.boot.library.path=C:\Program Files\Java\jre1.8.0_144\bin, sun.java.command=controller.ControllerRunnerApp, sun.cpu.endian=little, user.home=C:\Users\BenJolien, user.language=nl, java.specification.vendor=Oracle Corporation, java.home=C:\Program Files\Java\jre1.8.0_144, file.separator=\, line.separator=
, java.vm.specification.vendor=Oracle Corporation, java.specification.name=Java Platform API Specification, hibernate.transaction.coordinator_class=class org.hibernate.resource.transaction.backend.jdbc.internal.JdbcResourceLocalTransactionCoordinatorBuilderImpl, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, javax.persistence.jdbc.driver=com.mysql.jdbc.Driver, sun.boot.class.path=C:\Program Files\Java\jre1.8.0_144\lib\resources.jar;C:\Program Files\Java\jre1.8.0_144\lib\rt.jar;C:\Program Files\Java\jre1.8.0_144\lib\sunrsasign.jar;C:\Program Files\Java\jre1.8.0_144\lib\jsse.jar;C:\Program Files\Java\jre1.8.0_144\lib\jce.jar;C:\Program Files\Java\jre1.8.0_144\lib\charsets.jar;C:\Program Files\Java\jre1.8.0_144\lib\jfr.jar;C:\Program Files\Java\jre1.8.0_144\classes, user.script=, sun.management.compiler=HotSpot 64-Bit Tiered Compilers, java.runtime.version=1.8.0_144-b01, user.name=BenJolien, path.separator=;, hibernate.connection.username=userDB, os.version=10.0, java.endorsed.dirs=C:\Program Files\Java\jre1.8.0_144\lib\endorsed, java.runtime.name=Java(TM) SE Runtime Environment, hibernate.connection.url=jdbc:mysql://localhost:3306/DbRemote, hibernate.ejb.persistenceUnitName=Afstandsbediening, file.encoding=UTF-8, java.vm.name=Java HotSpot(TM) 64-Bit Server VM, hibernate.connection.driver_class=com.mysql.jdbc.Driver, java.vendor.url.bug=http://bugreport.sun.com/bugreport/, java.io.tmpdir=C:\Users\BENJOL~1\AppData\Local\Temp\, java.version=1.8.0_144, user.dir=C:\Users\BenJolien\git\2018-Januari\8-Afstandsbediening, os.arch=amd64, java.vm.specification.name=Java Virtual Machine Specification, hibernate.connection.password=****, java.awt.printerjob=sun.awt.windows.WPrinterJob, sun.os.patch.level=, hibernate.boot.CfgXmlAccessService.key=org.hibernate.boot.cfgxml.spi.LoadedConfig@146dfe6, java.library.path=C:\Program Files\Java\jre1.8.0_144\bin;C:\WINDOWS\Sun\Java\bin;C:\WINDOWS\system32;C:\WINDOWS;C:/Program Files/Java/jre1.8.0_151/bin/server;C:/Program Files/Java/jre1.8.0_151/bin;C:/Program Files/Java/jre1.8.0_151/lib/amd64;C:\ProgramData\Oracle\Java\javapath;C:\Program Files\Microsoft MPI\Bin\;C:\Program Files (x86)\Intel\iCLS Client\;C:\Program Files\Intel\iCLS Client\;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files\Intel\Intel(R) Management Engine Components\DAL;C:\Program Files (x86)\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files\Intel\Intel(R) Management Engine Components\IPT;C:\Program Files (x86)\Windows Kits\10\Windows Performance Toolkit\;C:\Program Files\dotnet\;C:\Program Files\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files (x86)\GtkSharp\2.12\bin;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;C:\Program Files (x86)\nodejs\;C:\Program Files\Microsoft\Web Platform Installer\;C:\Program Files\Microsoft SQL Server\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\110\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\110\DTS\Binn\;C:\Program Files\Microsoft SQL Server\110\DTS\Binn\;C:\Program Files (x86)\Microsoft SQL Server\Client SDK\ODBC\130\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\130\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\130\DTS\Binn\;C:\Program Files (x86)\Microsoft SQL Server\130\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\NVIDIA Corporation\PhysX\Common;C:\Program Files (x86)\scala\bin;C:\Program Files\ibm\gsk8\lib64;C:\Program Files (x86)\ibm\gsk8\lib;C:\WINDOWS\system32;C:\WINDOWS;C:\WINDOWS\System32\Wbem;C:\WINDOWS\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\Brackets\command;C:\Program Files\Git\cmd;C:\Program Files\MySQL\MySQL Utilities 1.6\;C:\Users\BenJolien\AppData\Local\Microsoft\WindowsApps;C:\Users\BenJolien\AppData\Roaming\npm;;C:\Users\BenJolien\Desktop\eclipse;;., java.vm.info=mixed mode, java.vendor=Oracle Corporation, java.vm.version=25.144-b01, hibernate.bytecode.use_reflection_optimizer=false, java.ext.dirs=C:\Program Files\Java\jre1.8.0_144\lib\ext;C:\WINDOWS\Sun\Java\lib\ext, sun.io.unicode.encoding=UnicodeLittle, javax.persistence.jdbc.password=userDB, java.class.version=52.0}
2017-12-29 21:57:53,245 +0100 [main] DEBUG (JaccIntegrator.java:80) - Skipping JACC integration as it was not enabled
2017-12-29 21:57:53,246 +0100 [main] DEBUG (CascadeStyles.java:268) - External cascade style registration [persist : STYLE_PERSIST_SKIPLAZY] overrode base registration [STYLE_PERSIST]
2017-12-29 21:57:53,256 +0100 [main] DEBUG (SessionFactoryImpl.java:298) - Instantiated session factory
2017-12-29 21:57:53,278 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:55) - Not known whether passed class name [model.entities.Address] is safe
2017-12-29 21:57:53,278 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:57) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.entities.Address
2017-12-29 21:57:53,284 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:55) - Not known whether passed class name [model.entities.Address] is safe
2017-12-29 21:57:53,284 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:57) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.entities.Address
2017-12-29 21:57:53,311 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:55) - Not known whether passed class name [model.entities.Remote] is safe
2017-12-29 21:57:53,311 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:57) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.entities.Remote
2017-12-29 21:57:53,311 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:55) - Not known whether passed class name [model.entities.Remote] is safe
2017-12-29 21:57:53,311 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:57) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.entities.Remote
2017-12-29 21:57:53,314 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:55) - Not known whether passed class name [model.entities.Person] is safe
2017-12-29 21:57:53,314 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:57) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.entities.Person
2017-12-29 21:57:53,316 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:55) - Not known whether passed class name [model.entities.Person] is safe
2017-12-29 21:57:53,316 +0100 [main] DEBUG (ClassLoaderAccessImpl.java:57) - No temp ClassLoader provided; using live ClassLoader for loading potentially unsafe class : model.entities.Person
2017-12-29 21:57:53,325 +0100 [main] DEBUG (AbstractEntityPersister.java:3608) - Static SQL for entity: model.entities.Address
2017-12-29 21:57:53,325 +0100 [main] DEBUG (AbstractEntityPersister.java:3613) -  Version select: select id from address where id =?
2017-12-29 21:57:53,325 +0100 [main] DEBUG (AbstractEntityPersister.java:3616) -  Snapshot select: select address_.id, address_.city as city2_0_, address_.country as country3_0_, address_.mailBox as mailBox4_0_, address_.nr as nr5_0_, address_.postalCode as postalCo6_0_, address_.street as street7_0_ from address address_ where address_.id=?
2017-12-29 21:57:53,325 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into address (city, country, mailBox, nr, postalCode, street, id) values (?, ?, ?, ?, ?, ?, ?)
2017-12-29 21:57:53,325 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update address set city=?, country=?, mailBox=?, nr=?, postalCode=?, street=? where id=?
2017-12-29 21:57:53,325 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from address where id=?
2017-12-29 21:57:53,325 +0100 [main] DEBUG (AbstractEntityPersister.java:3624) -  Identity insert: insert into address (city, country, mailBox, nr, postalCode, street) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:57:53,338 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@8c11eee]
2017-12-29 21:57:53,339 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:57:53,339 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:57:53,339 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:57:53,339 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:57:53,339 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:57:53,339 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:57:53,340 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:57:53,347 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:57:53,349 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:57:53,351 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [NONE]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:57:53,351 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5c10f1c3]
2017-12-29 21:57:53,351 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:57:53,351 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:57:53,351 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:57:53,351 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:57:53,351 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:57:53,351 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:57:53,351 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:57:53,352 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:57:53,352 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:57:53,352 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [READ]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:57:53,352 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@78365cfa]
2017-12-29 21:57:53,352 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:57:53,352 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:57:53,352 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:57:53,352 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:57:53,352 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:57:53,352 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:57:53,353 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:57:53,353 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:57:53,353 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:57:53,353 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [UPGRADE]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? for update
2017-12-29 21:57:53,353 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3f6db3fb]
2017-12-29 21:57:53,354 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:57:53,354 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:57:53,354 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:57:53,354 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:57:53,354 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:57:53,354 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:57:53,354 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:57:53,355 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:57:53,355 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:57:53,355 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [UPGRADE_NOWAIT]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? for update
2017-12-29 21:57:53,355 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@18c5069b]
2017-12-29 21:57:53,355 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:57:53,356 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:57:53,356 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:57:53,356 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:57:53,356 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:57:53,356 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:57:53,356 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:57:53,356 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:57:53,357 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:57:53,357 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [UPGRADE_SKIPLOCKED]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? for update
2017-12-29 21:57:53,357 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@68ad99fe]
2017-12-29 21:57:53,357 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:57:53,359 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:57:53,359 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:57:53,359 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:57:53,359 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:57:53,359 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:57:53,359 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:57:53,359 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:57:53,360 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:57:53,360 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [FORCE]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? for update
2017-12-29 21:57:53,360 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@781f10f2]
2017-12-29 21:57:53,360 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:57:53,360 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:57:53,360 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:57:53,360 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:57:53,361 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:57:53,361 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:57:53,361 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:57:53,361 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:57:53,361 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:57:53,361 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [PESSIMISTIC_READ]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? lock in share mode
2017-12-29 21:57:53,362 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2e9fda69]
2017-12-29 21:57:53,362 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:57:53,362 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:57:53,362 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:57:53,362 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:57:53,362 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:57:53,362 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:57:53,362 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:57:53,363 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:57:53,363 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:57:53,364 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [PESSIMISTIC_WRITE]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? for update
2017-12-29 21:57:53,364 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1755e85b]
2017-12-29 21:57:53,364 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:57:53,364 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:57:53,364 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:57:53,365 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:57:53,365 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:57:53,365 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:57:53,365 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:57:53,365 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:57:53,366 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:57:53,366 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [PESSIMISTIC_FORCE_INCREMENT]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=? for update
2017-12-29 21:57:53,367 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2371aaca]
2017-12-29 21:57:53,367 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:57:53,367 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:57:53,367 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:57:53,367 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:57:53,368 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:57:53,368 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:57:53,368 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:57:53,368 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:57:53,369 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:57:53,369 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [OPTIMISTIC]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:57:53,369 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@63fdab07]
2017-12-29 21:57:53,369 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : city
2017-12-29 21:57:53,369 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : country
2017-12-29 21:57:53,369 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : mailBox
2017-12-29 21:57:53,369 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : nr
2017-12-29 21:57:53,369 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : postalCode
2017-12-29 21:57:53,369 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : street
2017-12-29 21:57:53,369 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:57:53,370 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:57:53,370 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Address)
    - Returns
       - EntityReturnImpl(entity=model.entities.Address, querySpaceUid=<gen:0>, path=model.entities.Address)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Address)
          - SQL table alias mapping - address0_
          - alias suffix - 0_
          - suffixed key columns - {id1_0_0_}

2017-12-29 21:57:53,370 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Address [OPTIMISTIC_FORCE_INCREMENT]: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:57:53,377 +0100 [main] DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity model.entities.Address: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:57:53,378 +0100 [main] DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity model.entities.Address: select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:57:53,378 +0100 [main] DEBUG (AbstractEntityPersister.java:3608) - Static SQL for entity: model.entities.Remote
2017-12-29 21:57:53,378 +0100 [main] DEBUG (AbstractEntityPersister.java:3613) -  Version select: select id from Remote where id =?
2017-12-29 21:57:53,378 +0100 [main] DEBUG (AbstractEntityPersister.java:3616) -  Snapshot select: select remote_.id, remote_.frequency as frequenc2_2_, remote_.isActive as isActive3_2_, remote_.serialNumber as serialNu4_2_ from Remote remote_ where remote_.id=?
2017-12-29 21:57:53,378 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into Remote (frequency, isActive, serialNumber, id) values (?, ?, ?, ?)
2017-12-29 21:57:53,378 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update Remote set frequency=?, isActive=?, serialNumber=? where id=?
2017-12-29 21:57:53,378 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from Remote where id=?
2017-12-29 21:57:53,378 +0100 [main] DEBUG (AbstractEntityPersister.java:3624) -  Identity insert: insert into Remote (frequency, isActive, serialNumber) values (?, ?, ?)
2017-12-29 21:57:53,378 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4b7e96a]
2017-12-29 21:57:53,378 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:57:53,379 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:57:53,379 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:57:53,379 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:57:53,379 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:57:53,379 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:57:53,379 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [NONE]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:57:53,379 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3f07b12c]
2017-12-29 21:57:53,379 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:57:53,379 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:57:53,379 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:57:53,380 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:57:53,380 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:57:53,380 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:57:53,380 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [READ]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:57:53,380 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7096b474]
2017-12-29 21:57:53,380 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:57:53,380 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:57:53,380 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:57:53,380 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:57:53,380 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:57:53,381 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:57:53,381 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [UPGRADE]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? for update
2017-12-29 21:57:53,381 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3c989952]
2017-12-29 21:57:53,381 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:57:53,381 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:57:53,381 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:57:53,381 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:57:53,381 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:57:53,381 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:57:53,381 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [UPGRADE_NOWAIT]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? for update
2017-12-29 21:57:53,382 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3d3ba765]
2017-12-29 21:57:53,382 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:57:53,382 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:57:53,382 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:57:53,382 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:57:53,382 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:57:53,382 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:57:53,383 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [UPGRADE_SKIPLOCKED]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? for update
2017-12-29 21:57:53,383 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@793138bd]
2017-12-29 21:57:53,383 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:57:53,383 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:57:53,383 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:57:53,383 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:57:53,383 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:57:53,383 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:57:53,383 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [FORCE]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? for update
2017-12-29 21:57:53,383 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5c18016b]
2017-12-29 21:57:53,384 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:57:53,384 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:57:53,384 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:57:53,384 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:57:53,384 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:57:53,384 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:57:53,384 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [PESSIMISTIC_READ]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? lock in share mode
2017-12-29 21:57:53,384 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@43aaf813]
2017-12-29 21:57:53,384 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:57:53,384 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:57:53,385 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:57:53,385 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:57:53,385 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:57:53,385 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:57:53,386 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [PESSIMISTIC_WRITE]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? for update
2017-12-29 21:57:53,386 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4ba302e0]
2017-12-29 21:57:53,386 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:57:53,386 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:57:53,386 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:57:53,386 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:57:53,387 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:57:53,387 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:57:53,387 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [PESSIMISTIC_FORCE_INCREMENT]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=? for update
2017-12-29 21:57:53,387 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1ae67cad]
2017-12-29 21:57:53,387 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:57:53,387 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:57:53,387 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:57:53,387 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:57:53,387 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:57:53,388 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:57:53,388 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [OPTIMISTIC]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:57:53,388 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7c098bb3]
2017-12-29 21:57:53,388 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : frequency
2017-12-29 21:57:53,388 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : isActive
2017-12-29 21:57:53,388 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : serialNumber
2017-12-29 21:57:53,388 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:57:53,389 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:57:53,389 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Remote)
    - Returns
       - EntityReturnImpl(entity=model.entities.Remote, querySpaceUid=<gen:0>, path=model.entities.Remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Remote)
          - SQL table alias mapping - remote0_
          - alias suffix - 0_
          - suffixed key columns - {id1_2_0_}

2017-12-29 21:57:53,389 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Remote [OPTIMISTIC_FORCE_INCREMENT]: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:57:53,390 +0100 [main] DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity model.entities.Remote: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:57:53,390 +0100 [main] DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity model.entities.Remote: select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:57:53,390 +0100 [main] DEBUG (AbstractEntityPersister.java:3608) - Static SQL for entity: model.entities.Person
2017-12-29 21:57:53,390 +0100 [main] DEBUG (AbstractEntityPersister.java:3613) -  Version select: select id from Person where id =?
2017-12-29 21:57:53,390 +0100 [main] DEBUG (AbstractEntityPersister.java:3616) -  Snapshot select: select person_.id, person_.addressId as addressI5_1_, person_.endOfContract as endOfCon2_1_, person_.firstname as firstnam3_1_, person_.lastname as lastname4_1_, person_.remoteId as remoteId6_1_ from Person person_ where person_.id=?
2017-12-29 21:57:53,391 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Insert 0: insert into Person (addressId, endOfContract, firstname, lastname, remoteId, id) values (?, ?, ?, ?, ?, ?)
2017-12-29 21:57:53,391 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Update 0: update Person set addressId=?, endOfContract=?, firstname=?, lastname=?, remoteId=? where id=?
2017-12-29 21:57:53,391 +0100 [main] DEBUG (DelegatingBasicLogger.java:394) -  Delete 0: delete from Person where id=?
2017-12-29 21:57:53,391 +0100 [main] DEBUG (AbstractEntityPersister.java:3624) -  Identity insert: insert into Person (addressId, endOfContract, firstname, lastname, remoteId) values (?, ?, ?, ?, ?)
2017-12-29 21:57:53,391 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@18cebaa5]
2017-12-29 21:57:53,391 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:57:53,394 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@625abb97]
2017-12-29 21:57:53,396 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.city
2017-12-29 21:57:53,396 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.country
2017-12-29 21:57:53,396 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.mailBox
2017-12-29 21:57:53,396 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.nr
2017-12-29 21:57:53,396 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.postalCode
2017-12-29 21:57:53,396 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.street
2017-12-29 21:57:53,396 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:57:53,396 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:57:53,396 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:57:53,396 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:57:53,396 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@2a2c13a8]
2017-12-29 21:57:53,396 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote.frequency
2017-12-29 21:57:53,397 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote.isActive
2017-12-29 21:57:53,397 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote.serialNumber
2017-12-29 21:57:53,397 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:57:53,397 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:57:53,398 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}
          - JOIN (JoinDefinedByMetadata(address)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=model.entities.Address)
                - SQL table alias mapping - address1_
                - alias suffix - 1_
                - suffixed key columns - {id1_0_1_}
          - JOIN (JoinDefinedByMetadata(remote)) : <gen:0> -> <gen:2>
             - EntityQuerySpaceImpl(uid=<gen:2>, entity=model.entities.Remote)
                - SQL table alias mapping - remote2_
                - alias suffix - 2_
                - suffixed key columns - {id1_2_2_}

2017-12-29 21:57:53,398 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [NONE]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.mailBox as mailBox4_0_1_, address1_.nr as nr5_0_1_, address1_.postalCode as postalCo6_0_1_, address1_.street as street7_0_1_, remote2_.id as id1_2_2_, remote2_.frequency as frequenc2_2_2_, remote2_.isActive as isActive3_2_2_, remote2_.serialNumber as serialNu4_2_2_ from Person person0_ left outer join address address1_ on person0_.addressId=address1_.id left outer join Remote remote2_ on person0_.remoteId=remote2_.id where person0_.id=?
2017-12-29 21:57:53,398 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@66b7550d]
2017-12-29 21:57:53,398 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:57:53,398 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7c541c15]
2017-12-29 21:57:53,399 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.city
2017-12-29 21:57:53,399 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.country
2017-12-29 21:57:53,399 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.mailBox
2017-12-29 21:57:53,399 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.nr
2017-12-29 21:57:53,399 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.postalCode
2017-12-29 21:57:53,399 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address.street
2017-12-29 21:57:53,399 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:57:53,399 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:57:53,399 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:57:53,399 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:57:53,399 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@698122b2]
2017-12-29 21:57:53,399 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote.frequency
2017-12-29 21:57:53,399 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote.isActive
2017-12-29 21:57:53,399 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote.serialNumber
2017-12-29 21:57:53,399 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:57:53,400 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:57:53,400 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}
          - JOIN (JoinDefinedByMetadata(address)) : <gen:0> -> <gen:1>
             - EntityQuerySpaceImpl(uid=<gen:1>, entity=model.entities.Address)
                - SQL table alias mapping - address1_
                - alias suffix - 1_
                - suffixed key columns - {id1_0_1_}
          - JOIN (JoinDefinedByMetadata(remote)) : <gen:0> -> <gen:2>
             - EntityQuerySpaceImpl(uid=<gen:2>, entity=model.entities.Remote)
                - SQL table alias mapping - remote2_
                - alias suffix - 2_
                - suffixed key columns - {id1_2_2_}

2017-12-29 21:57:53,400 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [READ]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_, address1_.id as id1_0_1_, address1_.city as city2_0_1_, address1_.country as country3_0_1_, address1_.mailBox as mailBox4_0_1_, address1_.nr as nr5_0_1_, address1_.postalCode as postalCo6_0_1_, address1_.street as street7_0_1_, remote2_.id as id1_2_2_, remote2_.frequency as frequenc2_2_2_, remote2_.isActive as isActive3_2_2_, remote2_.serialNumber as serialNu4_2_2_ from Person person0_ left outer join address address1_ on person0_.addressId=address1_.id left outer join Remote remote2_ on person0_.remoteId=remote2_.id where person0_.id=?
2017-12-29 21:57:53,400 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1e7aa82b]
2017-12-29 21:57:53,400 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:57:53,401 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5bd82fed]
2017-12-29 21:57:53,401 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:57:53,401 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:57:53,401 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:57:53,401 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:57:53,401 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@c1bd0be]
2017-12-29 21:57:53,401 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:57:53,401 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:57:53,401 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 21:57:53,402 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [UPGRADE]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? for update
2017-12-29 21:57:53,402 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@476b0ae6]
2017-12-29 21:57:53,402 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:57:53,402 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@655f7ea]
2017-12-29 21:57:53,402 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:57:53,402 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:57:53,402 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:57:53,402 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:57:53,402 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@549949be]
2017-12-29 21:57:53,403 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:57:53,403 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:57:53,403 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 21:57:53,403 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [UPGRADE_NOWAIT]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? for update
2017-12-29 21:57:53,404 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@4b3a45f1]
2017-12-29 21:57:53,404 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:57:53,404 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3eeb318f]
2017-12-29 21:57:53,404 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:57:53,404 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:57:53,404 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:57:53,404 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:57:53,404 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@20a14b55]
2017-12-29 21:57:53,404 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:57:53,405 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:57:53,405 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 21:57:53,405 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [UPGRADE_SKIPLOCKED]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? for update
2017-12-29 21:57:53,405 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@39ad977d]
2017-12-29 21:57:53,405 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:57:53,405 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@a202ccb]
2017-12-29 21:57:53,405 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:57:53,406 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:57:53,406 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:57:53,406 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:57:53,406 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@20f12539]
2017-12-29 21:57:53,406 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:57:53,406 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:57:53,406 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 21:57:53,407 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [FORCE]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? for update
2017-12-29 21:57:53,407 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@75b25825]
2017-12-29 21:57:53,407 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:57:53,407 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@13cf7d52]
2017-12-29 21:57:53,407 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:57:53,407 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:57:53,407 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:57:53,407 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:57:53,407 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3a3e4aff]
2017-12-29 21:57:53,408 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:57:53,408 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:57:53,408 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 21:57:53,408 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [PESSIMISTIC_READ]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? lock in share mode
2017-12-29 21:57:53,408 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5d2a4eed]
2017-12-29 21:57:53,409 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:57:53,409 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@3f0846c6]
2017-12-29 21:57:53,409 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:57:53,409 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:57:53,409 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:57:53,409 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:57:53,409 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@77a98a6a]
2017-12-29 21:57:53,409 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:57:53,410 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:57:53,410 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 21:57:53,410 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [PESSIMISTIC_WRITE]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? for update
2017-12-29 21:57:53,410 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@78fbff54]
2017-12-29 21:57:53,410 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:57:53,410 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@7e22550a]
2017-12-29 21:57:53,411 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:57:53,411 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:57:53,411 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:57:53,411 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:57:53,411 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@45e37a7e]
2017-12-29 21:57:53,411 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:57:53,411 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:57:53,412 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 21:57:53,412 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [PESSIMISTIC_FORCE_INCREMENT]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=? for update
2017-12-29 21:57:53,412 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@62452cc9]
2017-12-29 21:57:53,412 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:57:53,412 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5a7005d]
2017-12-29 21:57:53,412 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:57:53,412 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:57:53,412 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:57:53,413 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:57:53,413 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5bc9ba1d]
2017-12-29 21:57:53,413 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:57:53,413 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:57:53,413 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 21:57:53,413 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [OPTIMISTIC]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=?
2017-12-29 21:57:53,414 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:0> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@1021f6c9]
2017-12-29 21:57:53,414 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : address
2017-12-29 21:57:53,414 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:1> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@488eb7f2]
2017-12-29 21:57:53,414 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : endOfContract
2017-12-29 21:57:53,414 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : firstname
2017-12-29 21:57:53,414 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : lastname
2017-12-29 21:57:53,414 +0100 [main] DEBUG (MetamodelGraphWalker.java:137) - Visiting attribute path : remote
2017-12-29 21:57:53,414 +0100 [main] DEBUG (QuerySpacesImpl.java:174) - Adding QuerySpace : uid = <gen:2> -> org.hibernate.loader.plan.build.internal.spaces.EntityQuerySpaceImpl@5e81e5ac]
2017-12-29 21:57:53,414 +0100 [main] DEBUG (FetchStyleLoadPlanBuildingAssociationVisitationStrategy.java:150) - Building LoadPlan...
2017-12-29 21:57:53,415 +0100 [main] DEBUG (LoadQueryJoinAndFetchProcessor.java:101) - processing queryspace <gen:0>
2017-12-29 21:57:53,415 +0100 [main] DEBUG (LoadPlanTreePrinter.java:55) - LoadPlan(entity=model.entities.Person)
    - Returns
       - EntityReturnImpl(entity=model.entities.Person, querySpaceUid=<gen:0>, path=model.entities.Person)
          - EntityAttributeFetchImpl(entity=model.entities.Address, querySpaceUid=<gen:1>, path=model.entities.Person.address)
          - EntityAttributeFetchImpl(entity=model.entities.Remote, querySpaceUid=<gen:2>, path=model.entities.Person.remote)
    - QuerySpaces
       - EntityQuerySpaceImpl(uid=<gen:0>, entity=model.entities.Person)
          - SQL table alias mapping - person0_
          - alias suffix - 0_
          - suffixed key columns - {id1_1_0_}

2017-12-29 21:57:53,415 +0100 [main] DEBUG (EntityLoader.java:115) - Static select for entity model.entities.Person [OPTIMISTIC_FORCE_INCREMENT]: select person0_.id as id1_1_0_, person0_.addressId as addressI5_1_0_, person0_.endOfContract as endOfCon2_1_0_, person0_.firstname as firstnam3_1_0_, person0_.lastname as lastname4_1_0_, person0_.remoteId as remoteId6_1_0_ from Person person0_ where person0_.id=?
2017-12-29 21:57:53,416 +0100 [main] DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_MERGE on entity model.entities.Person: select person0_.id as id1_1_2_, person0_.addressId as addressI5_1_2_, person0_.endOfContract as endOfCon2_1_2_, person0_.firstname as firstnam3_1_2_, person0_.lastname as lastname4_1_2_, person0_.remoteId as remoteId6_1_2_, address1_.id as id1_0_0_, address1_.city as city2_0_0_, address1_.country as country3_0_0_, address1_.mailBox as mailBox4_0_0_, address1_.nr as nr5_0_0_, address1_.postalCode as postalCo6_0_0_, address1_.street as street7_0_0_, remote2_.id as id1_2_1_, remote2_.frequency as frequenc2_2_1_, remote2_.isActive as isActive3_2_1_, remote2_.serialNumber as serialNu4_2_1_ from Person person0_ left outer join address address1_ on person0_.addressId=address1_.id left outer join Remote remote2_ on person0_.remoteId=remote2_.id where person0_.id=?
2017-12-29 21:57:53,416 +0100 [main] DEBUG (CascadeEntityLoader.java:38) - Static select for action ACTION_REFRESH on entity model.entities.Person: select person0_.id as id1_1_2_, person0_.addressId as addressI5_1_2_, person0_.endOfContract as endOfCon2_1_2_, person0_.firstname as firstnam3_1_2_, person0_.lastname as lastname4_1_2_, person0_.remoteId as remoteId6_1_2_, address1_.id as id1_0_0_, address1_.city as city2_0_0_, address1_.country as country3_0_0_, address1_.mailBox as mailBox4_0_0_, address1_.nr as nr5_0_0_, address1_.postalCode as postalCo6_0_0_, address1_.street as street7_0_0_, remote2_.id as id1_2_1_, remote2_.frequency as frequenc2_2_1_, remote2_.isActive as isActive3_2_1_, remote2_.serialNumber as serialNu4_2_1_ from Person person0_ left outer join address address1_ on person0_.addressId=address1_.id left outer join Remote remote2_ on person0_.remoteId=remote2_.id where person0_.id=?
2017-12-29 21:57:53,430 +0100 [main] DEBUG (SchemaManagementToolCoordinator.java:56) - No actions specified; doing nothing
2017-12-29 21:57:53,430 +0100 [main] DEBUG (JtaPlatformInitiator.java:42) - No JtaPlatform was specified, checking resolver
2017-12-29 21:57:53,430 +0100 [main] DEBUG (JtaPlatformResolverInitiator.java:33) - No JtaPlatformResolver was specified, using default [org.hibernate.engine.transaction.jta.platform.internal.StandardJtaPlatformResolver]
2017-12-29 21:57:53,433 +0100 [main] DEBUG (StandardJtaPlatformResolver.java:102) - Could not resolve JtaPlatform, using default [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]
2017-12-29 21:57:53,434 +0100 [main] DEBUG (NamedQueryRepository.java:151) - Checking 1 named HQL queries
2017-12-29 21:57:53,434 +0100 [main] DEBUG (NamedQueryRepository.java:155) - Checking named query: findUnusedAddress
2017-12-29 21:57:53,438 +0100 [main] DEBUG (QueryTranslatorFactoryInitiator.java:45) - QueryTranslatorFactory : org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory@1080b026
2017-12-29 21:57:53,438 +0100 [main] INFO  (QueryTranslatorFactoryInitiator.java:47) - HHH000397: Using ASTQueryTranslatorFactory
2017-12-29 21:57:53,463 +0100 [main] DEBUG (QueryTranslatorImpl.java:282) - parse() - HQL: SELECT a FROM model.entities.Address a WHERE a.id NOT IN (SELECT p.address.id FROM model.entities.Person p)
2017-12-29 21:57:53,467 +0100 [main] DEBUG (ErrorCounter.java:95) - throwQueryException() : no errors
2017-12-29 21:57:53,468 +0100 [main] DEBUG (QueryTranslatorImpl.java:305) - --- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'FROM'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[IDENT] Node: 'model'
    |  |     |  |  \-[IDENT] Node: 'entities'
    |  |     |  \-[IDENT] Node: 'Address'
    |  |     \-[ALIAS] Node: 'a'
    |  \-[SELECT] Node: 'SELECT'
    |     \-[IDENT] Node: 'a'
    \-[WHERE] Node: 'WHERE'
       \-[NOT_IN] Node: 'not in'
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'a'
          |  \-[IDENT] Node: 'id'
          \-[IN_LIST] Node: 'inList'
             \-[QUERY] Node: 'query'
                \-[SELECT_FROM] Node: 'SELECT_FROM'
                   +-[FROM] Node: 'FROM'
                   |  \-[RANGE] Node: 'RANGE'
                   |     +-[DOT] Node: '.'
                   |     |  +-[DOT] Node: '.'
                   |     |  |  +-[IDENT] Node: 'model'
                   |     |  |  \-[IDENT] Node: 'entities'
                   |     |  \-[IDENT] Node: 'Person'
                   |     \-[ALIAS] Node: 'p'
                   \-[SELECT] Node: 'SELECT'
                      \-[DOT] Node: '.'
                         +-[DOT] Node: '.'
                         |  +-[IDENT] Node: 'p'
                         |  \-[IDENT] Node: 'address'
                         \-[IDENT] Node: 'id'

2017-12-29 21:57:53,483 +0100 [main] DEBUG (HqlSqlBaseWalker.java:124) - select << begin [level=1, statement=select]
2017-12-29 21:57:53,491 +0100 [main] DEBUG (FromElement.java:147) - FromClause{level=1} : model.entities.Address (a) -> address0_
2017-12-29 21:57:53,491 +0100 [main] DEBUG (FromReferenceNode.java:60) - Resolved : a -> address0_.id
2017-12-29 21:57:53,493 +0100 [main] DEBUG (FromReferenceNode.java:60) - Resolved : a -> address0_.id
2017-12-29 21:57:53,494 +0100 [main] DEBUG (DotNode.java:666) - getDataType() : id -> org.hibernate.type.IntegerType@53ca01a2
2017-12-29 21:57:53,494 +0100 [main] DEBUG (FromReferenceNode.java:60) - Resolved : a.id -> address0_.id
2017-12-29 21:57:53,495 +0100 [main] DEBUG (HqlSqlBaseWalker.java:124) - select << begin [level=2, statement=select]
2017-12-29 21:57:53,495 +0100 [main] DEBUG (FromElement.java:147) - FromClause{level=2} : model.entities.Person (p) -> person1_
2017-12-29 21:57:53,495 +0100 [main] DEBUG (FromReferenceNode.java:60) - Resolved : p -> person1_.id
2017-12-29 21:57:53,496 +0100 [main] DEBUG (DotNode.java:666) - getDataType() : address -> org.hibernate.type.ManyToOneType(model.entities.Address)
2017-12-29 21:57:53,496 +0100 [main] DEBUG (DotNode.java:625) - dereferenceShortcut() : property id in model.entities.Person does not require a join.
2017-12-29 21:57:53,496 +0100 [main] DEBUG (DotNode.java:650) - Unresolved property path is now 'address.id'
2017-12-29 21:57:53,496 +0100 [main] DEBUG (FromReferenceNode.java:60) - Resolved : p.address -> person1_.addressId
2017-12-29 21:57:53,496 +0100 [main] DEBUG (DotNode.java:666) - getDataType() : address.id -> org.hibernate.type.IntegerType@53ca01a2
2017-12-29 21:57:53,496 +0100 [main] DEBUG (FromReferenceNode.java:60) - Resolved : p.address.id -> person1_.addressId
2017-12-29 21:57:53,496 +0100 [main] DEBUG (HqlSqlBaseWalker.java:128) - select : finishing up [level=2, statement=select]
2017-12-29 21:57:53,496 +0100 [main] DEBUG (HqlSqlWalker.java:747) - processQuery() :  ( SELECT ( {select clause} ( person1_.addressId ( person1_.addressId person1_.id address ) id ) ) ( FromClause{level=2} Person person1_ ) )
2017-12-29 21:57:53,500 +0100 [main] DEBUG (JoinProcessor.java:192) - Using FROM fragment [Person person1_]
2017-12-29 21:57:53,500 +0100 [main] DEBUG (HqlSqlBaseWalker.java:132) - select >> end [level=2, statement=select]
2017-12-29 21:57:53,501 +0100 [main] DEBUG (HqlSqlBaseWalker.java:128) - select : finishing up [level=1, statement=select]
2017-12-29 21:57:53,501 +0100 [main] DEBUG (HqlSqlWalker.java:747) - processQuery() :  ( SELECT ( {select clause} address0_.id ) ( FromClause{level=1} address address0_ ) ( WHERE ( not in ( address0_.id address0_.id id ) ( inList ( SELECT ( {select clause} ( person1_.addressId ( person1_.addressId person1_.id address ) id ) ) ( FromClause{level=2} Person person1_ ) ) ) ) ) )
2017-12-29 21:57:53,503 +0100 [main] DEBUG (JoinProcessor.java:192) - Using FROM fragment [address address0_]
2017-12-29 21:57:53,503 +0100 [main] DEBUG (HqlSqlBaseWalker.java:132) - select >> end [level=1, statement=select]
2017-12-29 21:57:53,503 +0100 [main] DEBUG (QueryTranslatorImpl.java:269) - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (address,Person)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'address0_.id as id1_0_' {alias=a, className=model.entities.Address, tableAlias=address0_}
    |  \-[SQL_TOKEN] SqlFragment: 'address0_.city as city2_0_, address0_.country as country3_0_, address0_.mailBox as mailBox4_0_, address0_.nr as nr5_0_, address0_.postalCode as postalCo6_0_, address0_.street as street7_0_'
    +-[FROM] FromClause: 'FROM' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[a], fromElementByTableAlias=[address0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'address address0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=a,role=null,tableName=address,tableAlias=address0_,origin=null,columns={,className=model.entities.Address}}
    \-[WHERE] SqlNode: 'WHERE'
       \-[NOT_IN] InLogicOperatorNode: 'not in'
          +-[DOT] DotNode: 'address0_.id' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=id,path=a.id,tableAlias=address0_,className=model.entities.Address,classAlias=a}
          |  +-[ALIAS_REF] IdentNode: 'address0_.id' {alias=a, className=model.entities.Address, tableAlias=address0_}
          |  \-[IDENT] IdentNode: 'id' {originalText=id}
          \-[IN_LIST] SqlNode: 'inList'
             \-[SELECT] QueryNode: 'SELECT'  querySpaces (address,Person)
                +-[SELECT_CLAUSE] SelectClause: '{select clause}'
                |  \-[DOT] DotNode: 'person1_.addressId' {propertyName=id,dereferenceType=PRIMITIVE,getPropertyPath=address.id,path=p.address.id,tableAlias=person1_,className=model.entities.Person,classAlias=p}
                |     +-[DOT] DotNode: 'person1_.addressId' {propertyName=id,dereferenceType=UNKNOWN,getPropertyPath=address.id,path=p.address,tableAlias=person1_,className=model.entities.Person,classAlias=p}
                |     |  +-[ALIAS_REF] IdentNode: 'person1_.id' {alias=p, className=model.entities.Person, tableAlias=person1_}
                |     |  \-[IDENT] IdentNode: 'address' {originalText=address}
                |     \-[IDENT] IdentNode: 'id' {originalText=id}
                \-[FROM] FromClause: 'FROM' FromClause{level=2, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[p], fromElementByTableAlias=[person1_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
                   \-[FROM_FRAGMENT] FromElement: 'Person person1_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=p,role=null,tableName=Person,tableAlias=person1_,origin=null,columns={,className=model.entities.Person}}

2017-12-29 21:57:53,503 +0100 [main] DEBUG (ErrorCounter.java:95) - throwQueryException() : no errors
2017-12-29 21:57:53,507 +0100 [main] DEBUG (QueryTranslatorImpl.java:251) - HQL: SELECT a FROM model.entities.Address a WHERE a.id NOT IN (SELECT p.address.id FROM model.entities.Person p)
2017-12-29 21:57:53,507 +0100 [main] DEBUG (QueryTranslatorImpl.java:252) - SQL: select address0_.id as id1_0_, address0_.city as city2_0_, address0_.country as country3_0_, address0_.mailBox as mailBox4_0_, address0_.nr as nr5_0_, address0_.postalCode as postalCo6_0_, address0_.street as street7_0_ from address address0_ where address0_.id not in  (select person1_.addressId from Person person1_)
2017-12-29 21:57:53,507 +0100 [main] DEBUG (ErrorCounter.java:95) - throwQueryException() : no errors
2017-12-29 21:57:53,510 +0100 [main] DEBUG (NamedQueryRepository.java:167) - Checking 0 named SQL queries
2017-12-29 21:57:53,511 +0100 [main] DEBUG (SessionFactoryRegistry.java:52) - Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@6d0b5baf
2017-12-29 21:57:53,512 +0100 [main] DEBUG (SessionFactoryRegistry.java:74) - Registering SessionFactory: 4a9efa14-3b65-40ce-a01e-ce573a14563f (<unnamed>)
2017-12-29 21:57:53,512 +0100 [main] DEBUG (SessionFactoryRegistry.java:81) - Not binding SessionFactory to JNDI, no JNDI name configured
2017-12-29 21:57:53,562 +0100 [main] DEBUG (StatisticsInitiator.java:82) - Statistics initialized [enabled=false]
2017-12-29 21:57:53,567 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:57:53,574 +0100 [main] DEBUG (QueryTranslatorImpl.java:282) - parse() - HQL: FROM model.entities.Remote
2017-12-29 21:57:53,574 +0100 [main] DEBUG (ErrorCounter.java:95) - throwQueryException() : no errors
2017-12-29 21:57:53,575 +0100 [main] DEBUG (QueryTranslatorImpl.java:305) - --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'FROM'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[IDENT] Node: 'model'
                |  \-[IDENT] Node: 'entities'
                \-[IDENT] Node: 'Remote'

2017-12-29 21:57:53,575 +0100 [main] DEBUG (HqlSqlBaseWalker.java:124) - select << begin [level=1, statement=select]
2017-12-29 21:57:53,575 +0100 [main] DEBUG (FromElement.java:147) - FromClause{level=1} : model.entities.Remote (<no alias>) -> remote0_
2017-12-29 21:57:53,575 +0100 [main] DEBUG (HqlSqlBaseWalker.java:128) - select : finishing up [level=1, statement=select]
2017-12-29 21:57:53,575 +0100 [main] DEBUG (HqlSqlWalker.java:747) - processQuery() :  ( SELECT ( FromClause{level=1} Remote remote0_ ) )
2017-12-29 21:57:53,576 +0100 [main] DEBUG (HqlSqlWalker.java:1023) - Derived SELECT clause created.
2017-12-29 21:57:53,576 +0100 [main] DEBUG (JoinProcessor.java:192) - Using FROM fragment [Remote remote0_]
2017-12-29 21:57:53,576 +0100 [main] DEBUG (HqlSqlBaseWalker.java:132) - select >> end [level=1, statement=select]
2017-12-29 21:57:53,576 +0100 [main] DEBUG (QueryTranslatorImpl.java:269) - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Remote)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'remote0_.id as id1_2_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Remote,tableAlias=remote0_,origin=null,columns={,className=model.entities.Remote}}}
    |  \-[SQL_TOKEN] SqlFragment: 'remote0_.frequency as frequenc2_2_, remote0_.isActive as isActive3_2_, remote0_.serialNumber as serialNu4_2_'
    \-[FROM] FromClause: 'FROM' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[remote0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'Remote remote0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Remote,tableAlias=remote0_,origin=null,columns={,className=model.entities.Remote}}

2017-12-29 21:57:53,576 +0100 [main] DEBUG (ErrorCounter.java:95) - throwQueryException() : no errors
2017-12-29 21:57:53,577 +0100 [main] DEBUG (QueryTranslatorImpl.java:251) - HQL: FROM model.entities.Remote
2017-12-29 21:57:53,577 +0100 [main] DEBUG (QueryTranslatorImpl.java:252) - SQL: select remote0_.id as id1_2_, remote0_.frequency as frequenc2_2_, remote0_.isActive as isActive3_2_, remote0_.serialNumber as serialNu4_2_ from Remote remote0_
2017-12-29 21:57:53,577 +0100 [main] DEBUG (ErrorCounter.java:95) - throwQueryException() : no errors
2017-12-29 21:57:53,583 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_, remote0_.frequency as frequenc2_2_, remote0_.isActive as isActive3_2_, remote0_.serialNumber as serialNu4_2_ from Remote remote0_
2017-12-29 21:57:53,595 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 0
2017-12-29 21:57:53,597 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#41]
2017-12-29 21:57:53,603 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 1
2017-12-29 21:57:53,603 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#42]
2017-12-29 21:57:53,604 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 2
2017-12-29 21:57:53,604 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#43]
2017-12-29 21:57:53,604 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 3
2017-12-29 21:57:53,604 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#44]
2017-12-29 21:57:53,604 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 4
2017-12-29 21:57:53,604 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#45]
2017-12-29 21:57:53,604 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 5
2017-12-29 21:57:53,604 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#46]
2017-12-29 21:57:53,605 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 6
2017-12-29 21:57:53,605 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#47]
2017-12-29 21:57:53,605 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 7
2017-12-29 21:57:53,605 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#48]
2017-12-29 21:57:53,605 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 8
2017-12-29 21:57:53,605 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#49]
2017-12-29 21:57:53,605 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 9
2017-12-29 21:57:53,606 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#50]
2017-12-29 21:57:53,606 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 10
2017-12-29 21:57:53,606 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#51]
2017-12-29 21:57:53,606 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 11
2017-12-29 21:57:53,606 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#52]
2017-12-29 21:57:53,606 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 12
2017-12-29 21:57:53,606 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#53]
2017-12-29 21:57:53,607 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 13
2017-12-29 21:57:53,607 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#54]
2017-12-29 21:57:53,607 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 14
2017-12-29 21:57:53,607 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#55]
2017-12-29 21:57:53,608 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 15
2017-12-29 21:57:53,608 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#56]
2017-12-29 21:57:53,608 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 16
2017-12-29 21:57:53,608 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#57]
2017-12-29 21:57:53,608 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 17
2017-12-29 21:57:53,608 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#58]
2017-12-29 21:57:53,609 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 18
2017-12-29 21:57:53,609 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#59]
2017-12-29 21:57:53,609 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 19
2017-12-29 21:57:53,609 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#60]
2017-12-29 21:57:53,609 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 20
2017-12-29 21:57:53,609 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#61]
2017-12-29 21:57:53,609 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 21
2017-12-29 21:57:53,610 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#62]
2017-12-29 21:57:53,610 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 22
2017-12-29 21:57:53,610 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#63]
2017-12-29 21:57:53,610 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 23
2017-12-29 21:57:53,610 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#64]
2017-12-29 21:57:53,610 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 24
2017-12-29 21:57:53,610 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#65]
2017-12-29 21:57:53,611 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 25
2017-12-29 21:57:53,611 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#66]
2017-12-29 21:57:53,611 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 26
2017-12-29 21:57:53,611 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#67]
2017-12-29 21:57:53,611 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 27
2017-12-29 21:57:53,611 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#68]
2017-12-29 21:57:53,611 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 28
2017-12-29 21:57:53,612 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#69]
2017-12-29 21:57:53,612 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 29
2017-12-29 21:57:53,612 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#70]
2017-12-29 21:57:53,612 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 30
2017-12-29 21:57:53,612 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#71]
2017-12-29 21:57:53,612 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 31
2017-12-29 21:57:53,612 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#72]
2017-12-29 21:57:53,612 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 32
2017-12-29 21:57:53,613 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#73]
2017-12-29 21:57:53,613 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 33
2017-12-29 21:57:53,614 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#74]
2017-12-29 21:57:53,614 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 34
2017-12-29 21:57:53,614 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#75]
2017-12-29 21:57:53,614 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 35
2017-12-29 21:57:53,615 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#76]
2017-12-29 21:57:53,615 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 36
2017-12-29 21:57:53,615 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#77]
2017-12-29 21:57:53,615 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 37
2017-12-29 21:57:53,616 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#78]
2017-12-29 21:57:53,616 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 38
2017-12-29 21:57:53,616 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#79]
2017-12-29 21:57:53,616 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 39
2017-12-29 21:57:53,616 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Remote#80]
2017-12-29 21:57:53,617 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#41]
2017-12-29 21:57:53,619 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#41]
2017-12-29 21:57:53,619 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#42]
2017-12-29 21:57:53,619 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#42]
2017-12-29 21:57:53,619 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#43]
2017-12-29 21:57:53,619 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#43]
2017-12-29 21:57:53,619 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#44]
2017-12-29 21:57:53,619 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#44]
2017-12-29 21:57:53,619 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#45]
2017-12-29 21:57:53,619 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#45]
2017-12-29 21:57:53,619 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#46]
2017-12-29 21:57:53,619 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#46]
2017-12-29 21:57:53,620 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#47]
2017-12-29 21:57:53,620 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#47]
2017-12-29 21:57:53,620 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#48]
2017-12-29 21:57:53,620 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#48]
2017-12-29 21:57:53,620 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#49]
2017-12-29 21:57:53,620 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#49]
2017-12-29 21:57:53,620 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#50]
2017-12-29 21:57:53,620 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#50]
2017-12-29 21:57:53,620 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#51]
2017-12-29 21:57:53,620 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#51]
2017-12-29 21:57:53,620 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#52]
2017-12-29 21:57:53,621 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#52]
2017-12-29 21:57:53,621 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#53]
2017-12-29 21:57:53,621 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#53]
2017-12-29 21:57:53,621 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#54]
2017-12-29 21:57:53,621 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#54]
2017-12-29 21:57:53,621 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#55]
2017-12-29 21:57:53,621 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#55]
2017-12-29 21:57:53,621 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#56]
2017-12-29 21:57:53,621 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#56]
2017-12-29 21:57:53,621 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#57]
2017-12-29 21:57:53,621 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#57]
2017-12-29 21:57:53,621 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#58]
2017-12-29 21:57:53,621 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#58]
2017-12-29 21:57:53,621 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#59]
2017-12-29 21:57:53,621 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#59]
2017-12-29 21:57:53,621 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#60]
2017-12-29 21:57:53,621 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#60]
2017-12-29 21:57:53,622 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#61]
2017-12-29 21:57:53,622 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#61]
2017-12-29 21:57:53,622 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#62]
2017-12-29 21:57:53,622 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#62]
2017-12-29 21:57:53,622 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#63]
2017-12-29 21:57:53,622 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#63]
2017-12-29 21:57:53,622 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#64]
2017-12-29 21:57:53,622 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#64]
2017-12-29 21:57:53,622 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#65]
2017-12-29 21:57:53,622 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#65]
2017-12-29 21:57:53,622 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#66]
2017-12-29 21:57:53,623 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#66]
2017-12-29 21:57:53,623 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#67]
2017-12-29 21:57:53,623 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#67]
2017-12-29 21:57:53,623 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#68]
2017-12-29 21:57:53,623 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#68]
2017-12-29 21:57:53,623 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#69]
2017-12-29 21:57:53,623 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#69]
2017-12-29 21:57:53,623 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#70]
2017-12-29 21:57:53,623 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#70]
2017-12-29 21:57:53,623 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#71]
2017-12-29 21:57:53,623 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#71]
2017-12-29 21:57:53,623 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#72]
2017-12-29 21:57:53,623 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#72]
2017-12-29 21:57:53,623 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#73]
2017-12-29 21:57:53,623 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#73]
2017-12-29 21:57:53,624 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#74]
2017-12-29 21:57:53,624 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#74]
2017-12-29 21:57:53,624 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#75]
2017-12-29 21:57:53,624 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#75]
2017-12-29 21:57:53,624 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#76]
2017-12-29 21:57:53,624 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#76]
2017-12-29 21:57:53,624 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#77]
2017-12-29 21:57:53,624 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#77]
2017-12-29 21:57:53,624 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#78]
2017-12-29 21:57:53,625 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#78]
2017-12-29 21:57:53,625 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#79]
2017-12-29 21:57:53,625 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#79]
2017-12-29 21:57:53,625 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#80]
2017-12-29 21:57:53,625 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#80]
2017-12-29 21:57:53,627 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:57:53,628 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:57:53,631 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:57:53,633 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 40 objects
2017-12-29 21:57:53,633 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:57:53,634 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:57:53,635 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=fddfeff5-fa00-4863-8dd7-09c9e8ff0839, id=43, isActive=true, frequency=966144}
2017-12-29 21:57:53,635 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=a6774292-07c7-48b4-81d6-f038b9681b57, id=44, isActive=true, frequency=963023}
2017-12-29 21:57:53,635 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=6a854f2b-3cf2-47a3-ba1a-039a0452c51e, id=41, isActive=true, frequency=66537}
2017-12-29 21:57:53,635 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=acbb730c-3854-4a4a-a2d9-0bd3a1a266f8, id=42, isActive=true, frequency=421900}
2017-12-29 21:57:53,635 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=5a285e25-4383-4e6d-bf6e-f70deddd634d, id=47, isActive=true, frequency=56421}
2017-12-29 21:57:53,635 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=cfebe324-4039-44de-be5b-2bb72f1ebe8a, id=48, isActive=true, frequency=956238}
2017-12-29 21:57:53,635 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=47b29727-2b6e-4932-bb53-3dff525a5b07, id=45, isActive=true, frequency=125695}
2017-12-29 21:57:53,635 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=99403c02-1611-47ea-ad9b-f01d48282232, id=46, isActive=true, frequency=714388}
2017-12-29 21:57:53,635 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=efd130d5-83a5-4c71-aa58-72ab811356eb, id=59, isActive=true, frequency=469707}
2017-12-29 21:57:53,635 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=1b1b0ca1-efae-4df0-8e67-5436860d5ec8, id=60, isActive=true, frequency=479898}
2017-12-29 21:57:53,635 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=54d978d9-3460-46e1-ae3d-a44074de502b, id=57, isActive=true, frequency=988909}
2017-12-29 21:57:53,635 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=446302d5-aaf0-4724-85bb-4eee7716bbb1, id=58, isActive=true, frequency=736315}
2017-12-29 21:57:53,636 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=afdceb9d-0ad4-4903-88c4-e2b3ff02eb4d, id=63, isActive=true, frequency=361481}
2017-12-29 21:57:53,636 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=b4c5d9fe-0782-405b-84db-b4e2c907a27c, id=64, isActive=true, frequency=206107}
2017-12-29 21:57:53,636 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=377f6921-92a5-48dc-9011-9b56ad34d77a, id=61, isActive=true, frequency=512619}
2017-12-29 21:57:53,636 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=fe6e88ce-8162-4c20-a182-33fce8ef859f, id=62, isActive=true, frequency=989462}
2017-12-29 21:57:53,636 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=abedb318-737e-404c-82c6-2707203413d4, id=51, isActive=true, frequency=330377}
2017-12-29 21:57:53,636 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=90911497-e4b7-4359-8329-8bc41920dc65, id=52, isActive=true, frequency=636988}
2017-12-29 21:57:53,636 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=4c0d1475-ad23-4825-90c5-7329fe9efbd4, id=49, isActive=true, frequency=204569}
2017-12-29 21:57:53,636 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=93b283fa-4a6e-4376-82ed-c4fe9b6ed2ec, id=50, isActive=true, frequency=600588}
2017-12-29 21:57:53,636 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Remote{serialNumber=7eb1fe5f-bd0f-4251-bf29-62f13c1563c0, id=55, isActive=true, frequency=631509}
2017-12-29 21:57:53,636 +0100 [main] DEBUG (EntityPrinter.java:106) - More......
2017-12-29 21:57:53,637 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:57:53,638 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:57:53,640 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_, address0_.city as city2_0_, address0_.country as country3_0_, address0_.mailBox as mailBox4_0_, address0_.nr as nr5_0_, address0_.postalCode as postalCo6_0_, address0_.street as street7_0_ from address address0_ where address0_.id not in  (select person1_.addressId from Person person1_)
2017-12-29 21:57:53,642 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 0
2017-12-29 21:57:53,643 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Address#71]
2017-12-29 21:57:53,643 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 1
2017-12-29 21:57:53,643 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Address#72]
2017-12-29 21:57:53,643 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 2
2017-12-29 21:57:53,643 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Address#73]
2017-12-29 21:57:53,643 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 3
2017-12-29 21:57:53,644 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Address#74]
2017-12-29 21:57:53,644 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 4
2017-12-29 21:57:53,644 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Address#75]
2017-12-29 21:57:53,644 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 5
2017-12-29 21:57:53,644 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Address#76]
2017-12-29 21:57:53,644 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 6
2017-12-29 21:57:53,644 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Address#77]
2017-12-29 21:57:53,644 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 7
2017-12-29 21:57:53,644 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Address#78]
2017-12-29 21:57:53,644 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 8
2017-12-29 21:57:53,645 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Address#79]
2017-12-29 21:57:53,645 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 9
2017-12-29 21:57:53,645 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Address#80]
2017-12-29 21:57:53,645 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#71]
2017-12-29 21:57:53,645 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#71]
2017-12-29 21:57:53,645 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#72]
2017-12-29 21:57:53,645 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#72]
2017-12-29 21:57:53,645 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#73]
2017-12-29 21:57:53,646 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#73]
2017-12-29 21:57:53,646 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#74]
2017-12-29 21:57:53,646 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#74]
2017-12-29 21:57:53,646 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#75]
2017-12-29 21:57:53,646 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#75]
2017-12-29 21:57:53,646 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#76]
2017-12-29 21:57:53,646 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#76]
2017-12-29 21:57:53,646 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#77]
2017-12-29 21:57:53,646 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#77]
2017-12-29 21:57:53,646 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#78]
2017-12-29 21:57:53,646 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#78]
2017-12-29 21:57:53,646 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#79]
2017-12-29 21:57:53,647 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#79]
2017-12-29 21:57:53,647 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#80]
2017-12-29 21:57:53,647 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#80]
2017-12-29 21:57:53,647 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:57:53,648 +0100 [main] DEBUG (TransactionImpl.java:55) - begin
2017-12-29 21:57:53,649 +0100 [main] DEBUG (QueryTranslatorImpl.java:282) - parse() - HQL: FROM model.entities.Person
2017-12-29 21:57:53,649 +0100 [main] DEBUG (ErrorCounter.java:95) - throwQueryException() : no errors
2017-12-29 21:57:53,649 +0100 [main] DEBUG (QueryTranslatorImpl.java:305) - --- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       \-[FROM] Node: 'FROM'
          \-[RANGE] Node: 'RANGE'
             \-[DOT] Node: '.'
                +-[DOT] Node: '.'
                |  +-[IDENT] Node: 'model'
                |  \-[IDENT] Node: 'entities'
                \-[IDENT] Node: 'Person'

2017-12-29 21:57:53,649 +0100 [main] DEBUG (HqlSqlBaseWalker.java:124) - select << begin [level=1, statement=select]
2017-12-29 21:57:53,650 +0100 [main] DEBUG (FromElement.java:147) - FromClause{level=1} : model.entities.Person (<no alias>) -> person0_
2017-12-29 21:57:53,650 +0100 [main] DEBUG (HqlSqlBaseWalker.java:128) - select : finishing up [level=1, statement=select]
2017-12-29 21:57:53,650 +0100 [main] DEBUG (HqlSqlWalker.java:747) - processQuery() :  ( SELECT ( FromClause{level=1} Person person0_ ) )
2017-12-29 21:57:53,650 +0100 [main] DEBUG (HqlSqlWalker.java:1023) - Derived SELECT clause created.
2017-12-29 21:57:53,651 +0100 [main] DEBUG (JoinProcessor.java:192) - Using FROM fragment [Person person0_]
2017-12-29 21:57:53,651 +0100 [main] DEBUG (HqlSqlBaseWalker.java:132) - select >> end [level=1, statement=select]
2017-12-29 21:57:53,651 +0100 [main] DEBUG (QueryTranslatorImpl.java:269) - --- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (Person)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'person0_.id as id1_1_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Person,tableAlias=person0_,origin=null,columns={,className=model.entities.Person}}}
    |  \-[SQL_TOKEN] SqlFragment: 'person0_.addressId as addressI5_1_, person0_.endOfContract as endOfCon2_1_, person0_.firstname as firstnam3_1_, person0_.lastname as lastname4_1_, person0_.remoteId as remoteId6_1_'
    \-[FROM] FromClause: 'FROM' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[], fromElementByTableAlias=[person0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'Person person0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=null,role=null,tableName=Person,tableAlias=person0_,origin=null,columns={,className=model.entities.Person}}

2017-12-29 21:57:53,651 +0100 [main] DEBUG (ErrorCounter.java:95) - throwQueryException() : no errors
2017-12-29 21:57:53,651 +0100 [main] DEBUG (QueryTranslatorImpl.java:251) - HQL: FROM model.entities.Person
2017-12-29 21:57:53,651 +0100 [main] DEBUG (QueryTranslatorImpl.java:252) - SQL: select person0_.id as id1_1_, person0_.addressId as addressI5_1_, person0_.endOfContract as endOfCon2_1_, person0_.firstname as firstnam3_1_, person0_.lastname as lastname4_1_, person0_.remoteId as remoteId6_1_ from Person person0_
2017-12-29 21:57:53,651 +0100 [main] DEBUG (ErrorCounter.java:95) - throwQueryException() : no errors
2017-12-29 21:57:53,652 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select person0_.id as id1_1_, person0_.addressId as addressI5_1_, person0_.endOfContract as endOfCon2_1_, person0_.firstname as firstnam3_1_, person0_.lastname as lastname4_1_, person0_.remoteId as remoteId6_1_ from Person person0_
2017-12-29 21:57:53,653 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 0
2017-12-29 21:57:53,653 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#31]
2017-12-29 21:57:53,654 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 1
2017-12-29 21:57:53,654 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#32]
2017-12-29 21:57:53,655 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 2
2017-12-29 21:57:53,655 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#33]
2017-12-29 21:57:53,655 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 3
2017-12-29 21:57:53,655 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#34]
2017-12-29 21:57:53,655 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 4
2017-12-29 21:57:53,655 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#35]
2017-12-29 21:57:53,655 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 5
2017-12-29 21:57:53,656 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#36]
2017-12-29 21:57:53,656 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 6
2017-12-29 21:57:53,656 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#37]
2017-12-29 21:57:53,656 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 7
2017-12-29 21:57:53,656 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#38]
2017-12-29 21:57:53,656 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 8
2017-12-29 21:57:53,656 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#39]
2017-12-29 21:57:53,657 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 9
2017-12-29 21:57:53,657 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#40]
2017-12-29 21:57:53,657 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 10
2017-12-29 21:57:53,657 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#41]
2017-12-29 21:57:53,657 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 11
2017-12-29 21:57:53,657 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#42]
2017-12-29 21:57:53,657 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 12
2017-12-29 21:57:53,658 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#43]
2017-12-29 21:57:53,658 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 13
2017-12-29 21:57:53,658 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#44]
2017-12-29 21:57:53,658 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 14
2017-12-29 21:57:53,658 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#45]
2017-12-29 21:57:53,659 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 15
2017-12-29 21:57:53,659 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#46]
2017-12-29 21:57:53,659 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 16
2017-12-29 21:57:53,660 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#47]
2017-12-29 21:57:53,660 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 17
2017-12-29 21:57:53,660 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#48]
2017-12-29 21:57:53,660 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 18
2017-12-29 21:57:53,660 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#49]
2017-12-29 21:57:53,660 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 19
2017-12-29 21:57:53,660 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#50]
2017-12-29 21:57:53,661 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 20
2017-12-29 21:57:53,661 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#51]
2017-12-29 21:57:53,661 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 21
2017-12-29 21:57:53,661 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#52]
2017-12-29 21:57:53,661 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 22
2017-12-29 21:57:53,661 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#53]
2017-12-29 21:57:53,662 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 23
2017-12-29 21:57:53,662 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#54]
2017-12-29 21:57:53,662 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 24
2017-12-29 21:57:53,662 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#55]
2017-12-29 21:57:53,662 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 25
2017-12-29 21:57:53,662 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#56]
2017-12-29 21:57:53,663 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 26
2017-12-29 21:57:53,663 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#57]
2017-12-29 21:57:53,663 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 27
2017-12-29 21:57:53,663 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#58]
2017-12-29 21:57:53,663 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 28
2017-12-29 21:57:53,663 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#59]
2017-12-29 21:57:53,663 +0100 [main] DEBUG (DelegatingBasicLogger.java:384) - Result set row: 29
2017-12-29 21:57:53,663 +0100 [main] DEBUG (Loader.java:1533) - Result row: EntityKey[model.entities.Person#60]
2017-12-29 21:57:53,664 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#31]
2017-12-29 21:57:53,665 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:57:53,671 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,672 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,673 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#41]
2017-12-29 21:57:53,673 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#41]
2017-12-29 21:57:53,674 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,674 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#41
2017-12-29 21:57:53,674 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:57:53,676 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,676 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,676 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#41]
2017-12-29 21:57:53,677 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#41]
2017-12-29 21:57:53,677 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,677 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#41
2017-12-29 21:57:53,677 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#31]
2017-12-29 21:57:53,677 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#32]
2017-12-29 21:57:53,678 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:57:53,679 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,679 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,679 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#42]
2017-12-29 21:57:53,679 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#42]
2017-12-29 21:57:53,680 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,680 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#42
2017-12-29 21:57:53,680 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:57:53,681 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,681 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,682 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#42]
2017-12-29 21:57:53,682 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#42]
2017-12-29 21:57:53,682 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,682 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#42
2017-12-29 21:57:53,682 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#32]
2017-12-29 21:57:53,682 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#33]
2017-12-29 21:57:53,682 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:57:53,683 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,683 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,684 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#43]
2017-12-29 21:57:53,684 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#43]
2017-12-29 21:57:53,684 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,684 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#43
2017-12-29 21:57:53,684 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:57:53,685 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,685 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,685 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#43]
2017-12-29 21:57:53,685 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#43]
2017-12-29 21:57:53,685 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,685 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#43
2017-12-29 21:57:53,686 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#33]
2017-12-29 21:57:53,686 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#34]
2017-12-29 21:57:53,686 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:57:53,686 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,687 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,687 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#44]
2017-12-29 21:57:53,687 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#44]
2017-12-29 21:57:53,687 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,687 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#44
2017-12-29 21:57:53,688 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:57:53,688 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,688 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,689 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#44]
2017-12-29 21:57:53,689 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#44]
2017-12-29 21:57:53,689 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,689 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#44
2017-12-29 21:57:53,689 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#34]
2017-12-29 21:57:53,689 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#35]
2017-12-29 21:57:53,689 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:57:53,691 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,691 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,692 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#45]
2017-12-29 21:57:53,692 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#45]
2017-12-29 21:57:53,692 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,693 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#45
2017-12-29 21:57:53,693 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:57:53,694 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,694 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,694 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#45]
2017-12-29 21:57:53,695 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#45]
2017-12-29 21:57:53,695 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,695 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#45
2017-12-29 21:57:53,695 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#35]
2017-12-29 21:57:53,695 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#36]
2017-12-29 21:57:53,695 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:57:53,696 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,696 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,697 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#46]
2017-12-29 21:57:53,697 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#46]
2017-12-29 21:57:53,697 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,697 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#46
2017-12-29 21:57:53,697 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:57:53,698 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,698 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,699 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#46]
2017-12-29 21:57:53,699 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#46]
2017-12-29 21:57:53,699 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,699 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#46
2017-12-29 21:57:53,699 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#36]
2017-12-29 21:57:53,699 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#37]
2017-12-29 21:57:53,700 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:57:53,701 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,701 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,701 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#47]
2017-12-29 21:57:53,701 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#47]
2017-12-29 21:57:53,702 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,702 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#47
2017-12-29 21:57:53,702 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:57:53,703 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,703 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,703 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#47]
2017-12-29 21:57:53,703 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#47]
2017-12-29 21:57:53,704 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,704 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#47
2017-12-29 21:57:53,704 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#37]
2017-12-29 21:57:53,704 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#38]
2017-12-29 21:57:53,704 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:57:53,705 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,705 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,705 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#48]
2017-12-29 21:57:53,705 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#48]
2017-12-29 21:57:53,705 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,706 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#48
2017-12-29 21:57:53,706 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:57:53,706 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,707 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,707 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#48]
2017-12-29 21:57:53,707 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#48]
2017-12-29 21:57:53,707 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,707 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#48
2017-12-29 21:57:53,707 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#38]
2017-12-29 21:57:53,707 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#39]
2017-12-29 21:57:53,708 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:57:53,708 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,708 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,709 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#49]
2017-12-29 21:57:53,709 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#49]
2017-12-29 21:57:53,709 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,710 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#49
2017-12-29 21:57:53,710 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:57:53,710 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,711 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,711 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#49]
2017-12-29 21:57:53,711 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#49]
2017-12-29 21:57:53,711 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,711 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#49
2017-12-29 21:57:53,712 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#39]
2017-12-29 21:57:53,712 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#40]
2017-12-29 21:57:53,712 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:57:53,712 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,713 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,713 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#50]
2017-12-29 21:57:53,713 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#50]
2017-12-29 21:57:53,713 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,713 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#50
2017-12-29 21:57:53,714 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:57:53,714 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,714 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,715 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#50]
2017-12-29 21:57:53,715 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#50]
2017-12-29 21:57:53,715 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,715 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#50
2017-12-29 21:57:53,715 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#40]
2017-12-29 21:57:53,715 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#41]
2017-12-29 21:57:53,716 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:57:53,716 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,717 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,717 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#51]
2017-12-29 21:57:53,717 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#51]
2017-12-29 21:57:53,717 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,717 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#51
2017-12-29 21:57:53,717 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:57:53,718 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,719 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,719 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#51]
2017-12-29 21:57:53,719 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#51]
2017-12-29 21:57:53,719 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,719 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#51
2017-12-29 21:57:53,719 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#41]
2017-12-29 21:57:53,720 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#42]
2017-12-29 21:57:53,720 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:57:53,720 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,721 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,721 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#52]
2017-12-29 21:57:53,721 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#52]
2017-12-29 21:57:53,721 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,721 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#52
2017-12-29 21:57:53,722 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:57:53,722 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,722 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,723 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#52]
2017-12-29 21:57:53,723 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#52]
2017-12-29 21:57:53,723 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,723 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#52
2017-12-29 21:57:53,723 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#42]
2017-12-29 21:57:53,723 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#43]
2017-12-29 21:57:53,723 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:57:53,724 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,724 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,725 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#53]
2017-12-29 21:57:53,725 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#53]
2017-12-29 21:57:53,725 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,725 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#53
2017-12-29 21:57:53,725 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:57:53,726 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,726 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,726 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#53]
2017-12-29 21:57:53,727 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#53]
2017-12-29 21:57:53,727 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,727 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#53
2017-12-29 21:57:53,727 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#43]
2017-12-29 21:57:53,727 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#44]
2017-12-29 21:57:53,727 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:57:53,728 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,728 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,729 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#54]
2017-12-29 21:57:53,729 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#54]
2017-12-29 21:57:53,729 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,729 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#54
2017-12-29 21:57:53,729 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:57:53,730 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,730 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,730 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#54]
2017-12-29 21:57:53,730 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#54]
2017-12-29 21:57:53,731 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,731 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#54
2017-12-29 21:57:53,731 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#44]
2017-12-29 21:57:53,731 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#45]
2017-12-29 21:57:53,731 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:57:53,732 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,732 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,732 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#55]
2017-12-29 21:57:53,732 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#55]
2017-12-29 21:57:53,734 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,734 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#55
2017-12-29 21:57:53,734 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:57:53,735 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,735 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,735 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#55]
2017-12-29 21:57:53,736 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#55]
2017-12-29 21:57:53,736 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,736 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#55
2017-12-29 21:57:53,736 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#45]
2017-12-29 21:57:53,736 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#46]
2017-12-29 21:57:53,736 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:57:53,737 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,737 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,737 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#56]
2017-12-29 21:57:53,738 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#56]
2017-12-29 21:57:53,738 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,738 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#56
2017-12-29 21:57:53,738 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:57:53,739 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,739 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,739 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#56]
2017-12-29 21:57:53,739 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#56]
2017-12-29 21:57:53,739 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,740 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#56
2017-12-29 21:57:53,740 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#46]
2017-12-29 21:57:53,740 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#47]
2017-12-29 21:57:53,740 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:57:53,741 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,741 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,741 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#57]
2017-12-29 21:57:53,741 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#57]
2017-12-29 21:57:53,741 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,742 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#57
2017-12-29 21:57:53,742 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:57:53,743 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,743 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,743 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#57]
2017-12-29 21:57:53,743 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#57]
2017-12-29 21:57:53,743 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,744 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#57
2017-12-29 21:57:53,744 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#47]
2017-12-29 21:57:53,744 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#48]
2017-12-29 21:57:53,744 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:57:53,744 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,745 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,745 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#58]
2017-12-29 21:57:53,745 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#58]
2017-12-29 21:57:53,745 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,745 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#58
2017-12-29 21:57:53,745 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:57:53,746 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,746 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,746 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#58]
2017-12-29 21:57:53,746 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#58]
2017-12-29 21:57:53,747 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,747 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#58
2017-12-29 21:57:53,747 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#48]
2017-12-29 21:57:53,747 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#49]
2017-12-29 21:57:53,747 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:57:53,748 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,748 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,748 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#59]
2017-12-29 21:57:53,749 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#59]
2017-12-29 21:57:53,749 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,749 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#59
2017-12-29 21:57:53,749 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:57:53,750 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,750 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,750 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#59]
2017-12-29 21:57:53,751 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#59]
2017-12-29 21:57:53,751 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,751 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#59
2017-12-29 21:57:53,751 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#49]
2017-12-29 21:57:53,751 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#50]
2017-12-29 21:57:53,751 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:57:53,752 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,752 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,752 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#60]
2017-12-29 21:57:53,753 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#60]
2017-12-29 21:57:53,753 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,753 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#60
2017-12-29 21:57:53,753 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:57:53,754 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,754 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,754 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#60]
2017-12-29 21:57:53,754 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#60]
2017-12-29 21:57:53,754 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,755 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#60
2017-12-29 21:57:53,755 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#50]
2017-12-29 21:57:53,755 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#51]
2017-12-29 21:57:53,755 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:57:53,756 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,756 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,756 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#61]
2017-12-29 21:57:53,757 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#61]
2017-12-29 21:57:53,757 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,757 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#61
2017-12-29 21:57:53,757 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:57:53,758 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,758 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,758 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#61]
2017-12-29 21:57:53,759 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#61]
2017-12-29 21:57:53,759 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,759 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#61
2017-12-29 21:57:53,759 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#51]
2017-12-29 21:57:53,759 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#52]
2017-12-29 21:57:53,759 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:57:53,760 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,760 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,760 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#62]
2017-12-29 21:57:53,761 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#62]
2017-12-29 21:57:53,761 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,761 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#62
2017-12-29 21:57:53,761 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:57:53,762 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,762 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,762 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#62]
2017-12-29 21:57:53,763 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#62]
2017-12-29 21:57:53,763 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,763 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#62
2017-12-29 21:57:53,763 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#52]
2017-12-29 21:57:53,763 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#53]
2017-12-29 21:57:53,763 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:57:53,764 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,765 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,765 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#63]
2017-12-29 21:57:53,765 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#63]
2017-12-29 21:57:53,765 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,765 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#63
2017-12-29 21:57:53,765 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:57:53,768 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,768 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,768 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#63]
2017-12-29 21:57:53,768 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#63]
2017-12-29 21:57:53,769 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,769 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#63
2017-12-29 21:57:53,769 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#53]
2017-12-29 21:57:53,769 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#54]
2017-12-29 21:57:53,769 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:57:53,769 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,770 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,770 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#64]
2017-12-29 21:57:53,770 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#64]
2017-12-29 21:57:53,770 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,771 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#64
2017-12-29 21:57:53,771 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:57:53,772 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,772 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,772 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#64]
2017-12-29 21:57:53,773 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#64]
2017-12-29 21:57:53,773 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,773 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#64
2017-12-29 21:57:53,773 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#54]
2017-12-29 21:57:53,773 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#55]
2017-12-29 21:57:53,773 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:57:53,774 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,775 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,775 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#65]
2017-12-29 21:57:53,775 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#65]
2017-12-29 21:57:53,776 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,776 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#65
2017-12-29 21:57:53,776 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:57:53,780 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,780 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,780 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#65]
2017-12-29 21:57:53,781 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#65]
2017-12-29 21:57:53,781 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,781 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#65
2017-12-29 21:57:53,781 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#55]
2017-12-29 21:57:53,781 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#56]
2017-12-29 21:57:53,782 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:57:53,784 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,784 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,784 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#66]
2017-12-29 21:57:53,784 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#66]
2017-12-29 21:57:53,785 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,785 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#66
2017-12-29 21:57:53,785 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:57:53,791 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,791 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,791 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#66]
2017-12-29 21:57:53,792 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#66]
2017-12-29 21:57:53,792 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,792 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#66
2017-12-29 21:57:53,792 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#56]
2017-12-29 21:57:53,793 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#57]
2017-12-29 21:57:53,793 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:57:53,794 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,794 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,794 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#67]
2017-12-29 21:57:53,795 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#67]
2017-12-29 21:57:53,795 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,795 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#67
2017-12-29 21:57:53,795 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:57:53,796 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,797 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,797 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#67]
2017-12-29 21:57:53,797 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#67]
2017-12-29 21:57:53,797 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,798 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#67
2017-12-29 21:57:53,798 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#57]
2017-12-29 21:57:53,798 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#58]
2017-12-29 21:57:53,798 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:57:53,799 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,799 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,799 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#68]
2017-12-29 21:57:53,800 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#68]
2017-12-29 21:57:53,800 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,800 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#68
2017-12-29 21:57:53,800 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:57:53,801 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,801 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,802 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#68]
2017-12-29 21:57:53,802 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#68]
2017-12-29 21:57:53,802 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,802 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#68
2017-12-29 21:57:53,802 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#58]
2017-12-29 21:57:53,802 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#59]
2017-12-29 21:57:53,803 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:57:53,828 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,828 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,830 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#69]
2017-12-29 21:57:53,831 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#69]
2017-12-29 21:57:53,831 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,832 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#69
2017-12-29 21:57:53,832 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:57:53,833 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,833 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,833 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#69]
2017-12-29 21:57:53,833 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#69]
2017-12-29 21:57:53,834 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,834 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#69
2017-12-29 21:57:53,834 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#59]
2017-12-29 21:57:53,834 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Person#60]
2017-12-29 21:57:53,834 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select address0_.id as id1_0_0_, address0_.city as city2_0_0_, address0_.country as country3_0_0_, address0_.mailBox as mailBox4_0_0_, address0_.nr as nr5_0_0_, address0_.postalCode as postalCo6_0_0_, address0_.street as street7_0_0_ from address address0_ where address0_.id=?
2017-12-29 21:57:53,836 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,836 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,836 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Address#70]
2017-12-29 21:57:53,836 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Address#70]
2017-12-29 21:57:53,837 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,837 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Address#70
2017-12-29 21:57:53,837 +0100 [main] DEBUG (SqlStatementLogger.java:92) - select remote0_.id as id1_2_0_, remote0_.frequency as frequenc2_2_0_, remote0_.isActive as isActive3_2_0_, remote0_.serialNumber as serialNu4_2_0_ from Remote remote0_ where remote0_.id=?
2017-12-29 21:57:53,838 +0100 [main] DEBUG (ResultSetProcessorImpl.java:120) - Starting ResultSet row #0
2017-12-29 21:57:53,838 +0100 [main] DEBUG (EntityReferenceInitializerImpl.java:126) - On call to EntityIdentifierReaderImpl#resolve, EntityKey was already known; should only happen on root returns with an optional identifier specified
2017-12-29 21:57:53,838 +0100 [main] DEBUG (TwoPhaseLoad.java:141) - Resolving associations for [model.entities.Remote#70]
2017-12-29 21:57:53,839 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Remote#70]
2017-12-29 21:57:53,839 +0100 [main] DEBUG (ResourceRegistryStandardImpl.java:84) - HHH000387: ResultSet's statement was not registered
2017-12-29 21:57:53,839 +0100 [main] DEBUG (AbstractLoadPlanBasedEntityLoader.java:189) - Done entity load : model.entities.Remote#70
2017-12-29 21:57:53,839 +0100 [main] DEBUG (TwoPhaseLoad.java:281) - Done materializing entity [model.entities.Person#60]
2017-12-29 21:57:53,839 +0100 [main] DEBUG (TransactionImpl.java:66) - committing
2017-12-29 21:57:53,839 +0100 [main] DEBUG (AbstractFlushingEventListener.java:132) - Processing flush-time cascades
2017-12-29 21:57:53,843 +0100 [main] DEBUG (AbstractFlushingEventListener.java:174) - Dirty checking collections
2017-12-29 21:57:53,845 +0100 [main] DEBUG (AbstractFlushingEventListener.java:106) - Flushed: 0 insertions, 0 updates, 0 deletions to 90 objects
2017-12-29 21:57:53,845 +0100 [main] DEBUG (AbstractFlushingEventListener.java:113) - Flushed: 0 (re)creations, 0 updates, 0 removals to 0 collections
2017-12-29 21:57:53,846 +0100 [main] DEBUG (EntityPrinter.java:102) - Listing entities:
2017-12-29 21:57:53,846 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=9, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=49}
2017-12-29 21:57:53,846 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=10, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=50}
2017-12-29 21:57:53,846 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=7, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=47}
2017-12-29 21:57:53,846 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=8, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=48}
2017-12-29 21:57:53,846 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=5, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=45}
2017-12-29 21:57:53,846 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=6, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=46}
2017-12-29 21:57:53,846 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=3, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=43}
2017-12-29 21:57:53,846 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=4, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=44}
2017-12-29 21:57:53,846 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Thomas, address=model.entities.Address#65, id=55, remote=model.entities.Remote#65, endOfContract=2017-12-29 00:00:00.0, lastname=Dotson}
2017-12-29 21:57:53,847 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=17, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=57}
2017-12-29 21:57:53,847 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Jeffrey, address=model.entities.Address#64, id=54, remote=model.entities.Remote#64, endOfContract=2017-12-29 00:00:00.0, lastname=Suarez}
2017-12-29 21:57:53,847 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=18, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=58}
2017-12-29 21:57:53,847 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Chuck, address=model.entities.Address#67, id=57, remote=model.entities.Remote#67, endOfContract=2017-12-29 00:00:00.0, lastname=Castillo}
2017-12-29 21:57:53,847 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=15, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=55}
2017-12-29 21:57:53,847 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Mickey, address=model.entities.Address#66, id=56, remote=model.entities.Remote#66, endOfContract=2017-12-29 00:00:00.0, lastname=Cruz}
2017-12-29 21:57:53,847 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=16, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=56}
2017-12-29 21:57:53,847 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Michael, address=model.entities.Address#69, id=59, remote=model.entities.Remote#69, endOfContract=2017-12-29 00:00:00.0, lastname=Gross}
2017-12-29 21:57:53,847 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=13, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=53}
2017-12-29 21:57:53,847 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Person{firstname=Sierra, address=model.entities.Address#68, id=58, remote=model.entities.Remote#68, endOfContract=2017-12-29 00:00:00.0, lastname=Schneider}
2017-12-29 21:57:53,847 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=14, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=54}
2017-12-29 21:57:53,847 +0100 [main] DEBUG (EntityPrinter.java:109) - model.entities.Address{country=Belgi�, mailBox=11, nr=150, city=Leuven, street=Bondgenotenlaan, postalCode=3000, id=51}
2017-12-29 21:57:53,847 +0100 [main] DEBUG (EntityPrinter.java:106) - More......
2017-12-29 21:57:53,848 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
2017-12-29 21:57:53,848 +0100 [main] DEBUG (LogicalConnectionManagedImpl.java:161) - Initiating JDBC connection release from afterTransaction
